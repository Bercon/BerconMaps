; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	fabsf
PUBLIC	??0Class_ID@@QEAA@KK@Z				; Class_ID::Class_ID
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?pow@@YAMMM@Z					; pow
PUBLIC	??D@YA?AVPoint3@@AEBV0@M@Z			; operator*
PUBLIC	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ	; MaxSDK::AssetManagement::AssetId::AssetId
PUBLIC	?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::fractal
PUBLIC	?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::turbulence
PUBLIC	?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z	; Fractal::fBm
PUBLIC	?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::fBmTurb
PUBLIC	?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::heteroTerrain
PUBLIC	?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::hybridMultiFractal
PUBLIC	?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Fractal::ridgedMultiFractal
PUBLIC	?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::fractal
PUBLIC	?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::turbulence
PUBLIC	?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z	; Fractal::fBm
PUBLIC	?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::fBmTurb
PUBLIC	?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::heteroTerrain
PUBLIC	?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::hybridMultiFractal
PUBLIC	?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Fractal::ridgedMultiFractal
PUBLIC	?fBm@Fractal@@SAMVPoint3@@MMM@Z			; Fractal::fBm
PUBLIC	?grain@Fractal@@SAMVPoint3@@MM@Z		; Fractal::grain
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	fabs:PROC
EXTRN	__imp_powf:PROC
EXTRN	__imp_??0Point3@@QEAA@MMM@Z:PROC
EXTRN	__imp_??0Point3@@QEAA@AEBV0@@Z:PROC
EXTRN	__imp_??XPoint3@@QEAAAEAV0@M@Z:PROC
EXTRN	?smooth@@YAMMMM@Z:PROC				; smooth
EXTRN	?noise@Perlin@@SAMMMM@Z:PROC			; Perlin::noise
EXTRN	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z:PROC ; Noise::noise
EXTRN	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z:PROC ; Noise::noise
EXTRN	__CxxFrameHandler3:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
?kTriObjNormalXTCID@@3VClass_ID@@B DQ 01H DUP (?)	; kTriObjNormalXTCID
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsf DD	imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fabsf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fabs@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?fabs@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pow@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?pow@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AVPoint3@@AEBV0@M@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??D@YA?AVPoint3@@AEBV0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
	DD	imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ+21
	DD	imagerel $unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkTriObjNormalXTCID@@YAXXZ DD imagerel ??__EkTriObjNormalXTCID@@YAXXZ
	DD	imagerel ??__EkTriObjNormalXTCID@@YAXXZ+32
	DD	imagerel $unwind$??__EkTriObjNormalXTCID@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN7
	DD	imagerel $LN7+312
	DD	imagerel $unwind$?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN7
	DD	imagerel $LN7+302
	DD	imagerel $unwind$?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+455
	DD	imagerel $unwind$?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+449
	DD	imagerel $unwind$?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+592
	DD	imagerel $unwind$?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN10
	DD	imagerel $LN10+711
	DD	imagerel $unwind$?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+531
	DD	imagerel $unwind$?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN7
	DD	imagerel $LN7+400
	DD	imagerel $unwind$?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN7
	DD	imagerel $LN7+387
	DD	imagerel $unwind$?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+514
	DD	imagerel $unwind$?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+508
	DD	imagerel $unwind$?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+678
	DD	imagerel $unwind$?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN10
	DD	imagerel $LN10+806
	DD	imagerel $unwind$?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD imagerel $LN9
	DD	imagerel $LN9+586
	DD	imagerel $unwind$?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fBm@Fractal@@SAMVPoint3@@MMM@Z DD imagerel $LN9
	DD	imagerel $LN9+389
	DD	imagerel $unwind$?fBm@Fractal@@SAMVPoint3@@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grain@Fractal@@SAMVPoint3@@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$?grain@Fractal@@SAMVPoint3@@MM@Z
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grain@Fractal@@SAMVPoint3@@MM@Z DD 011501H
	DD	08215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fBm@Fractal@@SAMVPoint3@@MMM@Z DD 011b01H
	DD	0821bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 011401H
	DD	0e214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 021701H
	DD	0130117H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 021701H
	DD	0110117H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 011401H
	DD	0e214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 011401H
	DD	0e214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 011401H
	DD	0e214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z DD 011401H
	DD	0e214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkTriObjNormalXTCID@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD 020701H
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AVPoint3@@AEBV0@M@Z DD 011401H
	DD	06214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?pow@@YAMMM@Z DD imagerel ?pow@@YAMMM@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?pow@@YAMMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?pow@@YAMMM@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pow@@YAMMM@Z DD 011919H
	DD	06210H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?pow@@YAMMM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?fabs@@YAMM@Z DD imagerel ?fabs@@YAMM@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?fabs@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?fabs@@YAMM@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fabs@@YAMM@Z DD 011319H
	DD	0620aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?fabs@@YAMM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsf DD 010a01H
	DD	0420aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?kTriObjNormalXTCID$initializer$@@3P6AXXZEA DQ FLAT:??__EkTriObjNormalXTCID@@YAXXZ ; kTriObjNormalXTCID$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?grain@Fractal@@SAMVPoint3@@MM@Z
_TEXT	SEGMENT
g$ = 32
$T1 = 40
$T2 = 48
p$ = 80
amount$ = 88
freq$ = 96
?grain@Fractal@@SAMVPoint3@@MM@Z PROC			; Fractal::grain, COMDAT

; 308  : float Fractal::grain(Point3 p, float amount, float freq) {

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 309  : 		p *= freq;

	movss	xmm1, DWORD PTR freq$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 310  : 		p.z *= .05f;

	mov	rax, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mov	rax, QWORD PTR p$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 311  : 		float g = (fBm(p, 4.f, 2.f, .5f)+1.f)*.5f;

	lea	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@40800000
	mov	rcx, rax
	call	?fBm@Fractal@@SAMVPoint3@@MMM@Z		; Fractal::fBm
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR g$[rsp], xmm0

; 312  : 		return smooth(g, (1.f-amount), 1.f);;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR amount$[rsp]
	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR g$[rsp]
	call	?smooth@@YAMMMM@Z			; smooth

; 313  : }

	add	rsp, 72					; 00000048H
	ret	0
?grain@Fractal@@SAMVPoint3@@MM@Z ENDP			; Fractal::grain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fBm@Fractal@@SAMVPoint3@@MMM@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
tv87 = 44
rmd$ = 48
pwHL$ = 52
p$ = 80
levels$ = 88
lacunarity$ = 96
H$ = 104
?fBm@Fractal@@SAMVPoint3@@MMM@Z PROC			; Fractal::fBm, COMDAT

; 290  : float Fractal::fBm(Point3 p, float levels, float lacunarity, float H) {

$LN9:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 291  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 292  : 	float pwr = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pwr$[rsp], xmm0

; 293  : 	float pwHL = pow(lacunarity, -H);	

	movss	xmm0, DWORD PTR H$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR lacunarity$[rsp]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 294  : 
; 295  : 	for (int i=0; i<(int)levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@fBm
$LN2@fBm:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@fBm:
	cvttss2si eax, DWORD PTR levels$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@fBm

; 296  : 		sum += Perlin::noise(p.x, p.y, p.z) * pwr;

	mov	rax, QWORD PTR p$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?noise@Perlin@@SAMMMM@Z			; Perlin::noise
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 297  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 298  : 		p *= lacunarity;

	movss	xmm1, DWORD PTR lacunarity$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 299  : 	}

	jmp	SHORT $LN2@fBm
$LN3@fBm:

; 300  : 
; 301  : 	float rmd = levels - FASTFLOOR(levels);

	movss	xmm0, DWORD PTR levels$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN7@fBm
	cvttss2si eax, DWORD PTR levels$[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN8@fBm
$LN7@fBm:
	cvttss2si eax, DWORD PTR levels$[rsp]
	mov	DWORD PTR tv87[rsp], eax
$LN8@fBm:
	cvtsi2ss xmm0, DWORD PTR tv87[rsp]
	movss	xmm1, DWORD PTR levels$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 302  : 	if (rmd!=0.f) sum += rmd * Perlin::noise(p.x, p.y, p.z) * pwr;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@fBm
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?noise@Perlin@@SAMMMM@Z			; Perlin::noise
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fBm:

; 303  : 
; 304  : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 305  : }

	add	rsp, 72					; 00000048H
	ret	0
?fBm@Fractal@@SAMVPoint3@@MMM@Z ENDP			; Fractal::fBm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
signal$ = 32
weight$ = 36
sum$ = 40
i$1 = 44
pwr$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
d$ = 136
np$ = 144
?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC ; Fractal::ridgedMultiFractal, COMDAT

; 262  : float Fractal::ridgedMultiFractal(Point3 p, float d, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 263  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 264  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 265  : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 266  : 
; 267  : 	float signal, weight;	
; 268  : 
; 269  : 	signal = np.offset - fabs(Noise::noise(p, d, np));

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+48]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR signal$[rsp], xmm0

; 270  : 	signal *= signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 271  : 	sum = signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR sum$[rsp], xmm0

; 272  : 	weight = 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0

; 273  : 
; 274  : 	for(int i=1; i<(int)np.levels; i++ ) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@ridgedMult
$LN2@ridgedMult:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ridgedMult:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@ridgedMult

; 275  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 276  : 		d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 277  : 		weight = signal * np.gain;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR [rax+52]
	movss	DWORD PTR weight$[rsp], xmm0

; 278  : 		if (weight>1.0) weight=1.0; else if (weight<0.0) weight=0.0;

	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN5@ridgedMult
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0
	jmp	SHORT $LN6@ridgedMult
$LN5@ridgedMult:
	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jae	SHORT $LN7@ridgedMult
	xorps	xmm0, xmm0
	movss	DWORD PTR weight$[rsp], xmm0
$LN7@ridgedMult:
$LN6@ridgedMult:

; 279  : 		signal = np.offset - fabs(Noise::noise(p, d, np));

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+48]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR signal$[rsp], xmm0

; 280  : 		signal *= signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 281  : 		signal *= weight;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR weight$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 282  : 		sum += signal * pwr;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 283  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 284  : 	}

	jmp	$LN2@ridgedMult
$LN3@ridgedMult:

; 285  : 	
; 286  : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 287  : }

	add	rsp, 120				; 00000078H
	ret	0
?ridgedMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP ; Fractal::ridgedMultiFractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
weight$ = 36
pwr$ = 40
i$1 = 44
pwHL$ = 48
signal$ = 52
tv161 = 56
rmd$ = 60
$T2 = 64
$T3 = 72
$T4 = 80
$T5 = 88
$T6 = 104
$T7 = 120
p$ = 160
d$ = 168
np$ = 176
?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC ; Fractal::hybridMultiFractal, COMDAT

; 234  : float Fractal::hybridMultiFractal(Point3 p, float d, NoiseParams& np) {

$LN10:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H

; 235  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 236  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 237  : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 238  : 
; 239  : 	float signal, weight, rmd;	
; 240  : 
; 241  : 	sum = Noise::noise(p, d, np) + np.offset;

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	DWORD PTR sum$[rsp], xmm0

; 242  : 	weight = np.gain * sum;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+52]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	DWORD PTR weight$[rsp], xmm0

; 243  : 	p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 244  : 	d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 245  : 
; 246  : 	for (int i=1; (weight>0.001) && (i<(int)np.levels); i++) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@hybridMult
$LN2@hybridMult:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@hybridMult:
	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	jbe	$LN3@hybridMult
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@hybridMult

; 247  : 		if (weight>1.0)  weight=1.0;

	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN5@hybridMult
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0
$LN5@hybridMult:

; 248  : 		signal = (Noise::noise(p, d, np) + np.offset) * pwr;

	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 249  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 250  : 		sum += weight * signal;

	movss	xmm0, DWORD PTR weight$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 251  : 		weight *= np.gain * signal;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+52]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	xmm1, DWORD PTR weight$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR weight$[rsp], xmm0

; 252  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 253  : 		d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 254  : 	}

	jmp	$LN2@hybridMult
$LN3@hybridMult:

; 255  : 
; 256  : 	rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN8@hybridMult
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv161[rsp], eax
	jmp	SHORT $LN9@hybridMult
$LN8@hybridMult:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv161[rsp], eax
$LN9@hybridMult:
	cvtsi2ss xmm0, DWORD PTR tv161[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 257  : 	if (rmd!=0.f) sum += rmd * (Noise::noise(p, d, np) + np.offset) * pwr;	

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN6@hybridMult
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN6@hybridMult:

; 258  : 													
; 259  : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 260  : }

	add	rsp, 152				; 00000098H
	ret	0
?hybridMultiFractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP ; Fractal::hybridMultiFractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
pwHL$ = 44
tv151 = 48
rmd$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 80
$T6 = 96
$T7 = 112
p$ = 144
d$ = 152
np$ = 160
?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC ; Fractal::heteroTerrain, COMDAT

; 212  : float Fractal::heteroTerrain(Point3 p, float d, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 213  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 214  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 215  : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 216  : 
; 217  : 	sum = Noise::noise(p, np) + np.offset;

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	DWORD PTR sum$[rsp], xmm0

; 218  : 	p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 219  : 	d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 220  : 
; 221  : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@heteroTerr
$LN2@heteroTerr:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@heteroTerr:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@heteroTerr

; 222  : 		sum += (Noise::noise(p, d, np) + np.offset) * pwr * sum;

	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 223  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 224  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 225  : 		d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 226  : 	}

	jmp	$LN2@heteroTerr
$LN3@heteroTerr:

; 227  : 
; 228  : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@heteroTerr
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv151[rsp], eax
	jmp	SHORT $LN8@heteroTerr
$LN7@heteroTerr:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv151[rsp], eax
$LN8@heteroTerr:
	cvtsi2ss xmm0, DWORD PTR tv151[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 229  : 	if (rmd!=0.f) sum += rmd * (Noise::noise(p, d, np) + np.offset) * pwr * sum;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@heteroTerr
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@heteroTerr:

; 230  : 
; 231  : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 232  : }

	add	rsp, 136				; 00000088H
	ret	0
?heteroTerrain@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP ; Fractal::heteroTerrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
tv134 = 44
rmd$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
d$ = 136
np$ = 144
?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC	; Fractal::fBmTurb, COMDAT

; 194  : float Fractal::fBmTurb(Point3 p, float d, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 195  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 196  : 	float pwr = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pwr$[rsp], xmm0

; 197  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 198  : 
; 199  : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@fBmTurb
$LN2@fBmTurb:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@fBmTurb:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@fBmTurb

; 200  : 		sum += fabs(Noise::noise(p, d, np)) * pwr;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 201  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 202  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 203  : 		d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 204  : 	}

	jmp	$LN2@fBmTurb
$LN3@fBmTurb:

; 205  : 
; 206  : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@fBmTurb
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv134[rsp], eax
	jmp	SHORT $LN8@fBmTurb
$LN7@fBmTurb:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv134[rsp], eax
$LN8@fBmTurb:
	cvtsi2ss xmm0, DWORD PTR tv134[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 207  : 	if (rmd!=0.f) sum += rmd * fabs(Noise::noise(p, d, np)) * pwr;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@fBmTurb
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fBmTurb:

; 208  : 
; 209  : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 210  : }

	add	rsp, 120				; 00000078H
	ret	0
?fBmTurb@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP	; Fractal::fBmTurb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
tv132 = 44
rmd$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
d$ = 136
np$ = 144
?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC	; Fractal::fBm, COMDAT

; 176  : float Fractal::fBm(Point3 p, float d, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 177  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 178  : 	float pwr = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pwr$[rsp], xmm0

; 179  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 180  : 
; 181  : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@fBm
$LN2@fBm:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@fBm:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@fBm

; 182  : 		sum += Noise::noise(p, d, np) * pwr;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 183  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 184  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 185  : 		d *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR d$[rsp], xmm0

; 186  : 	}

	jmp	$LN2@fBm
$LN3@fBm:

; 187  : 
; 188  : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@fBm
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN8@fBm
$LN7@fBm:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv132[rsp], eax
$LN8@fBm:
	cvtsi2ss xmm0, DWORD PTR tv132[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 189  : 	if (rmd!=0.f) sum += rmd * Noise::noise(p, d, np) * pwr;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@fBm
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR d$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fBm:

; 190  : 
; 191  : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 192  : }

	add	rsp, 120				; 00000078H
	ret	0
?fBm@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP	; Fractal::fBm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
f$ = 32
l$ = 36
sum$ = 40
tv70 = 44
tv88 = 48
$T1 = 56
$T2 = 64
$T3 = 72
$T4 = 88
p$ = 128
d$ = 136
np$ = 144
?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC ; Fractal::turbulence, COMDAT

; 164  : float Fractal::turbulence(Point3 p, float d, NoiseParams& np) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 165  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 166  : 	float l,f = 1.0f;	

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR f$[rsp], xmm0

; 167  : 	for (l = np.levels; l >= 1.0f; l-=1.0f) {

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR l$[rsp], xmm0
	jmp	SHORT $LN4@turbulence
$LN2@turbulence:
	movss	xmm0, DWORD PTR l$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR l$[rsp], xmm0
$LN4@turbulence:
	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN3@turbulence

; 168  : 		sum += fabs(Noise::noise(p*f, d*f, np))/f;

	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T1[rsp], rax
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR tv70[rsp]
	movaps	xmm1, xmm0
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 169  : 		f *= 2.0f;

	movss	xmm0, DWORD PTR f$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR f$[rsp], xmm0

; 170  : 	}

	jmp	$LN2@turbulence
$LN3@turbulence:

; 171  : 	if (l>0.0f)

	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@turbulence

; 172  : 		sum += l*fabs(Noise::noise(p*f, d*f, np))/f;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR tv88[rsp], xmm0
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	movss	xmm1, DWORD PTR l$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@turbulence:

; 173  : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 174  : }

	add	rsp, 120				; 00000078H
	ret	0
?turbulence@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP ; Fractal::turbulence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z
_TEXT	SEGMENT
f$ = 32
l$ = 36
sum$ = 40
tv69 = 44
tv85 = 48
$T1 = 56
$T2 = 64
$T3 = 72
$T4 = 88
p$ = 128
d$ = 136
np$ = 144
?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z PROC	; Fractal::fractal, COMDAT

; 152  : float Fractal::fractal(Point3 p, float d, NoiseParams& np) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 153  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 154  : 	float l, f = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR f$[rsp], xmm0

; 155  : 	for (l = np.levels; l >= 1.0f; l-=1.0f) {				

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR l$[rsp], xmm0
	jmp	SHORT $LN4@fractal
$LN2@fractal:
	movss	xmm0, DWORD PTR l$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR l$[rsp], xmm0
$LN4@fractal:
	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN3@fractal

; 156  : 		sum += Noise::noise(p*f, d*f, np)/f;

	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T1[rsp], rax
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR tv69[rsp], xmm0
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm1, xmm0
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 157  : 		f *= 2.0f;

	movss	xmm0, DWORD PTR f$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR f$[rsp], xmm0

; 158  : 	}	

	jmp	$LN2@fractal
$LN3@fractal:

; 159  : 	if (l>0.0f)				

	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@fractal

; 160  : 		sum += l*Noise::noise(p*f, d*f, np)/f;				

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR tv85[rsp], xmm0
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	r8, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR tv85[rsp]
	movaps	xmm1, xmm0
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@MAEAVNoiseParams@@@Z ; Noise::noise
	movss	xmm1, DWORD PTR l$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fractal:

; 161  : 	return 0.5f*(sum+1.0f);

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 162  : }

	add	rsp, 120				; 00000078H
	ret	0
?fractal@Fractal@@SAMVPoint3@@MAEAVNoiseParams@@@Z ENDP	; Fractal::fractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
signal$ = 32
weight$ = 36
sum$ = 40
i$1 = 44
pwr$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
np$ = 136
?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC ; Fractal::ridgedMultiFractal, COMDAT

; 124  : float Fractal::ridgedMultiFractal(Point3 p, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 125  : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 126  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 127  : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 128  : 
; 129  : 	float signal, weight;	
; 130  : 
; 131  : 	signal = np.offset - fabs(Noise::noise(p, np));

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+48]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR signal$[rsp], xmm0

; 132  : 	signal *= signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 133  : 	sum = signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR sum$[rsp], xmm0

; 134  : 	weight = 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0

; 135  : 
; 136  : 	for(int i=1; i<(int)np.levels; i++ ) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@ridgedMult
$LN2@ridgedMult:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ridgedMult:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@ridgedMult

; 137  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 138  : 		weight = signal * np.gain;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR [rax+52]
	movss	DWORD PTR weight$[rsp], xmm0

; 139  : 		if (weight>1.0) weight=1.0; else if (weight<0.0) weight=0.0;

	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN5@ridgedMult
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0
	jmp	SHORT $LN6@ridgedMult
$LN5@ridgedMult:
	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jae	SHORT $LN7@ridgedMult
	xorps	xmm0, xmm0
	movss	DWORD PTR weight$[rsp], xmm0
$LN7@ridgedMult:
$LN6@ridgedMult:

; 140  : 		signal = np.offset - fabs(Noise::noise(p, np));

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+48]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR signal$[rsp], xmm0

; 141  : 		signal *= signal;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 142  : 		signal *= weight;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR weight$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 143  : 		sum += signal * pwr;

	movss	xmm0, DWORD PTR signal$[rsp]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 144  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 145  : 	}

	jmp	$LN2@ridgedMult
$LN3@ridgedMult:

; 146  : 	
; 147  : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 148  : }

	add	rsp, 120				; 00000078H
	ret	0
?ridgedMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP ; Fractal::ridgedMultiFractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
weight$ = 36
pwr$ = 40
i$1 = 44
pwHL$ = 48
signal$ = 52
tv155 = 56
rmd$ = 60
$T2 = 64
$T3 = 72
$T4 = 80
$T5 = 88
$T6 = 104
$T7 = 120
p$ = 160
np$ = 168
?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC ; Fractal::hybridMultiFractal, COMDAT

; 98   : float Fractal::hybridMultiFractal(Point3 p, NoiseParams& np) {

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H

; 99   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 100  : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 101  : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 102  : 
; 103  : 	float signal, weight, rmd;	
; 104  : 
; 105  : 	sum = Noise::noise(p, np) + np.offset;

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	DWORD PTR sum$[rsp], xmm0

; 106  : 	weight = np.gain * sum;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+52]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	DWORD PTR weight$[rsp], xmm0

; 107  : 	p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 108  : 
; 109  : 	for (int i=1; (weight>0.001) && (i<(int)np.levels); i++) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@hybridMult
$LN2@hybridMult:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@hybridMult:
	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	jbe	$LN3@hybridMult
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@hybridMult

; 110  : 		if (weight>1.0)  weight=1.0;

	cvtss2sd xmm0, DWORD PTR weight$[rsp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN5@hybridMult
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR weight$[rsp], xmm0
$LN5@hybridMult:

; 111  : 		signal = (Noise::noise(p, np) + np.offset) * pwr;

	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	DWORD PTR signal$[rsp], xmm0

; 112  : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 113  : 		sum += weight * signal;

	movss	xmm0, DWORD PTR weight$[rsp]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 114  : 		weight *= np.gain * signal;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+52]
	mulss	xmm0, DWORD PTR signal$[rsp]
	movss	xmm1, DWORD PTR weight$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR weight$[rsp], xmm0

; 115  : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 116  : 	}

	jmp	$LN2@hybridMult
$LN3@hybridMult:

; 117  : 
; 118  : 	rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN8@hybridMult
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv155[rsp], eax
	jmp	SHORT $LN9@hybridMult
$LN8@hybridMult:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv155[rsp], eax
$LN9@hybridMult:
	cvtsi2ss xmm0, DWORD PTR tv155[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 119  : 	if (rmd!=0.f) sum += rmd * (Noise::noise(p, np) + np.offset) * pwr;	

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN6@hybridMult
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN6@hybridMult:

; 120  : 													
; 121  : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 122  : }

	add	rsp, 152				; 00000098H
	ret	0
?hybridMultiFractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP ; Fractal::hybridMultiFractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
pwHL$ = 44
tv146 = 48
rmd$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 80
$T6 = 96
$T7 = 112
p$ = 144
np$ = 152
?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC ; Fractal::heteroTerrain, COMDAT

; 78   : float Fractal::heteroTerrain(Point3 p, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 79   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 80   : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 81   : 	float pwr = pwHL;

	movss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 82   : 
; 83   : 	sum = Noise::noise(p, np) + np.offset;

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	DWORD PTR sum$[rsp], xmm0

; 84   : 	p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 85   : 
; 86   : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@heteroTerr
$LN2@heteroTerr:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@heteroTerr:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@heteroTerr

; 87   : 		sum += (Noise::noise(p, np) + np.offset) * pwr * sum;

	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	mulss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 88   : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 89   : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 90   : 	}

	jmp	$LN2@heteroTerr
$LN3@heteroTerr:

; 91   : 
; 92   : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@heteroTerr
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv146[rsp], eax
	jmp	SHORT $LN8@heteroTerr
$LN7@heteroTerr:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv146[rsp], eax
$LN8@heteroTerr:
	cvtsi2ss xmm0, DWORD PTR tv146[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 93   : 	if (rmd!=0.f) sum += rmd * (Noise::noise(p, np) + np.offset) * pwr * sum;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@heteroTerr
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mov	rax, QWORD PTR np$[rsp]
	addss	xmm0, DWORD PTR [rax+48]
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR sum$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@heteroTerr:

; 94   : 
; 95   : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 96   : }

	add	rsp, 136				; 00000088H
	ret	0
?heteroTerrain@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP ; Fractal::heteroTerrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
tv131 = 44
rmd$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
np$ = 136
?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC	; Fractal::fBmTurb, COMDAT

; 61   : float Fractal::fBmTurb(Point3 p, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 62   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 63   : 	float pwr = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pwr$[rsp], xmm0

; 64   : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 65   : 
; 66   : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@fBmTurb
$LN2@fBmTurb:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@fBmTurb:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@fBmTurb

; 67   : 		sum += fabs(Noise::noise(p, np)) * pwr;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 68   : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 69   : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 70   : 	}

	jmp	$LN2@fBmTurb
$LN3@fBmTurb:

; 71   : 
; 72   : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@fBmTurb
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN8@fBmTurb
$LN7@fBmTurb:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv131[rsp], eax
$LN8@fBmTurb:
	cvtsi2ss xmm0, DWORD PTR tv131[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 73   : 	if (rmd!=0.f) sum += rmd * fabs(Noise::noise(p, np)) * pwr;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@fBmTurb
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fBmTurb:

; 74   : 
; 75   : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 76   : }

	add	rsp, 120				; 00000078H
	ret	0
?fBmTurb@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP	; Fractal::fBmTurb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
sum$ = 32
pwr$ = 36
i$1 = 40
tv129 = 44
rmd$ = 48
pwHL$ = 52
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 88
p$ = 128
np$ = 136
?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC	; Fractal::fBm, COMDAT

; 44   : float Fractal::fBm(Point3 p, NoiseParams& np) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 45   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 46   : 	float pwr = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pwr$[rsp], xmm0

; 47   : 	float pwHL = pow(np.lacunarity, -np.H);	

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+44]
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR pwHL$[rsp], xmm0

; 48   : 
; 49   : 	for (int i=0; i<(int)np.levels; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@fBm
$LN2@fBm:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@fBm:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@fBm

; 50   : 		sum += Noise::noise(p, np) * pwr;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 51   : 		pwr *= pwHL;

	movss	xmm0, DWORD PTR pwr$[rsp]
	mulss	xmm0, DWORD PTR pwHL$[rsp]
	movss	DWORD PTR pwr$[rsp], xmm0

; 52   : 		p *= np.lacunarity;

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_??XPoint3@@QEAAAEAV0@M@Z

; 53   : 	}

	jmp	$LN2@fBm
$LN3@fBm:

; 54   : 
; 55   : 	float rmd = np.levels - FASTFLOOR(np.levels);

	mov	rax, QWORD PTR np$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+36]
	jbe	SHORT $LN7@fBm
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	dec	eax
	mov	DWORD PTR tv129[rsp], eax
	jmp	SHORT $LN8@fBm
$LN7@fBm:
	mov	rax, QWORD PTR np$[rsp]
	cvttss2si eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv129[rsp], eax
$LN8@fBm:
	cvtsi2ss xmm0, DWORD PTR tv129[rsp]
	mov	rax, QWORD PTR np$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rmd$[rsp], xmm0

; 56   : 	if (rmd!=0.f) sum += rmd * Noise::noise(p, np) * pwr;

	movss	xmm0, DWORD PTR rmd$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	je	SHORT $LN5@fBm
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	movss	xmm1, DWORD PTR rmd$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR pwr$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fBm:

; 57   : 
; 58   : 	return (sum+1.f)*.5f;

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000

; 59   : }

	add	rsp, 120				; 00000078H
	ret	0
?fBm@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP	; Fractal::fBm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
f$ = 32
l$ = 36
sum$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 80
p$ = 112
np$ = 120
?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC ; Fractal::turbulence, COMDAT

; 32   : float Fractal::turbulence(Point3 p, NoiseParams& np) {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 33   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 34   : 	float l,f = 1.0f;	

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR f$[rsp], xmm0

; 35   : 	for (l = np.levels; l >= 1.0f; l-=1.0f) {

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR l$[rsp], xmm0
	jmp	SHORT $LN4@turbulence
$LN2@turbulence:
	movss	xmm0, DWORD PTR l$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR l$[rsp], xmm0
$LN4@turbulence:
	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@turbulence

; 36   : 		sum += fabs(Noise::noise(p*f, np))/f;

	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T1[rsp], rax
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 37   : 		f *= 2.0f;

	movss	xmm0, DWORD PTR f$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR f$[rsp], xmm0

; 38   : 	}

	jmp	$LN2@turbulence
$LN3@turbulence:

; 39   : 	if (l>0.0f)

	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@turbulence

; 40   : 		sum += l*fabs(Noise::noise(p*f, np))/f;

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	call	?fabs@@YAMM@Z				; fabs
	movss	xmm1, DWORD PTR l$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@turbulence:

; 41   : 	return sum;

	movss	xmm0, DWORD PTR sum$[rsp]

; 42   : }

	add	rsp, 104				; 00000068H
	ret	0
?turbulence@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP ; Fractal::turbulence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z
_TEXT	SEGMENT
f$ = 32
l$ = 36
sum$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 80
p$ = 112
np$ = 120
?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z PROC	; Fractal::fractal, COMDAT

; 20   : float Fractal::fractal(Point3 p, NoiseParams& np) {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 21   : 	float sum = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR sum$[rsp], xmm0

; 22   : 	float l, f = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR f$[rsp], xmm0

; 23   : 	for (l = np.levels; l >= 1.0f; l-=1.0f) {				

	mov	rax, QWORD PTR np$[rsp]
	movss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR l$[rsp], xmm0
	jmp	SHORT $LN4@fractal
$LN2@fractal:
	movss	xmm0, DWORD PTR l$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR l$[rsp], xmm0
$LN4@fractal:
	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@fractal

; 24   : 		sum += Noise::noise(p*f, np)/f;

	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T1[rsp], rax
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0

; 25   : 		f *= 2.0f;

	movss	xmm0, DWORD PTR f$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR f$[rsp], xmm0

; 26   : 	}	

	jmp	SHORT $LN2@fractal
$LN3@fractal:

; 27   : 	if (l>0.0f)				

	movss	xmm0, DWORD PTR l$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@fractal

; 28   : 		sum += l*Noise::noise(p*f, np)/f;				

	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR $T2[rsp], rax
	movss	xmm2, DWORD PTR f$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdx, QWORD PTR np$[rsp]
	mov	rcx, rax
	call	?noise@Noise@@SAMVPoint3@@AEAVNoiseParams@@@Z ; Noise::noise
	movss	xmm1, DWORD PTR l$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR sum$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum$[rsp], xmm0
$LN5@fractal:

; 29   : 	return 0.5f*(sum+1.0f);

	movss	xmm0, DWORD PTR sum$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 30   : }

	add	rsp, 104				; 00000068H
	ret	0
?fractal@Fractal@@SAMVPoint3@@AEAVNoiseParams@@@Z ENDP	; Fractal::fractal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\triobj.h
;	COMDAT ??__EkTriObjNormalXTCID@@YAXXZ
text$di	SEGMENT
??__EkTriObjNormalXTCID@@YAXXZ PROC			; `dynamic initializer for 'kTriObjNormalXTCID'', COMDAT

; 289  : const Class_ID kTriObjNormalXTCID = Class_ID(0x730a33d7, 0x27246c55);

	sub	rsp, 40					; 00000028H
	mov	r8d, 656698453				; 27246c55H
	mov	edx, 1930048471				; 730a33d7H
	lea	rcx, OFFSET FLAT:?kTriObjNormalXTCID@@3VClass_ID@@B
	call	??0Class_ID@@QEAA@KK@Z			; Class_ID::Class_ID
	add	rsp, 40					; 00000028H
	ret	0
??__EkTriObjNormalXTCID@@YAXXZ ENDP			; `dynamic initializer for 'kTriObjNormalXTCID''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 32   : 		static AssetId kInvalidId;

	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A
	call	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ; MaxSDK::AssetManagement::AssetId::AssetId
	add	rsp, 40					; 00000028H
	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 24
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	lea	rax, OFFSET FLAT:GUID_NULL
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\point3.h
;	COMDAT ??D@YA?AVPoint3@@AEBV0@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
a$ = 72
f$ = 80
??D@YA?AVPoint3@@AEBV0@M@Z PROC				; operator*, COMDAT

; 326  : __forceinline Point3 operator*(const Point3& a, float f) {

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 327  :    return(Point3(a.x*f, a.y*f, a.z*f));

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR f$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  :    }

	add	rsp, 56					; 00000038H
	ret	0
??D@YA?AVPoint3@@AEBV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?pow@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 32
_Xx$ = 64
_Yx$ = 72
?pow@@YAMMM@Z PROC					; pow, COMDAT

; 250  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T1[rsp], -2

; 251  : 	return (_CSTD powf(_Xx, _Yx));

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_powf
	npad	1

; 252  : 	}

	add	rsp, 56					; 00000038H
	ret	0
?pow@@YAMMM@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
$T1 = 32
_Xx$ = 64
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 122  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T1[rsp], -2

; 123  : 	return (_CSTD fabsf(_Xx));

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	fabsf
	npad	1

; 124  : 	}

	add	rsp, 56					; 00000038H
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR aa$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR bb$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\math.h
;	COMDAT fabsf
_TEXT	SEGMENT
_X$ = 48
fabsf	PROC						; COMDAT

; 670  :     {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 671  :         return (float)fabs(_X);

	cvtss2sd xmm0, DWORD PTR _X$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0

; 672  :     }

	add	rsp, 40					; 00000028H
	ret	0
fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\fractal.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 56					; 00000038H
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
