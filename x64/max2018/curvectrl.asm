; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
CONST	SEGMENT
$SG178724 DB	'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, ' ', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'v', 00H
	DB	'e', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??0Class_ID@@QEAA@KK@Z				; Class_ID::Class_ID
PUBLIC	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ	; MaxSDK::AssetManagement::AssetId::AssetId
PUBLIC	??0BitArray@@QEAA@H@Z				; BitArray::BitArray
PUBLIC	??1BitArray@@QEAA@XZ				; BitArray::~BitArray
PUBLIC	?SetAll@BitArray@@QEAAXXZ			; BitArray::SetAll
PUBLIC	?UseLocalBits@BitArray@@AEBA_NXZ		; BitArray::UseLocalBits
PUBLIC	?UseLocalBits@BitArray@@AEBA_NH@Z		; BitArray::UseLocalBits
PUBLIC	?BitMask@BitArray@@AEBA_KH@Z			; BitArray::BitMask
PUBLIC	?BitArrayAllocated@BitArray@@AEAAXXZ		; BitArray::BitArrayAllocated
PUBLIC	?BitArrayDeallocated@BitArray@@AEAAXXZ		; BitArray::BitArrayDeallocated
PUBLIC	?__autoclassinit2@BitArray@@QEAAX_K@Z		; BitArray::__autoclassinit2
PUBLIC	??4CurvePoint@@QEAAAEAV0@AEBV0@@Z		; CurvePoint::operator=
PUBLIC	?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z ; CurveCtrl::update
PUBLIC	?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z	; CurveCtrl::disable
PUBLIC	?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z		; CurveCtrl::init
PUBLIC	__real@3f800000
PUBLIC	__real@43000000
PUBLIC	__real@43800000
EXTRN	__imp_?CreateBitArrayImpl@BitArray@@AEAAXH@Z:PROC
EXTRN	__imp_?SetAllImpl@BitArray@@AEAAXXZ:PROC
EXTRN	__imp_?FreeBitsImpl@BitArray@@AEAAXXZ:PROC
EXTRN	__imp_??0Interval@@QEAA@HH@Z:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
?kTriObjNormalXTCID@@3VClass_ID@@B DQ 01H DUP (?)	; kTriObjNormalXTCID
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
	DD	imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ+21
	DD	imagerel $unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0BitArray@@QEAA@H@Z DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$??0BitArray@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1BitArray@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+66
	DD	imagerel $unwind$??1BitArray@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetAll@BitArray@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+73
	DD	imagerel $unwind$?SetAll@BitArray@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UseLocalBits@BitArray@@AEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$?UseLocalBits@BitArray@@AEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UseLocalBits@BitArray@@AEBA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$?UseLocalBits@BitArray@@AEBA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BitMask@BitArray@@AEBA_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$?BitMask@BitArray@@AEBA_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@BitArray@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?__autoclassinit2@BitArray@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkTriObjNormalXTCID@@YAXXZ DD imagerel ??__EkTriObjNormalXTCID@@YAXXZ
	DD	imagerel ??__EkTriObjNormalXTCID@@YAXXZ+32
	DD	imagerel $unwind$??__EkTriObjNormalXTCID@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z DD imagerel $LN4
	DD	imagerel $LN4+317
	DD	imagerel $unwind$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA DD imagerel ?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA
	DD	imagerel ?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z DD imagerel $LN3
	DD	imagerel $LN3+846
	DD	imagerel $unwind$?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z DD 021e19H
	DD	017010cH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z DD imagerel ?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
	DD	0ffffffffH
	DD	imagerel ?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z+122
	DD	00H
	DD	imagerel ?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z+289
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z DD 012b19H
	DD	08213H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
	DD	03aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkTriObjNormalXTCID@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@BitArray@@QEAAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BitMask@BitArray@@AEBA_KH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UseLocalBits@BitArray@@AEBA_NH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UseLocalBits@BitArray@@AEBA_NXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetAll@BitArray@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1BitArray@@QEAA@XZ DD imagerel ??1BitArray@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1BitArray@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1BitArray@@QEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1BitArray@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1BitArray@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0BitArray@@QEAA@H@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD 020701H
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?kTriObjNormalXTCID$initializer$@@3P6AXXZEA DQ FLAT:??__EkTriObjNormalXTCID@@YAXXZ ; kTriObjNormalXTCID$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\curvectrl.cpp
;	COMDAT ?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z
_TEXT	SEGMENT
flags$ = 48
pCurve$ = 56
t$ = 64
tv199 = 72
tv197 = 80
$T1 = 88
$T2 = 96
$T3 = 104
pt$ = 136
__$ArrayPad$ = 168
curve$ = 192
?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z PROC		; CurveCtrl::init, COMDAT

; 41   : void CurveCtrl::init(ICurveCtl *curve) {	

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 42   : 	curve->SetTitle(L"Function value curve");

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, OFFSET FLAT:$SG178724
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1472]

; 43   : 
; 44   : 	// UI
; 45   : 	DWORD flags = CC_NONE;				

	mov	DWORD PTR flags$[rsp], 0

; 46   : 	flags |= CC_DRAWBG;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 1
	mov	DWORD PTR flags$[rsp], eax

; 47   : 	flags |= CC_DRAWGRID;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 2
	mov	DWORD PTR flags$[rsp], eax

; 48   : 	flags |= CC_DRAWUTOOLBAR;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 4
	mov	DWORD PTR flags$[rsp], eax

; 49   : 	flags |= 0; //CC_DRAWLTOOLBAR;

	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR flags$[rsp], eax

; 50   : 	flags |= CC_SHOWRESET;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 8
	mov	DWORD PTR flags$[rsp], eax

; 51   : 	flags |= 0; //CC_DRAWSCROLLBARS;

	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR flags$[rsp], eax

; 52   : 	flags |= 0; //CC_AUTOSCROLL;

	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR flags$[rsp], eax

; 53   : 	flags |= CC_DRAWRULER;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 7
	mov	DWORD PTR flags$[rsp], eax

; 54   : 	flags |= 0; //CC_ASPOPUP;

	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR flags$[rsp], eax

; 55   : 	flags |= CC_CONSTRAIN_Y;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 9
	mov	DWORD PTR flags$[rsp], eax

; 56   : 	flags |= CC_HIDE_DISABLED_CURVES;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 10
	mov	DWORD PTR flags$[rsp], eax

; 57   : 
; 58   : 	// RC Menu
; 59   : 	flags |= CC_RCMENU_MOVE_XY;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 11
	mov	DWORD PTR flags$[rsp], eax

; 60   : 	flags |= CC_RCMENU_MOVE_X;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 12
	mov	DWORD PTR flags$[rsp], eax

; 61   : 	flags |= CC_RCMENU_MOVE_Y;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 13
	mov	DWORD PTR flags$[rsp], eax

; 62   : 	flags |= CC_RCMENU_SCALE;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 14
	mov	DWORD PTR flags$[rsp], eax

; 63   : 	flags |= CC_RCMENU_INSERT_CORNER;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 15
	mov	DWORD PTR flags$[rsp], eax

; 64   : 	flags |= CC_RCMENU_INSERT_BEZIER;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 16
	mov	DWORD PTR flags$[rsp], eax

; 65   : 	flags |= CC_RCMENU_DELETE;

	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 17
	mov	DWORD PTR flags$[rsp], eax

; 66   : 	
; 67   : 	curve->SetCCFlags(flags);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, DWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1504]

; 68   : 
; 69   : 	// Range	
; 70   : 	curve->SetXRange(0.0f,1.0f);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 1
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1392]

; 71   : 	curve->SetYRange(0.0f,1.0f);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1400]

; 72   : 
; 73   : 	// Setup curve			
; 74   : 	curve->SetNumCurves(1, TRUE);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1368]

; 75   : 	ICurve *pCurve = curve->GetControlCurve(0);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	edx, edx
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1480]
	mov	QWORD PTR pCurve$[rsp], rax

; 76   : 	pCurve->SetNumPts(2);

	mov	rax, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 2
	mov	rcx, QWORD PTR pCurve$[rsp]
	call	QWORD PTR [rax+1416]

; 77   : 	pCurve->SetPenProperty( RGB(0,0,0));

	mov	rax, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR pCurve$[rsp]
	call	QWORD PTR [rax+1344]

; 78   : 	pCurve->SetDisabledPenProperty( RGB(128,128,128));

	mov	rax, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 8421504				; 00808080H
	mov	rcx, QWORD PTR pCurve$[rsp]
	call	QWORD PTR [rax+1360]

; 79   : 	//pCurve->SetLookupTableSize(1000);
; 80   : 	TimeValue t = 0;

	mov	DWORD PTR t$[rsp], 0

; 81   : 	
; 82   : 	// Point 0
; 83   : 	CurvePoint pt = pCurve->GetPoint(t,0);

	mov	r8d, 2147483647				; 7fffffffH
	mov	edx, -2147483648			; ffffffff80000000H
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_??0Interval@@QEAA@HH@Z
	mov	rcx, QWORD PTR pCurve$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv199[rsp], rcx
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, DWORD PTR t$[rsp]
	lea	rdx, QWORD PTR pt$[rsp]
	mov	rcx, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR tv199[rsp]
	call	QWORD PTR [rax+1448]

; 84   : 	pt.p.y = 0.f;			

	xorps	xmm0, xmm0
	movss	DWORD PTR pt$[rsp+4], xmm0

; 85   : 	pCurve->SetPoint(t,0,&pt);

	mov	rax, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR pt$[rsp]
	xor	r8d, r8d
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR pCurve$[rsp]
	call	QWORD PTR [rax+1440]

; 86   : 	
; 87   : 	// Point 1
; 88   : 	pt = pCurve->GetPoint(t,1);

	mov	r8d, 2147483647				; 7fffffffH
	mov	edx, -2147483648			; ffffffff80000000H
	lea	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Interval@@QEAA@HH@Z
	mov	rcx, QWORD PTR pCurve$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv197[rsp], rcx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1
	mov	r8d, DWORD PTR t$[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR tv197[rsp]
	call	QWORD PTR [rax+1448]
	mov	rdx, rax
	lea	rcx, QWORD PTR pt$[rsp]
	call	??4CurvePoint@@QEAAAEAV0@AEBV0@@Z	; CurvePoint::operator=

; 89   : 	pt.p.y = 1.f;			

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pt$[rsp+4], xmm0

; 90   : 	pCurve->SetPoint(t,1,&pt);	

	mov	rax, QWORD PTR pCurve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR pt$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR pCurve$[rsp]
	call	QWORD PTR [rax+1440]

; 91   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	ret	0
?init@CurveCtrl@@SAXPEAVICurveCtl@@@Z ENDP		; CurveCtrl::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\curvectrl.cpp
;	COMDAT ?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z
_TEXT	SEGMENT
curve$ = 48
?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z PROC		; CurveCtrl::disable, COMDAT

; 36   : void CurveCtrl::disable(ICurveCtl *curve) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 37   : 	curve->SetActive(FALSE);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	edx, edx
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1352]

; 38   : 	curve->EnableDraw(FALSE);	

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	edx, edx
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1584]

; 39   : }

	add	rsp, 40					; 00000028H
	ret	0
?disable@CurveCtrl@@SAXPEAVICurveCtl@@@Z ENDP		; CurveCtrl::disable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\curvectrl.cpp
;	COMDAT ?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z
_TEXT	SEGMENT
$T1 = 32
ba$ = 40
__$ArrayPad$ = 56
curve$ = 80
hParent$ = 88
resMaker$ = 96
?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z PROC ; CurveCtrl::update, COMDAT

; 20   : void CurveCtrl::update(ICurveCtl *curve, HWND hParent, ReferenceMaker *resMaker) {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR $T1[rsp], -2
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 21   : 	curve->SetCustomParentWnd(hParent);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR hParent$[rsp]
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1520]

; 22   : #if MAX_RELEASE >= 18900
; 23   : 	curve->RegisterResourceMaker(static_cast<ReferenceTarget*>(resMaker));

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR resMaker$[rsp]
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1424]

; 24   : #else
; 25   : 	curve->RegisterResourceMaker(static_cast<ReferenceMaker*>(resMaker));
; 26   : #endif
; 27   : 	BitArray ba = BitArray(1);			

	mov	edx, 16
	lea	rcx, QWORD PTR ba$[rsp]
	call	?__autoclassinit2@BitArray@@QEAAX_K@Z
	mov	edx, 1
	lea	rcx, QWORD PTR ba$[rsp]
	call	??0BitArray@@QEAA@H@Z			; BitArray::BitArray
	npad	1

; 28   : 	ba.SetAll();

	lea	rcx, QWORD PTR ba$[rsp]
	call	?SetAll@BitArray@@QEAAXXZ		; BitArray::SetAll

; 29   : 	curve->SetDisplayMode(ba);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR ba$[rsp]
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1488]

; 30   : 	curve->EnableDraw(TRUE);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 1
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1584]

; 31   : 	curve->SetActive(TRUE);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 1
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1352]

; 32   : 	curve->SetZoomValues(256.f, 128.f);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	movss	xmm2, DWORD PTR __real@43000000
	movss	xmm1, DWORD PTR __real@43800000
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1440]

; 33   : 	curve->SetScrollValues(-16, -45);

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r8d, -45				; ffffffffffffffd3H
	mov	edx, -16
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1456]

; 34   : 	curve->Redraw();

	mov	rax, QWORD PTR curve$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR curve$[rsp]
	call	QWORD PTR [rax+1552]
	npad	1

; 35   : }

	lea	rcx, QWORD PTR ba$[rsp]
	call	??1BitArray@@QEAA@XZ			; BitArray::~BitArray
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z ENDP ; CurveCtrl::update
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
ba$ = 40
__$ArrayPad$ = 56
curve$ = 80
hParent$ = 88
resMaker$ = 96
?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA PROC ; `CurveCtrl::update'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ba$[rbp]
	call	??1BitArray@@QEAA@XZ			; BitArray::~BitArray
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA ENDP ; `CurveCtrl::update'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
ba$ = 40
__$ArrayPad$ = 56
curve$ = 80
hParent$ = 88
resMaker$ = 96
?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA PROC ; `CurveCtrl::update'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ba$[rbp]
	call	??1BitArray@@QEAA@XZ			; BitArray::~BitArray
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??update@CurveCtrl@@SAXPEAVICurveCtl@@PEAUHWND__@@PEAVReferenceMaker@@@Z@4HA ENDP ; `CurveCtrl::update'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\icurvctl.h
;	COMDAT ??4CurvePoint@@QEAAAEAV0@AEBV0@@Z
_TEXT	SEGMENT
this$ = 8
rhs$ = 16
??4CurvePoint@@QEAAAEAV0@AEBV0@@Z PROC			; CurvePoint::operator=, COMDAT

; 416  : 	{

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 417  : 		p		= rhs.p;

	mov	rax, QWORD PTR rhs$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 418  : 		in		= rhs.in;

	mov	rax, QWORD PTR rhs$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 419  : 		out		= rhs.out;

	mov	rax, QWORD PTR rhs$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 420  : 		flags	= rhs.flags;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rax+24], ecx

; 421  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 422  : 	}

	ret	0
??4CurvePoint@@QEAAAEAV0@AEBV0@@Z ENDP			; CurvePoint::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\triobj.h
;	COMDAT ??__EkTriObjNormalXTCID@@YAXXZ
text$di	SEGMENT
??__EkTriObjNormalXTCID@@YAXXZ PROC			; `dynamic initializer for 'kTriObjNormalXTCID'', COMDAT

; 289  : const Class_ID kTriObjNormalXTCID = Class_ID(0x730a33d7, 0x27246c55);

	sub	rsp, 40					; 00000028H
	mov	r8d, 656698453				; 27246c55H
	mov	edx, 1930048471				; 730a33d7H
	lea	rcx, OFFSET FLAT:?kTriObjNormalXTCID@@3VClass_ID@@B
	call	??0Class_ID@@QEAA@KK@Z			; Class_ID::Class_ID
	add	rsp, 40					; 00000028H
	ret	0
??__EkTriObjNormalXTCID@@YAXXZ ENDP			; `dynamic initializer for 'kTriObjNormalXTCID''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit2@BitArray@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 16
classSize$ = 24
?__autoclassinit2@BitArray@@QEAAX_K@Z PROC		; BitArray::__autoclassinit2, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rdi, QWORD PTR this$[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR classSize$[rsp]
	rep stosb
	pop	rdi
	ret	0
?__autoclassinit2@BitArray@@QEAAX_K@Z ENDP		; BitArray::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?BitArrayDeallocated@BitArray@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?BitArrayDeallocated@BitArray@@AEAAXXZ PROC		; BitArray::BitArrayDeallocated, COMDAT

; 553  : 	inline void BitArrayDeallocated() {}

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?BitArrayDeallocated@BitArray@@AEAAXXZ ENDP		; BitArray::BitArrayDeallocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?BitArrayAllocated@BitArray@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?BitArrayAllocated@BitArray@@AEAAXXZ PROC		; BitArray::BitArrayAllocated, COMDAT

; 552  : 	inline void BitArrayAllocated() {}

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?BitArrayAllocated@BitArray@@AEAAXXZ ENDP		; BitArray::BitArrayAllocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?BitMask@BitArray@@AEBA_KH@Z
_TEXT	SEGMENT
tv66 = 0
tv69 = 8
this$ = 32
i$ = 40
?BitMask@BitArray@@AEBA_KH@Z PROC			; BitArray::BitMask, COMDAT

; 516  : 	{ return (i < kMAX_LOCALBITS) ? (DWORD_PTR(1) << i) : DWORD_PTR(0); }

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@BitMask
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, 1
	mov	QWORD PTR tv69[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv69[rsp]
	shl	rax, cl
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@BitMask
$LN3@BitMask:
	mov	QWORD PTR tv66[rsp], 0
$LN4@BitMask:
	mov	rax, QWORD PTR tv66[rsp]
	add	rsp, 24
	ret	0
?BitMask@BitArray@@AEBA_KH@Z ENDP			; BitArray::BitMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?UseLocalBits@BitArray@@AEBA_NH@Z
_TEXT	SEGMENT
tv65 = 0
this$ = 32
n$ = 40
?UseLocalBits@BitArray@@AEBA_NH@Z PROC			; BitArray::UseLocalBits, COMDAT

; 511  : 	inline bool UseLocalBits(int n) const { return n <= kMAX_LOCALBITS; }

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	DWORD PTR n$[rsp], 64			; 00000040H
	jg	SHORT $LN3@UseLocalBi
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@UseLocalBi
$LN3@UseLocalBi:
	mov	DWORD PTR tv65[rsp], 0
$LN4@UseLocalBi:
	movzx	eax, BYTE PTR tv65[rsp]
	add	rsp, 24
	ret	0
?UseLocalBits@BitArray@@AEBA_NH@Z ENDP			; BitArray::UseLocalBits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?UseLocalBits@BitArray@@AEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?UseLocalBits@BitArray@@AEBA_NXZ PROC			; BitArray::UseLocalBits, COMDAT

; 510  : 	inline bool UseLocalBits() const { return numBits <= kMAX_LOCALBITS; }

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+8], 64			; 00000040H
	jg	SHORT $LN3@UseLocalBi
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@UseLocalBi
$LN3@UseLocalBi:
	mov	DWORD PTR tv66[rsp], 0
$LN4@UseLocalBi:
	movzx	eax, BYTE PTR tv66[rsp]
	add	rsp, 24
	ret	0
?UseLocalBits@BitArray@@AEBA_NXZ ENDP			; BitArray::UseLocalBits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ?SetAll@BitArray@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?SetAll@BitArray@@QEAAXXZ PROC				; BitArray::SetAll, COMDAT

; 276  : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 277  : 		if (UseLocalBits()) 

	mov	rcx, QWORD PTR this$[rsp]
	call	?UseLocalBits@BitArray@@AEBA_NXZ	; BitArray::UseLocalBits
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@SetAll

; 278  : 		{
; 279  : 			localBits = BitMask(numBits) - 1;

	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	call	?BitMask@BitArray@@AEBA_KH@Z		; BitArray::BitMask
	dec	rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 280  : 		}
; 281  : 		else

	jmp	SHORT $LN3@SetAll
$LN2@SetAll:

; 282  : 		{
; 283  : 			SetAllImpl();

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?SetAllImpl@BitArray@@AEAAXXZ
$LN3@SetAll:

; 284  : 		}
; 285  : 	}

	add	rsp, 40					; 00000028H
	ret	0
?SetAll@BitArray@@QEAAXXZ ENDP				; BitArray::SetAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ??1BitArray@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1BitArray@@QEAA@XZ PROC				; BitArray::~BitArray, COMDAT

; 245  : 	{ 

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR $T1[rsp], -2

; 246  : 		if( !UseLocalBits() ) 

	mov	rcx, QWORD PTR this$[rsp]
	call	?UseLocalBits@BitArray@@AEBA_NXZ	; BitArray::UseLocalBits
	npad	1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@BitArray

; 247  : 			FreeBitsImpl(); 

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?FreeBitsImpl@BitArray@@AEAAXXZ
	npad	1

; 248  : 		else 

	jmp	SHORT $LN3@BitArray
$LN2@BitArray:

; 249  : 			BitArrayDeallocated();

	mov	rcx, QWORD PTR this$[rsp]
	call	?BitArrayDeallocated@BitArray@@AEAAXXZ	; BitArray::BitArrayDeallocated
	npad	1
$LN3@BitArray:

; 250  : 	}

	add	rsp, 56					; 00000038H
	ret	0
??1BitArray@@QEAA@XZ ENDP				; BitArray::~BitArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\bitarray.h
;	COMDAT ??0BitArray@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
??0BitArray@@QEAA@H@Z PROC				; BitArray::BitArray, COMDAT

; 206  : 	inline BitArray(int n)

$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 207  : 	{
; 208  : 		DbgAssert( n >= 0 );
; 209  : 		if (n < 0)

	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN2@BitArray

; 210  : 		{
; 211  : 			n = 0;

	mov	DWORD PTR n$[rsp], 0
$LN2@BitArray:

; 212  : 		}
; 213  : 		if( UseLocalBits(n) )

	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?UseLocalBits@BitArray@@AEBA_NH@Z	; BitArray::UseLocalBits
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@BitArray

; 214  : 		{
; 215  : 			numBits     = n;

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 216  : 			localBits   = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 217  : 
; 218  : 			BitArrayAllocated();

	mov	rcx, QWORD PTR this$[rsp]
	call	?BitArrayAllocated@BitArray@@AEAAXXZ	; BitArray::BitArrayAllocated

; 219  : 		}
; 220  : 		else

	jmp	SHORT $LN4@BitArray
$LN3@BitArray:

; 221  : 		{
; 222  : 			CreateBitArrayImpl(n);

	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?CreateBitArrayImpl@BitArray@@AEAAXH@Z
$LN4@BitArray:

; 223  : 		}
; 224  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	ret	0
??0BitArray@@QEAA@H@Z ENDP				; BitArray::BitArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 32   : 		static AssetId kInvalidId;

	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A
	call	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ; MaxSDK::AssetManagement::AssetId::AssetId
	add	rsp, 40					; 00000028H
	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 24
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	lea	rax, OFFSET FLAT:GUID_NULL
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR aa$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR bb$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\curvectrl.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

; 92   : }

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\curvectrl.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

; 92   : }

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 56					; 00000038H
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
