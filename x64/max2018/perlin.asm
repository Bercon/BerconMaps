; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?perm@@3PAEA DB	097H					; perm
	DB	0a0H
	DB	089H
	DB	05bH
	DB	05aH
	DB	0fH
	DB	083H
	DB	0dH
	DB	0c9H
	DB	05fH
	DB	060H
	DB	035H
	DB	0c2H
	DB	0e9H
	DB	07H
	DB	0e1H
	DB	08cH
	DB	024H
	DB	067H
	DB	01eH
	DB	045H
	DB	08eH
	DB	08H
	DB	063H
	DB	025H
	DB	0f0H
	DB	015H
	DB	0aH
	DB	017H
	DB	0beH
	DB	06H
	DB	094H
	DB	0f7H
	DB	078H
	DB	0eaH
	DB	04bH
	DB	00H
	DB	01aH
	DB	0c5H
	DB	03eH
	DB	05eH
	DB	0fcH
	DB	0dbH
	DB	0cbH
	DB	075H
	DB	023H
	DB	0bH
	DB	020H
	DB	039H
	DB	0b1H
	DB	021H
	DB	058H
	DB	0edH
	DB	095H
	DB	038H
	DB	057H
	DB	0aeH
	DB	014H
	DB	07dH
	DB	088H
	DB	0abH
	DB	0a8H
	DB	044H
	DB	0afH
	DB	04aH
	DB	0a5H
	DB	047H
	DB	086H
	DB	08bH
	DB	030H
	DB	01bH
	DB	0a6H
	DB	04dH
	DB	092H
	DB	09eH
	DB	0e7H
	DB	053H
	DB	06fH
	DB	0e5H
	DB	07aH
	DB	03cH
	DB	0d3H
	DB	085H
	DB	0e6H
	DB	0dcH
	DB	069H
	DB	05cH
	DB	029H
	DB	037H
	DB	02eH
	DB	0f5H
	DB	028H
	DB	0f4H
	DB	066H
	DB	08fH
	DB	036H
	DB	041H
	DB	019H
	DB	03fH
	DB	0a1H
	DB	01H
	DB	0d8H
	DB	050H
	DB	049H
	DB	0d1H
	DB	04cH
	DB	084H
	DB	0bbH
	DB	0d0H
	DB	059H
	DB	012H
	DB	0a9H
	DB	0c8H
	DB	0c4H
	DB	087H
	DB	082H
	DB	074H
	DB	0bcH
	DB	09fH
	DB	056H
	DB	0a4H
	DB	064H
	DB	06dH
	DB	0c6H
	DB	0adH
	DB	0baH
	DB	03H
	DB	040H
	DB	034H
	DB	0d9H
	DB	0e2H
	DB	0faH
	DB	07cH
	DB	07bH
	DB	05H
	DB	0caH
	DB	026H
	DB	093H
	DB	076H
	DB	07eH
	DB	0ffH
	DB	052H
	DB	055H
	DB	0d4H
	DB	0cfH
	DB	0ceH
	DB	03bH
	DB	0e3H
	DB	02fH
	DB	010H
	DB	03aH
	DB	011H
	DB	0b6H
	DB	0bdH
	DB	01cH
	DB	02aH
	DB	0dfH
	DB	0b7H
	DB	0aaH
	DB	0d5H
	DB	077H
	DB	0f8H
	DB	098H
	DB	02H
	DB	02cH
	DB	09aH
	DB	0a3H
	DB	046H
	DB	0ddH
	DB	099H
	DB	065H
	DB	09bH
	DB	0a7H
	DB	02bH
	DB	0acH
	DB	09H
	DB	081H
	DB	016H
	DB	027H
	DB	0fdH
	DB	013H
	DB	062H
	DB	06cH
	DB	06eH
	DB	04fH
	DB	071H
	DB	0e0H
	DB	0e8H
	DB	0b2H
	DB	0b9H
	DB	070H
	DB	068H
	DB	0daH
	DB	0f6H
	DB	061H
	DB	0e4H
	DB	0fbH
	DB	022H
	DB	0f2H
	DB	0c1H
	DB	0eeH
	DB	0d2H
	DB	090H
	DB	0cH
	DB	0bfH
	DB	0b3H
	DB	0a2H
	DB	0f1H
	DB	051H
	DB	033H
	DB	091H
	DB	0ebH
	DB	0f9H
	DB	0eH
	DB	0efH
	DB	06bH
	DB	031H
	DB	0c0H
	DB	0d6H
	DB	01fH
	DB	0b5H
	DB	0c7H
	DB	06aH
	DB	09dH
	DB	0b8H
	DB	054H
	DB	0ccH
	DB	0b0H
	DB	073H
	DB	079H
	DB	032H
	DB	02dH
	DB	07fH
	DB	04H
	DB	096H
	DB	0feH
	DB	08aH
	DB	0ecH
	DB	0cdH
	DB	05dH
	DB	0deH
	DB	072H
	DB	043H
	DB	01dH
	DB	018H
	DB	048H
	DB	0f3H
	DB	08dH
	DB	080H
	DB	0c3H
	DB	04eH
	DB	042H
	DB	0d7H
	DB	03dH
	DB	09cH
	DB	0b4H
	DB	097H
	DB	0a0H
	DB	089H
	DB	05bH
	DB	05aH
	DB	0fH
	DB	083H
	DB	0dH
	DB	0c9H
	DB	05fH
	DB	060H
	DB	035H
	DB	0c2H
	DB	0e9H
	DB	07H
	DB	0e1H
	DB	08cH
	DB	024H
	DB	067H
	DB	01eH
	DB	045H
	DB	08eH
	DB	08H
	DB	063H
	DB	025H
	DB	0f0H
	DB	015H
	DB	0aH
	DB	017H
	DB	0beH
	DB	06H
	DB	094H
	DB	0f7H
	DB	078H
	DB	0eaH
	DB	04bH
	DB	00H
	DB	01aH
	DB	0c5H
	DB	03eH
	DB	05eH
	DB	0fcH
	DB	0dbH
	DB	0cbH
	DB	075H
	DB	023H
	DB	0bH
	DB	020H
	DB	039H
	DB	0b1H
	DB	021H
	DB	058H
	DB	0edH
	DB	095H
	DB	038H
	DB	057H
	DB	0aeH
	DB	014H
	DB	07dH
	DB	088H
	DB	0abH
	DB	0a8H
	DB	044H
	DB	0afH
	DB	04aH
	DB	0a5H
	DB	047H
	DB	086H
	DB	08bH
	DB	030H
	DB	01bH
	DB	0a6H
	DB	04dH
	DB	092H
	DB	09eH
	DB	0e7H
	DB	053H
	DB	06fH
	DB	0e5H
	DB	07aH
	DB	03cH
	DB	0d3H
	DB	085H
	DB	0e6H
	DB	0dcH
	DB	069H
	DB	05cH
	DB	029H
	DB	037H
	DB	02eH
	DB	0f5H
	DB	028H
	DB	0f4H
	DB	066H
	DB	08fH
	DB	036H
	DB	041H
	DB	019H
	DB	03fH
	DB	0a1H
	DB	01H
	DB	0d8H
	DB	050H
	DB	049H
	DB	0d1H
	DB	04cH
	DB	084H
	DB	0bbH
	DB	0d0H
	DB	059H
	DB	012H
	DB	0a9H
	DB	0c8H
	DB	0c4H
	DB	087H
	DB	082H
	DB	074H
	DB	0bcH
	DB	09fH
	DB	056H
	DB	0a4H
	DB	064H
	DB	06dH
	DB	0c6H
	DB	0adH
	DB	0baH
	DB	03H
	DB	040H
	DB	034H
	DB	0d9H
	DB	0e2H
	DB	0faH
	DB	07cH
	DB	07bH
	DB	05H
	DB	0caH
	DB	026H
	DB	093H
	DB	076H
	DB	07eH
	DB	0ffH
	DB	052H
	DB	055H
	DB	0d4H
	DB	0cfH
	DB	0ceH
	DB	03bH
	DB	0e3H
	DB	02fH
	DB	010H
	DB	03aH
	DB	011H
	DB	0b6H
	DB	0bdH
	DB	01cH
	DB	02aH
	DB	0dfH
	DB	0b7H
	DB	0aaH
	DB	0d5H
	DB	077H
	DB	0f8H
	DB	098H
	DB	02H
	DB	02cH
	DB	09aH
	DB	0a3H
	DB	046H
	DB	0ddH
	DB	099H
	DB	065H
	DB	09bH
	DB	0a7H
	DB	02bH
	DB	0acH
	DB	09H
	DB	081H
	DB	016H
	DB	027H
	DB	0fdH
	DB	013H
	DB	062H
	DB	06cH
	DB	06eH
	DB	04fH
	DB	071H
	DB	0e0H
	DB	0e8H
	DB	0b2H
	DB	0b9H
	DB	070H
	DB	068H
	DB	0daH
	DB	0f6H
	DB	061H
	DB	0e4H
	DB	0fbH
	DB	022H
	DB	0f2H
	DB	0c1H
	DB	0eeH
	DB	0d2H
	DB	090H
	DB	0cH
	DB	0bfH
	DB	0b3H
	DB	0a2H
	DB	0f1H
	DB	051H
	DB	033H
	DB	091H
	DB	0ebH
	DB	0f9H
	DB	0eH
	DB	0efH
	DB	06bH
	DB	031H
	DB	0c0H
	DB	0d6H
	DB	01fH
	DB	0b5H
	DB	0c7H
	DB	06aH
	DB	09dH
	DB	0b8H
	DB	054H
	DB	0ccH
	DB	0b0H
	DB	073H
	DB	079H
	DB	032H
	DB	02dH
	DB	07fH
	DB	04H
	DB	096H
	DB	0feH
	DB	08aH
	DB	0ecH
	DB	0cdH
	DB	05dH
	DB	0deH
	DB	072H
	DB	043H
	DB	01dH
	DB	018H
	DB	048H
	DB	0f3H
	DB	08dH
	DB	080H
	DB	0c3H
	DB	04eH
	DB	042H
	DB	0d7H
	DB	03dH
	DB	09cH
	DB	0b4H
?simplex@@3PAY03EA DB 00H				; simplex
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	02H
	DB	00H
	DB	03H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	03H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	02H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	01H
	DB	00H
_DATA	ENDS
PUBLIC	?noise@Perlin@@SAMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMMM@Z				; Perlin::noise
PUBLIC	?noise@Perlin@@SAMMMMM@Z			; Perlin::noise
PUBLIC	?snoise@Perlin@@SAMM@Z				; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMM@Z				; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMMM@Z			; Perlin::snoise
PUBLIC	?snoise@Perlin@@SAMMMMM@Z			; Perlin::snoise
PUBLIC	?fnoise2D@Perlin@@SAMMMM@Z			; Perlin::fnoise2D
PUBLIC	?fnoise3D@Perlin@@SAMMMMM@Z			; Perlin::fnoise3D
PUBLIC	?fnoise4D@Perlin@@SAMMMMMM@Z			; Perlin::fnoise4D
PUBLIC	?fsnoise2D@Perlin@@SAMMMM@Z			; Perlin::fsnoise2D
PUBLIC	?fsnoise3D@Perlin@@SAMMMMM@Z			; Perlin::fsnoise3D
PUBLIC	?fsnoise4D@Perlin@@SAMMMMMM@Z			; Perlin::fsnoise4D
PUBLIC	?grad@Perlin@@CAMHM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMMM@Z				; Perlin::grad
PUBLIC	?grad@Perlin@@CAMHMMMM@Z			; Perlin::grad
PUBLIC	?point@Perlin@@CAMMH@Z				; Perlin::point
PUBLIC	?point@Perlin@@CAMMMHH@Z			; Perlin::point
PUBLIC	?point@Perlin@@CAMMMMHHH@Z			; Perlin::point
PUBLIC	?point@Perlin@@CAMMMMMHHHH@Z			; Perlin::point
PUBLIC	?lerp2@@YAMMMM@Z				; lerp2
PUBLIC	__real@00000000
PUBLIC	__real@3e0d8369
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e408312
PUBLIC	__real@3e58658c
PUBLIC	__real@3e8d8369
PUBLIC	__real@3e9e377a
PUBLIC	__real@3eaaaaab
PUBLIC	__real@3ebb67ae
PUBLIC	__real@3eca4588
PUBLIC	__real@3ed4451e
PUBLIC	__real@3ed8658c
PUBLIC	__real@3f000000
PUBLIC	__real@3f01cac1
PUBLIC	__real@3f19999a
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f6f9db2
PUBLIC	__real@3f7ff972
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@40000000
PUBLIC	__real@400ccccd
PUBLIC	__real@40c00000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41d80000
PUBLIC	__real@42000000
PUBLIC	__real@42200000
PUBLIC	__real@bee4f92e
PUBLIC	__real@bf000000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?smooth@@YAMMMM@Z:PROC				; smooth
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+301
	DD	imagerel $unwind$?noise@Perlin@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMM@Z DD imagerel $LN7
	DD	imagerel $LN7+665
	DD	imagerel $unwind$?noise@Perlin@@SAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMMM@Z DD imagerel $LN9
	DD	imagerel $LN9+1421
	DD	imagerel $unwind$?noise@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?noise@Perlin@@SAMMMMM@Z DD imagerel $LN11
	DD	imagerel $LN11+2736
	DD	imagerel $unwind$?noise@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+181
	DD	imagerel $unwind$?snoise@Perlin@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMM@Z DD imagerel $LN9
	DD	imagerel $LN9+682
	DD	imagerel $unwind$?snoise@Perlin@@SAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+1560
	DD	imagerel $unwind$?snoise@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?snoise@Perlin@@SAMMMMM@Z DD imagerel $LN47
	DD	imagerel $LN47+3162
	DD	imagerel $unwind$?snoise@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise2D@Perlin@@SAMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?fnoise2D@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise3D@Perlin@@SAMMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+134
	DD	imagerel $unwind$?fnoise3D@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fnoise4D@Perlin@@SAMMMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+140
	DD	imagerel $unwind$?fnoise4D@Perlin@@SAMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise2D@Perlin@@SAMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?fsnoise2D@Perlin@@SAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise3D@Perlin@@SAMMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+134
	DD	imagerel $unwind$?fsnoise3D@Perlin@@SAMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fsnoise4D@Perlin@@SAMMMMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+140
	DD	imagerel $unwind$?fsnoise4D@Perlin@@SAMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHM@Z DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$?grad@Perlin@@CAMHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHMM@Z DD imagerel $LN11
	DD	imagerel $LN11+230
	DD	imagerel $unwind$?grad@Perlin@@CAMHMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHMMM@Z DD imagerel $LN13
	DD	imagerel $LN13+265
	DD	imagerel $unwind$?grad@Perlin@@CAMHMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grad@Perlin@@CAMHMMMM@Z DD imagerel $LN15
	DD	imagerel $LN15+320
	DD	imagerel $unwind$?grad@Perlin@@CAMHMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMH@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$?point@Perlin@@CAMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMHH@Z DD imagerel $LN4
	DD	imagerel $LN4+205
	DD	imagerel $unwind$?point@Perlin@@CAMMMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMMHHH@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?point@Perlin@@CAMMMMHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?point@Perlin@@CAMMMMMHHHH@Z DD imagerel $LN4
	DD	imagerel $LN4+308
	DD	imagerel $unwind$?point@Perlin@@CAMMMMMHHHH@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bee4f92e
CONST	SEGMENT
__real@bee4f92e DD 0bee4f92er			; -0.447214
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7ff972
CONST	SEGMENT
__real@3f7ff972 DD 03f7ff972r			; 0.9999
CONST	ENDS
;	COMDAT __real@3f6f9db2
CONST	SEGMENT
__real@3f6f9db2 DD 03f6f9db2r			; 0.936
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f01cac1
CONST	SEGMENT
__real@3f01cac1 DD 03f01cac1r			; 0.507
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed8658c
CONST	SEGMENT
__real@3ed8658c DD 03ed8658cr			; 0.42265
CONST	ENDS
;	COMDAT __real@3ed4451e
CONST	SEGMENT
__real@3ed4451e DD 03ed4451er			; 0.41459
CONST	ENDS
;	COMDAT __real@3eca4588
CONST	SEGMENT
__real@3eca4588 DD 03eca4588r			; 0.395062
CONST	ENDS
;	COMDAT __real@3ebb67ae
CONST	SEGMENT
__real@3ebb67ae DD 03ebb67aer			; 0.366025
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
CONST	ENDS
;	COMDAT __real@3e9e377a
CONST	SEGMENT
__real@3e9e377a DD 03e9e377ar			; 0.309017
CONST	ENDS
;	COMDAT __real@3e8d8369
CONST	SEGMENT
__real@3e8d8369 DD 03e8d8369r			; 0.276393
CONST	ENDS
;	COMDAT __real@3e58658c
CONST	SEGMENT
__real@3e58658c DD 03e58658cr			; 0.211325
CONST	ENDS
;	COMDAT __real@3e408312
CONST	SEGMENT
__real@3e408312 DD 03e408312r			; 0.188
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e0d8369
CONST	SEGMENT
__real@3e0d8369 DD 03e0d8369r			; 0.138197
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMMMHHHH@Z DD 011c01H
	DD	0821cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMMHHH@Z DD 011b01H
	DD	0621bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMMHH@Z DD 011a01H
	DD	0621aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?point@Perlin@@CAMMH@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHMMMM@Z DD 011a01H
	DD	0621aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHMMM@Z DD 011a01H
	DD	0421aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHMM@Z DD 011401H
	DD	04214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grad@Perlin@@CAMHM@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise4D@Perlin@@SAMMMMMM@Z DD 011c01H
	DD	0421cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise3D@Perlin@@SAMMMMM@Z DD 011c01H
	DD	0421cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fsnoise2D@Perlin@@SAMMMM@Z DD 011601H
	DD	04216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise4D@Perlin@@SAMMMMMM@Z DD 011c01H
	DD	0421cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise3D@Perlin@@SAMMMMM@Z DD 011c01H
	DD	0421cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fnoise2D@Perlin@@SAMMMM@Z DD 011601H
	DD	04216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMMMM@Z DD 021f01H
	DD	033011fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMMM@Z DD 021901H
	DD	01b0119H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMMM@Z DD 021301H
	DD	0110113H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?snoise@Perlin@@SAMM@Z DD 010a01H
	DD	0820aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMMMM@Z DD 021f01H
	DD	021011fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMMM@Z DD 021901H
	DD	0130119H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMMM@Z DD 011001H
	DD	0c210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?noise@Perlin@@SAMM@Z DD 010a01H
	DD	0820aH
xdata	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?lerp2@@YAMMMM@Z
_TEXT	SEGMENT
t$ = 8
a$ = 16
b$ = 24
?lerp2@@YAMMMM@Z PROC					; lerp2, COMDAT

; 63   : float lerp2(float t, float a,float b) {return a+t*(b-a);}

	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR a$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	ret	0
?lerp2@@YAMMMM@Z ENDP					; lerp2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMMMHHHH@Z
_TEXT	SEGMENT
t$ = 48
tv74 = 52
x$ = 80
y$ = 88
z$ = 96
w$ = 104
i$ = 112
j$ = 120
k$ = 128
l$ = 136
?point@Perlin@@CAMMMMMHHHH@Z PROC			; Perlin::point, COMDAT

; 231  : inline float Perlin::point(float x, float y, float z, float w, int i, int j, int k, int l) {

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 72					; 00000048H

; 232  : 	float t = 0.6f - x*x - y*y - z*z - w*w;

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@3f19999a
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y$[rsp]
	mulss	xmm1, DWORD PTR y$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR z$[rsp]
	mulss	xmm1, DWORD PTR z$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR w$[rsp]
	mulss	xmm1, DWORD PTR w$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR t$[rsp], xmm0

; 233  : 	if(t < 0.0f)

	movss	xmm0, DWORD PTR t$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN2@point

; 234  : 		return 0.0f;	

	xorps	xmm0, xmm0
	jmp	$LN1@point
$LN2@point:

; 235  : 	t *= t;

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR t$[rsp], xmm0

; 236  : 	return t * t * grad(perm[i+perm[j+perm[k+perm[l]]]], x, y, z, w);	

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	movsxd	rax, DWORD PTR l$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR w$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR z$[rsp]
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv74[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
$LN1@point:

; 237  : }

	add	rsp, 72					; 00000048H
	ret	0
?point@Perlin@@CAMMMMMHHHH@Z ENDP			; Perlin::point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMMHHH@Z
_TEXT	SEGMENT
t$ = 32
tv72 = 36
x$ = 64
y$ = 72
z$ = 80
i$ = 88
j$ = 96
k$ = 104
?point@Perlin@@CAMMMMHHH@Z PROC				; Perlin::point, COMDAT

; 223  : inline float Perlin::point(float x, float y, float z, int i, int j, int k) {

$LN4:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H

; 224  : 	float t = 0.6f - x*x - y*y - z*z;

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@3f19999a
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y$[rsp]
	mulss	xmm1, DWORD PTR y$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR z$[rsp]
	mulss	xmm1, DWORD PTR z$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR t$[rsp], xmm0

; 225  : 	if(t < 0.0f) 

	movss	xmm0, DWORD PTR t$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN2@point

; 226  : 		return 0.0f;

	xorps	xmm0, xmm0
	jmp	$LN1@point
$LN2@point:

; 227  : 	t *= t;

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR t$[rsp], xmm0

; 228  : 	return t * t * grad(perm[i+perm[j+perm[k]]], x, y, z);

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm3, DWORD PTR z$[rsp]
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv72[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
$LN1@point:

; 229  : }

	add	rsp, 56					; 00000038H
	ret	0
?point@Perlin@@CAMMMMHHH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMMHH@Z
_TEXT	SEGMENT
t$ = 32
tv70 = 36
x$ = 64
y$ = 72
i$ = 80
j$ = 88
?point@Perlin@@CAMMMHH@Z PROC				; Perlin::point, COMDAT

; 215  : inline float Perlin::point(float x, float y, int i, int j) {

$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H

; 216  :     float t = 0.5f - x*x - y*y;

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y$[rsp]
	mulss	xmm1, DWORD PTR y$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR t$[rsp], xmm0

; 217  :     if(t < 0.0f) 

	movss	xmm0, DWORD PTR t$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN2@point

; 218  : 		return 0.0f;

	xorps	xmm0, xmm0
	jmp	SHORT $LN1@point
$LN2@point:

; 219  :     t *= t;

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR t$[rsp], xmm0

; 220  :     return t * t * grad(perm[i+perm[j]], x, y);

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv70[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
$LN1@point:

; 221  : }

	add	rsp, 56					; 00000038H
	ret	0
?point@Perlin@@CAMMMHH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?point@Perlin@@CAMMH@Z
_TEXT	SEGMENT
t$ = 32
tv67 = 36
x$ = 64
i$ = 72
?point@Perlin@@CAMMH@Z PROC				; Perlin::point, COMDAT

; 209  : inline float Perlin::point(float x, int i) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H

; 210  : 	float t = 1.0f - x*x;

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR t$[rsp], xmm0

; 211  : 	t *= t;

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR t$[rsp], xmm0

; 212  : 	return t * t * grad(perm[i & 255], x);

	movss	xmm0, DWORD PTR t$[rsp]
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	and	eax, 255				; 000000ffH
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv67[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 213  : }

	add	rsp, 56					; 00000038H
	ret	0
?point@Perlin@@CAMMH@Z ENDP				; Perlin::point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMMMM@Z
_TEXT	SEGMENT
h$ = 0
tv66 = 4
tv68 = 8
tv70 = 12
i$ = 16
j$ = 20
k$ = 24
tv74 = 28
tv78 = 32
tv83 = 36
hash$ = 64
x$ = 72
y$ = 80
z$ = 88
w$ = 96
?grad@Perlin@@CAMHMMMM@Z PROC				; Perlin::grad, COMDAT

; 88   : float Perlin::grad(int hash, float x, float y, float z, float w) {

$LN15:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 89   : 	int h = hash & 31;

	mov	eax, DWORD PTR hash$[rsp]
	and	eax, 31
	mov	DWORD PTR h$[rsp], eax

; 90   :     float i = h<24 ? x : y;

	cmp	DWORD PTR h$[rsp], 24
	jge	SHORT $LN3@grad
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@grad
$LN3@grad:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@grad:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR i$[rsp], xmm0

; 91   :     float j = h<16 ? y : z;

	cmp	DWORD PTR h$[rsp], 16
	jge	SHORT $LN5@grad
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
	jmp	SHORT $LN6@grad
$LN5@grad:
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
$LN6@grad:
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR j$[rsp], xmm0

; 92   :     float k = h<8 ? z : w;

	cmp	DWORD PTR h$[rsp], 8
	jge	SHORT $LN7@grad
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	jmp	SHORT $LN8@grad
$LN7@grad:
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
$LN8@grad:
	movss	xmm0, DWORD PTR tv70[rsp]
	movss	DWORD PTR k$[rsp], xmm0

; 93   :     return ((h&1)? -i : i) + ((h&2)? -j : j) + ((h&4)? -k : k);

	mov	eax, DWORD PTR h$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@grad
	movss	xmm0, DWORD PTR i$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv74[rsp], xmm0
	jmp	SHORT $LN10@grad
$LN9@grad:
	movss	xmm0, DWORD PTR i$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
$LN10@grad:
	mov	eax, DWORD PTR h$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN11@grad
	movss	xmm0, DWORD PTR j$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN12@grad
$LN11@grad:
	movss	xmm0, DWORD PTR j$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
$LN12@grad:
	mov	eax, DWORD PTR h$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN13@grad
	movss	xmm0, DWORD PTR k$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN14@grad
$LN13@grad:
	movss	xmm0, DWORD PTR k$[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN14@grad:
	movss	xmm0, DWORD PTR tv74[rsp]
	addss	xmm0, DWORD PTR tv78[rsp]
	addss	xmm0, DWORD PTR tv83[rsp]

; 94   : }

	add	rsp, 56					; 00000038H
	ret	0
?grad@Perlin@@CAMHMMMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMMM@Z
_TEXT	SEGMENT
h$ = 0
tv66 = 4
tv70 = 8
tv71 = 12
i$ = 16
j$ = 20
tv75 = 24
tv79 = 28
hash$ = 48
x$ = 56
y$ = 64
z$ = 72
?grad@Perlin@@CAMHMMM@Z PROC				; Perlin::grad, COMDAT

; 81   : float Perlin::grad(int hash, float x, float y, float z) {

$LN13:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 82   :     int h = hash & 15;

	mov	eax, DWORD PTR hash$[rsp]
	and	eax, 15
	mov	DWORD PTR h$[rsp], eax

; 83   :     float i = h<8 ? x : y;

	cmp	DWORD PTR h$[rsp], 8
	jge	SHORT $LN3@grad
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@grad
$LN3@grad:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@grad:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR i$[rsp], xmm0

; 84   :     float j = h<4 ? y : h==12||h==14 ? x : z;

	cmp	DWORD PTR h$[rsp], 4
	jge	SHORT $LN7@grad
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv71[rsp], xmm0
	jmp	SHORT $LN8@grad
$LN7@grad:
	cmp	DWORD PTR h$[rsp], 12
	je	SHORT $LN5@grad
	cmp	DWORD PTR h$[rsp], 14
	je	SHORT $LN5@grad
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	jmp	SHORT $LN6@grad
$LN5@grad:
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
$LN6@grad:
	movss	xmm0, DWORD PTR tv70[rsp]
	movss	DWORD PTR tv71[rsp], xmm0
$LN8@grad:
	movss	xmm0, DWORD PTR tv71[rsp]
	movss	DWORD PTR j$[rsp], xmm0

; 85   :     return ((h&1) ? -i : i) + ((h&2) ? -j : j);

	mov	eax, DWORD PTR h$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@grad
	movss	xmm0, DWORD PTR i$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv75[rsp], xmm0
	jmp	SHORT $LN10@grad
$LN9@grad:
	movss	xmm0, DWORD PTR i$[rsp]
	movss	DWORD PTR tv75[rsp], xmm0
$LN10@grad:
	mov	eax, DWORD PTR h$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN11@grad
	movss	xmm0, DWORD PTR j$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv79[rsp], xmm0
	jmp	SHORT $LN12@grad
$LN11@grad:
	movss	xmm0, DWORD PTR j$[rsp]
	movss	DWORD PTR tv79[rsp], xmm0
$LN12@grad:
	movss	xmm0, DWORD PTR tv75[rsp]
	addss	xmm0, DWORD PTR tv79[rsp]

; 86   : }

	add	rsp, 40					; 00000028H
	ret	0
?grad@Perlin@@CAMHMMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHMM@Z
_TEXT	SEGMENT
h$ = 0
tv66 = 4
tv68 = 8
i$ = 12
j$ = 16
tv72 = 20
tv77 = 24
hash$ = 48
x$ = 56
y$ = 64
?grad@Perlin@@CAMHMM@Z PROC				; Perlin::grad, COMDAT

; 74   : float Perlin::grad(int hash, float x, float y) {

$LN11:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 75   :     int h = hash & 7;

	mov	eax, DWORD PTR hash$[rsp]
	and	eax, 7
	mov	DWORD PTR h$[rsp], eax

; 76   :     float i = h<4 ? x : y;

	cmp	DWORD PTR h$[rsp], 4
	jge	SHORT $LN3@grad
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@grad
$LN3@grad:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@grad:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR i$[rsp], xmm0

; 77   :     float j = h<4 ? y : x;

	cmp	DWORD PTR h$[rsp], 4
	jge	SHORT $LN5@grad
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
	jmp	SHORT $LN6@grad
$LN5@grad:
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
$LN6@grad:
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR j$[rsp], xmm0

; 78   :     return ((h&1)? -i : i) + ((h&2)? -2.f*j : 2.f*j);

	mov	eax, DWORD PTR h$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@grad
	movss	xmm0, DWORD PTR i$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv72[rsp], xmm0
	jmp	SHORT $LN8@grad
$LN7@grad:
	movss	xmm0, DWORD PTR i$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
$LN8@grad:
	mov	eax, DWORD PTR h$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN9@grad
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR j$[rsp]
	movss	DWORD PTR tv77[rsp], xmm0
	jmp	SHORT $LN10@grad
$LN9@grad:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR j$[rsp]
	movss	DWORD PTR tv77[rsp], xmm0
$LN10@grad:
	movss	xmm0, DWORD PTR tv72[rsp]
	addss	xmm0, DWORD PTR tv77[rsp]

; 79   : }

	add	rsp, 40					; 00000028H
	ret	0
?grad@Perlin@@CAMHMM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?grad@Perlin@@CAMHM@Z
_TEXT	SEGMENT
grad$ = 0
h$ = 4
hash$ = 32
x$ = 40
?grad@Perlin@@CAMHM@Z PROC				; Perlin::grad, COMDAT

; 67   : float Perlin::grad( int hash, float x ) {

$LN4:
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 68   :     int h = hash & 15;

	mov	eax, DWORD PTR hash$[rsp]
	and	eax, 15
	mov	DWORD PTR h$[rsp], eax

; 69   :     float grad = 1.0f + (h & 7);

	mov	eax, DWORD PTR h$[rsp]
	and	eax, 7
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR grad$[rsp], xmm0

; 70   :     if (h&8) grad = -grad;

	mov	eax, DWORD PTR h$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN2@grad
	movss	xmm0, DWORD PTR grad$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR grad$[rsp], xmm0
$LN2@grad:

; 71   :     return ( grad * x );

	movss	xmm0, DWORD PTR grad$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]

; 72   : }

	add	rsp, 24
	ret	0
?grad@Perlin@@CAMHM@Z ENDP				; Perlin::grad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise4D@Perlin@@SAMMMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
w$ = 72
d$ = 80
?fsnoise4D@Perlin@@SAMMMMMM@Z PROC			; Perlin::fsnoise4D, COMDAT

; 431  : float Perlin::fsnoise4D(float x, float y, float z, float w, float d) {

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 432  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fsnoise4D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fsnoise4D
$LN2@fsnoise4D:

; 433  : 	return lerp2(d, snoise(x,y,z,w), 0.f);

	movss	xmm3, DWORD PTR w$[rsp]
	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?snoise@Perlin@@SAMMMMM@Z		; Perlin::snoise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fsnoise4D:

; 434  : }	

	add	rsp, 40					; 00000028H
	ret	0
?fsnoise4D@Perlin@@SAMMMMMM@Z ENDP			; Perlin::fsnoise4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise3D@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
d$ = 72
?fsnoise3D@Perlin@@SAMMMMM@Z PROC			; Perlin::fsnoise3D, COMDAT

; 426  : float Perlin::fsnoise3D(float x, float y, float z, float d) {

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 427  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fsnoise3D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fsnoise3D
$LN2@fsnoise3D:

; 428  : 	return lerp2(d, snoise(x,y,z), 0.f);

	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?snoise@Perlin@@SAMMMM@Z		; Perlin::snoise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fsnoise3D:

; 429  : }

	add	rsp, 40					; 00000028H
	ret	0
?fsnoise3D@Perlin@@SAMMMMM@Z ENDP			; Perlin::fsnoise3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fsnoise2D@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
d$ = 64
?fsnoise2D@Perlin@@SAMMMM@Z PROC			; Perlin::fsnoise2D, COMDAT

; 421  : float Perlin::fsnoise2D(float x, float y, float d) {

$LN4:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 422  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fsnoise2D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fsnoise2D
$LN2@fsnoise2D:

; 423  : 	return lerp2(d, snoise(x,y), 0.f);

	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?snoise@Perlin@@SAMMM@Z			; Perlin::snoise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fsnoise2D:

; 424  : }

	add	rsp, 40					; 00000028H
	ret	0
?fsnoise2D@Perlin@@SAMMMM@Z ENDP			; Perlin::fsnoise2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise4D@Perlin@@SAMMMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
w$ = 72
d$ = 80
?fnoise4D@Perlin@@SAMMMMMM@Z PROC			; Perlin::fnoise4D, COMDAT

; 416  : float Perlin::fnoise4D(float x, float y, float z, float w, float d) {

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 417  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fnoise4D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fnoise4D
$LN2@fnoise4D:

; 418  : 	return lerp2(d, noise(x,y,z,w), 0.f);

	movss	xmm3, DWORD PTR w$[rsp]
	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?noise@Perlin@@SAMMMMM@Z		; Perlin::noise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fnoise4D:

; 419  : }	

	add	rsp, 40					; 00000028H
	ret	0
?fnoise4D@Perlin@@SAMMMMMM@Z ENDP			; Perlin::fnoise4D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise3D@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
d$ = 72
?fnoise3D@Perlin@@SAMMMMM@Z PROC			; Perlin::fnoise3D, COMDAT

; 411  : float Perlin::fnoise3D(float x, float y, float z, float d) {

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 412  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fnoise3D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fnoise3D
$LN2@fnoise3D:

; 413  : 	return lerp2(d, noise(x,y,z), 0.f);

	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?noise@Perlin@@SAMMMM@Z			; Perlin::noise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fnoise3D:

; 414  : }

	add	rsp, 40					; 00000028H
	ret	0
?fnoise3D@Perlin@@SAMMMMM@Z ENDP			; Perlin::fnoise3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?fnoise2D@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
d$ = 64
?fnoise2D@Perlin@@SAMMMM@Z PROC				; Perlin::fnoise2D, COMDAT

; 406  : float Perlin::fnoise2D(float x, float y, float d) {

$LN4:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H

; 407  : 	FILTER(d)

	movss	xmm0, DWORD PTR d$[rsp]
	divss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm2, DWORD PTR __real@400ccccd
	movss	xmm1, DWORD PTR __real@3f99999a
	call	?smooth@@YAMMMM@Z			; smooth
	movss	DWORD PTR d$[rsp], xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7ff972
	jb	SHORT $LN2@fnoise2D
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@fnoise2D
$LN2@fnoise2D:

; 408  : 	return lerp2(d, noise(x,y), 0.f);

	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?noise@Perlin@@SAMMM@Z			; Perlin::noise
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR d$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
$LN1@fnoise2D:

; 409  : }

	add	rsp, 40					; 00000028H
	ret	0
?fnoise2D@Perlin@@SAMMMM@Z ENDP				; Perlin::fnoise2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
c$ = 64
w0$ = 68
z0$ = 72
y0$ = 76
x0$ = 80
ll$ = 84
kk$ = 88
jj$ = 92
ii$ = 96
s$ = 100
t$ = 104
xs$ = 108
ys$ = 112
zs$ = 116
ws$ = 120
i$ = 124
j$ = 128
k$ = 132
l$ = 136
tv76 = 140
tv81 = 144
tv86 = 148
tv91 = 152
tv142 = 156
tv144 = 160
tv146 = 164
tv148 = 168
tv150 = 172
tv152 = 176
tv165 = 180
tv173 = 184
tv181 = 188
tv189 = 192
tv229 = 196
tv237 = 200
tv245 = 204
tv253 = 208
tv261 = 212
tv269 = 216
tv277 = 220
tv285 = 224
l1$ = 228
k1$ = 232
j1$ = 236
i1$ = 240
l2$ = 244
k2$ = 248
j2$ = 252
i2$ = 256
l3$ = 260
k3$ = 264
j3$ = 268
i3$ = 272
X0$ = 276
Y0$ = 280
Z0$ = 284
W0$ = 288
c2$ = 292
c1$ = 296
c3$ = 300
c4$ = 304
c5$ = 308
c6$ = 312
w1$ = 316
z1$ = 320
y1$ = 324
x1$ = 328
tv330 = 332
w2$ = 336
z2$ = 340
y2$ = 344
x2$ = 348
tv352 = 352
w3$ = 356
z3$ = 360
y3$ = 364
x3$ = 368
tv366 = 372
w4$ = 376
z4$ = 380
y4$ = 384
x4$ = 388
tv380 = 392
x$ = 416
y$ = 424
z$ = 432
w$ = 440
?snoise@Perlin@@SAMMMMM@Z PROC				; Perlin::snoise, COMDAT

; 331  : float Perlin::snoise(float x, float y, float z, float w) {

$LN47:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 408				; 00000198H

; 332  :   
; 333  : 	#define F4 0.309016994f // F4 = (Math.sqrt(5.0)-1.0)/4.0
; 334  : 	#define G4 0.138196601f // G4 = (5.0-Math.sqrt(5.0))/20.0
; 335  : 	#define G4a (G4*2.f)
; 336  : 	#define G4b (G4*3.f)
; 337  : 	#define G4c (G4*4.f-1.f)
; 338  : 
; 339  :     float s = (x + y + z + w) * F4;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR z$[rsp]
	addss	xmm0, DWORD PTR w$[rsp]
	mulss	xmm0, DWORD PTR __real@3e9e377a
	movss	DWORD PTR s$[rsp], xmm0

; 340  :     float xs = x + s;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR xs$[rsp], xmm0

; 341  :     float ys = y + s;

	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR ys$[rsp], xmm0

; 342  :     float zs = z + s;

	movss	xmm0, DWORD PTR z$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR zs$[rsp], xmm0

; 343  :     float ws = w + s;

	movss	xmm0, DWORD PTR w$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR ws$[rsp], xmm0

; 344  :     int i = FASTFLOOR(xs);

	movss	xmm0, DWORD PTR xs$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@snoise
	cvttss2si eax, DWORD PTR xs$[rsp]
	dec	eax
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN4@snoise
$LN3@snoise:
	cvttss2si eax, DWORD PTR xs$[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN4@snoise:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR i$[rsp], eax

; 345  :     int j = FASTFLOOR(ys);

	movss	xmm0, DWORD PTR ys$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN5@snoise
	cvttss2si eax, DWORD PTR ys$[rsp]
	dec	eax
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN6@snoise
$LN5@snoise:
	cvttss2si eax, DWORD PTR ys$[rsp]
	mov	DWORD PTR tv81[rsp], eax
$LN6@snoise:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR j$[rsp], eax

; 346  :     int k = FASTFLOOR(zs);

	movss	xmm0, DWORD PTR zs$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN7@snoise
	cvttss2si eax, DWORD PTR zs$[rsp]
	dec	eax
	mov	DWORD PTR tv86[rsp], eax
	jmp	SHORT $LN8@snoise
$LN7@snoise:
	cvttss2si eax, DWORD PTR zs$[rsp]
	mov	DWORD PTR tv86[rsp], eax
$LN8@snoise:
	mov	eax, DWORD PTR tv86[rsp]
	mov	DWORD PTR k$[rsp], eax

; 347  :     int l = FASTFLOOR(ws);

	movss	xmm0, DWORD PTR ws$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN9@snoise
	cvttss2si eax, DWORD PTR ws$[rsp]
	dec	eax
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN10@snoise
$LN9@snoise:
	cvttss2si eax, DWORD PTR ws$[rsp]
	mov	DWORD PTR tv91[rsp], eax
$LN10@snoise:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR l$[rsp], eax

; 348  : 
; 349  :     float t = (i + j + k + l) * G4;

	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR k$[rsp]
	add	eax, DWORD PTR l$[rsp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e0d8369
	movss	DWORD PTR t$[rsp], xmm0

; 350  :     float X0 = i - t; 

	cvtsi2ss xmm0, DWORD PTR i$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR X0$[rsp], xmm0

; 351  :     float Y0 = j - t;

	cvtsi2ss xmm0, DWORD PTR j$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR Y0$[rsp], xmm0

; 352  :     float Z0 = k - t;

	cvtsi2ss xmm0, DWORD PTR k$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR Z0$[rsp], xmm0

; 353  :     float W0 = l - t;

	cvtsi2ss xmm0, DWORD PTR l$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR W0$[rsp], xmm0

; 354  : 
; 355  :     float x0 = x - X0;

	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR X0$[rsp]
	movss	DWORD PTR x0$[rsp], xmm0

; 356  :     float y0 = y - Y0;

	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR Y0$[rsp]
	movss	DWORD PTR y0$[rsp], xmm0

; 357  :     float z0 = z - Z0;

	movss	xmm0, DWORD PTR z$[rsp]
	subss	xmm0, DWORD PTR Z0$[rsp]
	movss	DWORD PTR z0$[rsp], xmm0

; 358  :     float w0 = w - W0;

	movss	xmm0, DWORD PTR w$[rsp]
	subss	xmm0, DWORD PTR W0$[rsp]
	movss	DWORD PTR w0$[rsp], xmm0

; 359  : 
; 360  :     int c1 = (x0 > y0) ? 32 : 0;

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN11@snoise
	mov	DWORD PTR tv142[rsp], 32		; 00000020H
	jmp	SHORT $LN12@snoise
$LN11@snoise:
	mov	DWORD PTR tv142[rsp], 0
$LN12@snoise:
	mov	eax, DWORD PTR tv142[rsp]
	mov	DWORD PTR c1$[rsp], eax

; 361  :     int c2 = (x0 > z0) ? 16 : 0;

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jbe	SHORT $LN13@snoise
	mov	DWORD PTR tv144[rsp], 16
	jmp	SHORT $LN14@snoise
$LN13@snoise:
	mov	DWORD PTR tv144[rsp], 0
$LN14@snoise:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR c2$[rsp], eax

; 362  :     int c3 = (y0 > z0) ? 8 : 0;

	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jbe	SHORT $LN15@snoise
	mov	DWORD PTR tv146[rsp], 8
	jmp	SHORT $LN16@snoise
$LN15@snoise:
	mov	DWORD PTR tv146[rsp], 0
$LN16@snoise:
	mov	eax, DWORD PTR tv146[rsp]
	mov	DWORD PTR c3$[rsp], eax

; 363  :     int c4 = (x0 > w0) ? 4 : 0;

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR w0$[rsp]
	jbe	SHORT $LN17@snoise
	mov	DWORD PTR tv148[rsp], 4
	jmp	SHORT $LN18@snoise
$LN17@snoise:
	mov	DWORD PTR tv148[rsp], 0
$LN18@snoise:
	mov	eax, DWORD PTR tv148[rsp]
	mov	DWORD PTR c4$[rsp], eax

; 364  :     int c5 = (y0 > w0) ? 2 : 0;

	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR w0$[rsp]
	jbe	SHORT $LN19@snoise
	mov	DWORD PTR tv150[rsp], 2
	jmp	SHORT $LN20@snoise
$LN19@snoise:
	mov	DWORD PTR tv150[rsp], 0
$LN20@snoise:
	mov	eax, DWORD PTR tv150[rsp]
	mov	DWORD PTR c5$[rsp], eax

; 365  :     int c6 = (z0 > w0) ? 1 : 0;

	movss	xmm0, DWORD PTR z0$[rsp]
	comiss	xmm0, DWORD PTR w0$[rsp]
	jbe	SHORT $LN21@snoise
	mov	DWORD PTR tv152[rsp], 1
	jmp	SHORT $LN22@snoise
$LN21@snoise:
	mov	DWORD PTR tv152[rsp], 0
$LN22@snoise:
	mov	eax, DWORD PTR tv152[rsp]
	mov	DWORD PTR c6$[rsp], eax

; 366  :     int c = c1 + c2 + c3 + c4 + c5 + c6;

	mov	eax, DWORD PTR c2$[rsp]
	mov	ecx, DWORD PTR c1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR c3$[rsp]
	add	eax, DWORD PTR c4$[rsp]
	add	eax, DWORD PTR c5$[rsp]
	add	eax, DWORD PTR c6$[rsp]
	mov	DWORD PTR c$[rsp], eax

; 367  : 
; 368  :     int i1, j1, k1, l1;
; 369  :     int i2, j2, k2, l2;
; 370  :     int i3, j3, k3, l3;
; 371  : 
; 372  :     i1 = simplex[c][0]>=3 ? 1 : 0; i2 = simplex[c][0]>=2 ? 1 : 0; i3 = simplex[c][0]>=1 ? 1 : 0;

	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 3
	jl	SHORT $LN23@snoise
	mov	DWORD PTR tv165[rsp], 1
	jmp	SHORT $LN24@snoise
$LN23@snoise:
	mov	DWORD PTR tv165[rsp], 0
$LN24@snoise:
	mov	eax, DWORD PTR tv165[rsp]
	mov	DWORD PTR i1$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 2
	jl	SHORT $LN25@snoise
	mov	DWORD PTR tv173[rsp], 1
	jmp	SHORT $LN26@snoise
$LN25@snoise:
	mov	DWORD PTR tv173[rsp], 0
$LN26@snoise:
	mov	eax, DWORD PTR tv173[rsp]
	mov	DWORD PTR i2$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 1
	jl	SHORT $LN27@snoise
	mov	DWORD PTR tv181[rsp], 1
	jmp	SHORT $LN28@snoise
$LN27@snoise:
	mov	DWORD PTR tv181[rsp], 0
$LN28@snoise:
	mov	eax, DWORD PTR tv181[rsp]
	mov	DWORD PTR i3$[rsp], eax

; 373  :     j1 = simplex[c][1]>=3 ? 1 : 0; j2 = simplex[c][1]>=2 ? 1 : 0; j3 = simplex[c][1]>=1 ? 1 : 0;

	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 3
	jl	SHORT $LN29@snoise
	mov	DWORD PTR tv189[rsp], 1
	jmp	SHORT $LN30@snoise
$LN29@snoise:
	mov	DWORD PTR tv189[rsp], 0
$LN30@snoise:
	mov	eax, DWORD PTR tv189[rsp]
	mov	DWORD PTR j1$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 2
	jl	SHORT $LN31@snoise
	mov	DWORD PTR tv229[rsp], 1
	jmp	SHORT $LN32@snoise
$LN31@snoise:
	mov	DWORD PTR tv229[rsp], 0
$LN32@snoise:
	mov	eax, DWORD PTR tv229[rsp]
	mov	DWORD PTR j2$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 1
	jl	SHORT $LN33@snoise
	mov	DWORD PTR tv237[rsp], 1
	jmp	SHORT $LN34@snoise
$LN33@snoise:
	mov	DWORD PTR tv237[rsp], 0
$LN34@snoise:
	mov	eax, DWORD PTR tv237[rsp]
	mov	DWORD PTR j3$[rsp], eax

; 374  :     k1 = simplex[c][2]>=3 ? 1 : 0; k2 = simplex[c][2]>=2 ? 1 : 0; k3 = simplex[c][2]>=1 ? 1 : 0;

	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 3
	jl	SHORT $LN35@snoise
	mov	DWORD PTR tv245[rsp], 1
	jmp	SHORT $LN36@snoise
$LN35@snoise:
	mov	DWORD PTR tv245[rsp], 0
$LN36@snoise:
	mov	eax, DWORD PTR tv245[rsp]
	mov	DWORD PTR k1$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 2
	jl	SHORT $LN37@snoise
	mov	DWORD PTR tv253[rsp], 1
	jmp	SHORT $LN38@snoise
$LN37@snoise:
	mov	DWORD PTR tv253[rsp], 0
$LN38@snoise:
	mov	eax, DWORD PTR tv253[rsp]
	mov	DWORD PTR k2$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 1
	jl	SHORT $LN39@snoise
	mov	DWORD PTR tv261[rsp], 1
	jmp	SHORT $LN40@snoise
$LN39@snoise:
	mov	DWORD PTR tv261[rsp], 0
$LN40@snoise:
	mov	eax, DWORD PTR tv261[rsp]
	mov	DWORD PTR k3$[rsp], eax

; 375  :     l1 = simplex[c][3]>=3 ? 1 : 0; l2 = simplex[c][3]>=2 ? 1 : 0; l3 = simplex[c][3]>=1 ? 1 : 0;

	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 3
	jl	SHORT $LN41@snoise
	mov	DWORD PTR tv269[rsp], 1
	jmp	SHORT $LN42@snoise
$LN41@snoise:
	mov	DWORD PTR tv269[rsp], 0
$LN42@snoise:
	mov	eax, DWORD PTR tv269[rsp]
	mov	DWORD PTR l1$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 2
	jl	SHORT $LN43@snoise
	mov	DWORD PTR tv277[rsp], 1
	jmp	SHORT $LN44@snoise
$LN43@snoise:
	mov	DWORD PTR tv277[rsp], 0
$LN44@snoise:
	mov	eax, DWORD PTR tv277[rsp]
	mov	DWORD PTR l2$[rsp], eax
	movsxd	rax, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:?simplex@@3PAY03EA
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 1
	jl	SHORT $LN45@snoise
	mov	DWORD PTR tv285[rsp], 1
	jmp	SHORT $LN46@snoise
$LN45@snoise:
	mov	DWORD PTR tv285[rsp], 0
$LN46@snoise:
	mov	eax, DWORD PTR tv285[rsp]
	mov	DWORD PTR l3$[rsp], eax

; 376  : 
; 377  : 	float x1 = x0 - i1 + G4,  x2 = x0 - i2 + G4a,  x3 = x0 - i3 + G4b,  x4 = x0 + G4c;

	cvtsi2ss xmm0, DWORD PTR i1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e0d8369
	movss	DWORD PTR x1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR i2$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e8d8369
	movss	DWORD PTR x2$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR i3$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3ed4451e
	movss	DWORD PTR x3$[rsp], xmm0
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR __real@bee4f92e
	movss	DWORD PTR x4$[rsp], xmm0

; 378  :     float y1 = y0 - j1 + G4,  y2 = y0 - j2 + G4a,  y3 = y0 - j3 + G4b,  y4 = y0 + G4c;

	cvtsi2ss xmm0, DWORD PTR j1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e0d8369
	movss	DWORD PTR y1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR j2$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e8d8369
	movss	DWORD PTR y2$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR j3$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3ed4451e
	movss	DWORD PTR y3$[rsp], xmm0
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR __real@bee4f92e
	movss	DWORD PTR y4$[rsp], xmm0

; 379  :     float z1 = z0 - k1 + G4,  z2 = z0 - k2 + G4a,  z3 = z0 - k3 + G4b,  z4 = z0 + G4c;

	cvtsi2ss xmm0, DWORD PTR k1$[rsp]
	movss	xmm1, DWORD PTR z0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e0d8369
	movss	DWORD PTR z1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR k2$[rsp]
	movss	xmm1, DWORD PTR z0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e8d8369
	movss	DWORD PTR z2$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR k3$[rsp]
	movss	xmm1, DWORD PTR z0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3ed4451e
	movss	DWORD PTR z3$[rsp], xmm0
	movss	xmm0, DWORD PTR z0$[rsp]
	addss	xmm0, DWORD PTR __real@bee4f92e
	movss	DWORD PTR z4$[rsp], xmm0

; 380  :     float w1 = w0 - l1 + G4,  w2 = w0 - l2 + G4a,  w3 = w0 - l3 + G4b,  w4 = w0 + G4c;

	cvtsi2ss xmm0, DWORD PTR l1$[rsp]
	movss	xmm1, DWORD PTR w0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e0d8369
	movss	DWORD PTR w1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR l2$[rsp]
	movss	xmm1, DWORD PTR w0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e8d8369
	movss	DWORD PTR w2$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR l3$[rsp]
	movss	xmm1, DWORD PTR w0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3ed4451e
	movss	DWORD PTR w3$[rsp], xmm0
	movss	xmm0, DWORD PTR w0$[rsp]
	addss	xmm0, DWORD PTR __real@bee4f92e
	movss	DWORD PTR w4$[rsp], xmm0

; 381  : 
; 382  :     int ii = i % 256;

	mov	eax, DWORD PTR i$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR ii$[rsp], eax

; 383  :     int jj = j % 256;

	mov	eax, DWORD PTR j$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR jj$[rsp], eax

; 384  :     int kk = k % 256;

	mov	eax, DWORD PTR k$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR kk$[rsp], eax

; 385  :     int ll = l % 256;

	mov	eax, DWORD PTR l$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR ll$[rsp], eax

; 386  : 
; 387  : 	return 27.0f * (point(x0, y0, z0, w0, ii,    jj,    kk,    ll) +

	mov	eax, DWORD PTR ll$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR kk$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR jj$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ii$[rsp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR w0$[rsp]
	movss	xmm2, DWORD PTR z0$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	movss	xmm0, DWORD PTR x0$[rsp]
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	movss	DWORD PTR tv330[rsp], xmm0
	mov	eax, DWORD PTR l1$[rsp]
	mov	ecx, DWORD PTR ll$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR k1$[rsp]
	mov	edx, DWORD PTR kk$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR j1$[rsp]
	mov	r8d, DWORD PTR jj$[rsp]
	add	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR i1$[rsp]
	mov	r9d, DWORD PTR ii$[rsp]
	add	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	movss	xmm3, DWORD PTR w1$[rsp]
	movss	xmm2, DWORD PTR z1$[rsp]
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR x1$[rsp]
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv330[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv352[rsp], xmm0
	mov	eax, DWORD PTR l2$[rsp]
	mov	ecx, DWORD PTR ll$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR k2$[rsp]
	mov	edx, DWORD PTR kk$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR j2$[rsp]
	mov	r8d, DWORD PTR jj$[rsp]
	add	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR i2$[rsp]
	mov	r9d, DWORD PTR ii$[rsp]
	add	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	movss	xmm3, DWORD PTR w2$[rsp]
	movss	xmm2, DWORD PTR z2$[rsp]
	movss	xmm1, DWORD PTR y2$[rsp]
	movss	xmm0, DWORD PTR x2$[rsp]
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv352[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv366[rsp], xmm0
	mov	eax, DWORD PTR l3$[rsp]
	mov	ecx, DWORD PTR ll$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR k3$[rsp]
	mov	edx, DWORD PTR kk$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR j3$[rsp]
	mov	r8d, DWORD PTR jj$[rsp]
	add	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR i3$[rsp]
	mov	r9d, DWORD PTR ii$[rsp]
	add	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	movss	xmm3, DWORD PTR w3$[rsp]
	movss	xmm2, DWORD PTR z3$[rsp]
	movss	xmm1, DWORD PTR y3$[rsp]
	movss	xmm0, DWORD PTR x3$[rsp]
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv366[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv380[rsp], xmm0
	mov	eax, DWORD PTR ll$[rsp]
	inc	eax
	mov	ecx, DWORD PTR kk$[rsp]
	inc	ecx
	mov	edx, DWORD PTR jj$[rsp]
	inc	edx
	mov	r8d, DWORD PTR ii$[rsp]
	inc	r8d
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	movss	xmm3, DWORD PTR w4$[rsp]
	movss	xmm2, DWORD PTR z4$[rsp]
	movss	xmm1, DWORD PTR y4$[rsp]
	movss	xmm0, DWORD PTR x4$[rsp]
	call	?point@Perlin@@CAMMMMMHHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv380[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@41d80000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 388  : 					point(x1, y1, z1, w1, ii+i1, jj+j1, kk+k1, ll+l1) +
; 389  : 					point(x2, y2, z2, w2, ii+i2, jj+j2, kk+k2, ll+l2) +
; 390  : 					point(x3, y3, z3, w3, ii+i3, jj+j3, kk+k3, ll+l3) +
; 391  : 					point(x4, y4, z4, w4, ii+1,  jj+1,  kk+1,  ll+1));
; 392  : }

	add	rsp, 408				; 00000198H
	ret	0
?snoise@Perlin@@SAMMMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
z0$ = 48
y0$ = 52
x0$ = 56
k1$ = 60
j1$ = 64
i1$ = 68
k2$ = 72
j2$ = 76
i2$ = 80
kk$ = 84
jj$ = 88
ii$ = 92
s$ = 96
xs$ = 100
ys$ = 104
zs$ = 108
t$ = 112
i$ = 116
j$ = 120
k$ = 124
tv74 = 128
tv79 = 132
tv84 = 136
X0$ = 140
Y0$ = 144
Z0$ = 148
z1$ = 152
y1$ = 156
x1$ = 160
tv159 = 164
z2$ = 168
y2$ = 172
x2$ = 176
tv208 = 180
z3$ = 184
y3$ = 188
x3$ = 192
tv219 = 196
x$ = 224
y$ = 232
z$ = 240
?snoise@Perlin@@SAMMMM@Z PROC				; Perlin::snoise, COMDAT

; 281  : float Perlin::snoise(float x, float y, float z) {

$LN19:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 216				; 000000d8H

; 282  : 
; 283  : 	#define F3 0.333333333f
; 284  : 	#define G3 0.166666667f
; 285  : 	#define G3a	(2.0f * G3)
; 286  : 	#define G3b (3.0f * G3 - 1.0f)
; 287  : 
; 288  :     float s = (x+y+z)*F3;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR z$[rsp]
	mulss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR s$[rsp], xmm0

; 289  :     float xs = x+s;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR xs$[rsp], xmm0

; 290  :     float ys = y+s;

	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR ys$[rsp], xmm0

; 291  :     float zs = z+s;

	movss	xmm0, DWORD PTR z$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR zs$[rsp], xmm0

; 292  :     int i = FASTFLOOR(xs);

	movss	xmm0, DWORD PTR xs$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN13@snoise
	cvttss2si eax, DWORD PTR xs$[rsp]
	dec	eax
	mov	DWORD PTR tv74[rsp], eax
	jmp	SHORT $LN14@snoise
$LN13@snoise:
	cvttss2si eax, DWORD PTR xs$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN14@snoise:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR i$[rsp], eax

; 293  :     int j = FASTFLOOR(ys);

	movss	xmm0, DWORD PTR ys$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN15@snoise
	cvttss2si eax, DWORD PTR ys$[rsp]
	dec	eax
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN16@snoise
$LN15@snoise:
	cvttss2si eax, DWORD PTR ys$[rsp]
	mov	DWORD PTR tv79[rsp], eax
$LN16@snoise:
	mov	eax, DWORD PTR tv79[rsp]
	mov	DWORD PTR j$[rsp], eax

; 294  :     int k = FASTFLOOR(zs);

	movss	xmm0, DWORD PTR zs$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN17@snoise
	cvttss2si eax, DWORD PTR zs$[rsp]
	dec	eax
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN18@snoise
$LN17@snoise:
	cvttss2si eax, DWORD PTR zs$[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN18@snoise:
	mov	eax, DWORD PTR tv84[rsp]
	mov	DWORD PTR k$[rsp], eax

; 295  : 
; 296  :     float t = (float)(i+j+k)*G3; 

	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR k$[rsp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR t$[rsp], xmm0

; 297  :     float X0 = i-t;

	cvtsi2ss xmm0, DWORD PTR i$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR X0$[rsp], xmm0

; 298  :     float Y0 = j-t;

	cvtsi2ss xmm0, DWORD PTR j$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR Y0$[rsp], xmm0

; 299  :     float Z0 = k-t;

	cvtsi2ss xmm0, DWORD PTR k$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR Z0$[rsp], xmm0

; 300  :     float x0 = x-X0;

	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR X0$[rsp]
	movss	DWORD PTR x0$[rsp], xmm0

; 301  :     float y0 = y-Y0;

	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR Y0$[rsp]
	movss	DWORD PTR y0$[rsp], xmm0

; 302  :     float z0 = z-Z0;

	movss	xmm0, DWORD PTR z$[rsp]
	subss	xmm0, DWORD PTR Z0$[rsp]
	movss	DWORD PTR z0$[rsp], xmm0

; 303  : 
; 304  :     int i1, j1, k1;
; 305  :     int i2, j2, k2;
; 306  : 
; 307  :     if(x0>=y0) {

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jb	$LN2@snoise

; 308  : 		if(y0>=z0)		{ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }

	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jb	SHORT $LN4@snoise
	mov	DWORD PTR i1$[rsp], 1
	mov	DWORD PTR j1$[rsp], 0
	mov	DWORD PTR k1$[rsp], 0
	mov	DWORD PTR i2$[rsp], 1
	mov	DWORD PTR j2$[rsp], 1
	mov	DWORD PTR k2$[rsp], 0
	jmp	SHORT $LN5@snoise
$LN4@snoise:

; 309  :         else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jb	SHORT $LN6@snoise
	mov	DWORD PTR i1$[rsp], 1
	mov	DWORD PTR j1$[rsp], 0
	mov	DWORD PTR k1$[rsp], 0
	mov	DWORD PTR i2$[rsp], 1
	mov	DWORD PTR j2$[rsp], 0
	mov	DWORD PTR k2$[rsp], 1
	jmp	SHORT $LN7@snoise
$LN6@snoise:

; 310  :         else			{ i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }

	mov	DWORD PTR i1$[rsp], 0
	mov	DWORD PTR j1$[rsp], 0
	mov	DWORD PTR k1$[rsp], 1
	mov	DWORD PTR i2$[rsp], 1
	mov	DWORD PTR j2$[rsp], 0
	mov	DWORD PTR k2$[rsp], 1
$LN7@snoise:
$LN5@snoise:

; 311  : 	} else {

	jmp	$LN3@snoise
$LN2@snoise:

; 312  : 		if(y0<z0)		{ i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }

	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jae	SHORT $LN8@snoise
	mov	DWORD PTR i1$[rsp], 0
	mov	DWORD PTR j1$[rsp], 0
	mov	DWORD PTR k1$[rsp], 1
	mov	DWORD PTR i2$[rsp], 0
	mov	DWORD PTR j2$[rsp], 1
	mov	DWORD PTR k2$[rsp], 1
	jmp	SHORT $LN9@snoise
$LN8@snoise:

; 313  : 		else if(x0<z0)	{ i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR z0$[rsp]
	jae	SHORT $LN10@snoise
	mov	DWORD PTR i1$[rsp], 0
	mov	DWORD PTR j1$[rsp], 1
	mov	DWORD PTR k1$[rsp], 0
	mov	DWORD PTR i2$[rsp], 0
	mov	DWORD PTR j2$[rsp], 1
	mov	DWORD PTR k2$[rsp], 1
	jmp	SHORT $LN11@snoise
$LN10@snoise:

; 314  : 		else			{ i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }

	mov	DWORD PTR i1$[rsp], 0
	mov	DWORD PTR j1$[rsp], 1
	mov	DWORD PTR k1$[rsp], 0
	mov	DWORD PTR i2$[rsp], 1
	mov	DWORD PTR j2$[rsp], 1
	mov	DWORD PTR k2$[rsp], 0
$LN11@snoise:
$LN9@snoise:
$LN3@snoise:

; 315  :     }
; 316  : 
; 317  :     float x1 = x0 - i1 + G3,  x2 = x0 - i2 + G3a,  x3 = x0 + G3b;

	cvtsi2ss xmm0, DWORD PTR i1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR x1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR i2$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR x2$[rsp], xmm0
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR x3$[rsp], xmm0

; 318  :     float y1 = y0 - j1 + G3,  y2 = y0 - j2 + G3a,  y3 = y0 + G3b;

	cvtsi2ss xmm0, DWORD PTR j1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR y1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR j2$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR y2$[rsp], xmm0
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR y3$[rsp], xmm0

; 319  :     float z1 = z0 - k1 + G3,  z2 = z0 - k2 + G3a,  z3 = z0 + G3b;

	cvtsi2ss xmm0, DWORD PTR k1$[rsp]
	movss	xmm1, DWORD PTR z0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR z1$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR k2$[rsp]
	movss	xmm1, DWORD PTR z0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR z2$[rsp], xmm0
	movss	xmm0, DWORD PTR z0$[rsp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR z3$[rsp], xmm0

; 320  : 
; 321  :     int ii = i % 256;

	mov	eax, DWORD PTR i$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR ii$[rsp], eax

; 322  :     int jj = j % 256;

	mov	eax, DWORD PTR j$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR jj$[rsp], eax

; 323  :     int kk = k % 256;

	mov	eax, DWORD PTR k$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR kk$[rsp], eax

; 324  : 
; 325  : 	return 32.0f * (point(x0, y0, z0, ii,    jj,    kk) +

	mov	eax, DWORD PTR kk$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR jj$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ii$[rsp]
	movss	xmm2, DWORD PTR z0$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	movss	xmm0, DWORD PTR x0$[rsp]
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	movss	DWORD PTR tv159[rsp], xmm0
	mov	eax, DWORD PTR k1$[rsp]
	mov	ecx, DWORD PTR kk$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR j1$[rsp]
	mov	edx, DWORD PTR jj$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR i1$[rsp]
	mov	r8d, DWORD PTR ii$[rsp]
	add	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	movss	xmm2, DWORD PTR z1$[rsp]
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR x1$[rsp]
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv159[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv208[rsp], xmm0
	mov	eax, DWORD PTR k2$[rsp]
	mov	ecx, DWORD PTR kk$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR j2$[rsp]
	mov	edx, DWORD PTR jj$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR i2$[rsp]
	mov	r8d, DWORD PTR ii$[rsp]
	add	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	movss	xmm2, DWORD PTR z2$[rsp]
	movss	xmm1, DWORD PTR y2$[rsp]
	movss	xmm0, DWORD PTR x2$[rsp]
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv208[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv219[rsp], xmm0
	mov	eax, DWORD PTR kk$[rsp]
	inc	eax
	mov	ecx, DWORD PTR jj$[rsp]
	inc	ecx
	mov	edx, DWORD PTR ii$[rsp]
	inc	edx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	movss	xmm2, DWORD PTR z3$[rsp]
	movss	xmm1, DWORD PTR y3$[rsp]
	movss	xmm0, DWORD PTR x3$[rsp]
	call	?point@Perlin@@CAMMMMHHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv219[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@42000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 326  : 					point(x1, y1, z1, ii+i1, jj+j1, kk+k1) +
; 327  : 					point(x2, y2, z2, ii+i2, jj+j2, kk+k2) +
; 328  : 					point(x3, y3, z3, ii+1,  jj+1,  kk+1));
; 329  : }

	add	rsp, 216				; 000000d8H
	ret	0
?snoise@Perlin@@SAMMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMMM@Z
_TEXT	SEGMENT
y0$ = 32
x0$ = 36
xs$ = 40
ys$ = 44
i$ = 48
j$ = 52
j1$ = 56
i1$ = 60
jj$ = 64
ii$ = 68
s$ = 72
tv72 = 76
tv77 = 80
t$ = 84
X0$ = 88
Y0$ = 92
y1$ = 96
x1$ = 100
tv132 = 104
y2$ = 108
x2$ = 112
tv144 = 116
x$ = 144
y$ = 152
?snoise@Perlin@@SAMMM@Z PROC				; Perlin::snoise, COMDAT

; 249  : float Perlin::snoise(float x, float y) {

$LN9:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 136				; 00000088H

; 250  : 
; 251  : 	#define F2 0.366025403f // F2 = 0.5*(sqrt(3.0)-1.0)
; 252  : 	#define G2 0.211324865f // G2 = (3.0-Math.sqrt(3.0))/6.0
; 253  : 
; 254  :     float s = (x+y)*F2;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR y$[rsp]
	mulss	xmm0, DWORD PTR __real@3ebb67ae
	movss	DWORD PTR s$[rsp], xmm0

; 255  :     float xs = x + s;

	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR xs$[rsp], xmm0

; 256  :     float ys = y + s;

	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR ys$[rsp], xmm0

; 257  :     int i = FASTFLOOR(xs);

	movss	xmm0, DWORD PTR xs$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN5@snoise
	cvttss2si eax, DWORD PTR xs$[rsp]
	dec	eax
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN6@snoise
$LN5@snoise:
	cvttss2si eax, DWORD PTR xs$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN6@snoise:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR i$[rsp], eax

; 258  :     int j = FASTFLOOR(ys);

	movss	xmm0, DWORD PTR ys$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN7@snoise
	cvttss2si eax, DWORD PTR ys$[rsp]
	dec	eax
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN8@snoise
$LN7@snoise:
	cvttss2si eax, DWORD PTR ys$[rsp]
	mov	DWORD PTR tv77[rsp], eax
$LN8@snoise:
	mov	eax, DWORD PTR tv77[rsp]
	mov	DWORD PTR j$[rsp], eax

; 259  : 
; 260  :     float t = (float)(i+j)*G2;

	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e58658c
	movss	DWORD PTR t$[rsp], xmm0

; 261  :     float X0 = i-t;

	cvtsi2ss xmm0, DWORD PTR i$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR X0$[rsp], xmm0

; 262  :     float Y0 = j-t;

	cvtsi2ss xmm0, DWORD PTR j$[rsp]
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR Y0$[rsp], xmm0

; 263  :     float x0 = x-X0;

	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR X0$[rsp]
	movss	DWORD PTR x0$[rsp], xmm0

; 264  :     float y0 = y-Y0;

	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR Y0$[rsp]
	movss	DWORD PTR y0$[rsp], xmm0

; 265  : 
; 266  :     int i1, j1;
; 267  :     if(x0>y0) {i1=1; j1=0;}

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN2@snoise
	mov	DWORD PTR i1$[rsp], 1
	mov	DWORD PTR j1$[rsp], 0
	jmp	SHORT $LN3@snoise
$LN2@snoise:

; 268  :     else {i1=0; j1=1;}

	mov	DWORD PTR i1$[rsp], 0
	mov	DWORD PTR j1$[rsp], 1
$LN3@snoise:

; 269  : 
; 270  :     float x1 = x0 - i1 + G2, x2 = x0 - 1.0f + 2.0f * G2;

	cvtsi2ss xmm0, DWORD PTR i1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e58658c
	movss	DWORD PTR x1$[rsp], xmm0
	movss	xmm0, DWORD PTR x0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR __real@3ed8658c
	movss	DWORD PTR x2$[rsp], xmm0

; 271  :     float y1 = y0 - j1 + G2, y2 = y0 - 1.0f + 2.0f * G2;     

	cvtsi2ss xmm0, DWORD PTR j1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3e58658c
	movss	DWORD PTR y1$[rsp], xmm0
	movss	xmm0, DWORD PTR y0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR __real@3ed8658c
	movss	DWORD PTR y2$[rsp], xmm0

; 272  : 
; 273  :     int ii = i % 256;

	mov	eax, DWORD PTR i$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR ii$[rsp], eax

; 274  :     int jj = j % 256;

	mov	eax, DWORD PTR j$[rsp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR jj$[rsp], eax

; 275  : 
; 276  :     return 40.0f * (point(x0, y0, ii,    jj) +

	mov	r9d, DWORD PTR jj$[rsp]
	mov	r8d, DWORD PTR ii$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	movss	xmm0, DWORD PTR x0$[rsp]
	call	?point@Perlin@@CAMMMHH@Z		; Perlin::point
	movss	DWORD PTR tv132[rsp], xmm0
	mov	eax, DWORD PTR j1$[rsp]
	mov	ecx, DWORD PTR jj$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR i1$[rsp]
	mov	edx, DWORD PTR ii$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	r9d, eax
	mov	r8d, ecx
	movss	xmm1, DWORD PTR y1$[rsp]
	movss	xmm0, DWORD PTR x1$[rsp]
	call	?point@Perlin@@CAMMMHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv132[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv144[rsp], xmm0
	mov	eax, DWORD PTR jj$[rsp]
	inc	eax
	mov	ecx, DWORD PTR ii$[rsp]
	inc	ecx
	mov	r9d, eax
	mov	r8d, ecx
	movss	xmm1, DWORD PTR y2$[rsp]
	movss	xmm0, DWORD PTR x2$[rsp]
	call	?point@Perlin@@CAMMMHH@Z		; Perlin::point
	movss	xmm1, DWORD PTR tv144[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@42200000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 277  : 					point(x1, y1, ii+i1, jj+j1) +
; 278  : 					point(x2, y2, ii+1,  jj+1));
; 279  : }

	add	rsp, 136				; 00000088H
	ret	0
?snoise@Perlin@@SAMMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?snoise@Perlin@@SAMM@Z
_TEXT	SEGMENT
i0$ = 32
tv68 = 36
x0$ = 40
i1$ = 44
x1$ = 48
tv73 = 52
x$ = 80
?snoise@Perlin@@SAMM@Z PROC				; Perlin::snoise, COMDAT

; 241  : float Perlin::snoise(float x) {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 72					; 00000048H

; 242  : 	int i0 = FASTFLOOR(x);

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@snoise
	cvttss2si eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@snoise
$LN3@snoise:
	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv68[rsp], eax
$LN4@snoise:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR i0$[rsp], eax

; 243  : 	int i1 = i0 + 1;

	mov	eax, DWORD PTR i0$[rsp]
	inc	eax
	mov	DWORD PTR i1$[rsp], eax

; 244  : 	float x0 = x - i0;

	cvtsi2ss xmm0, DWORD PTR i0$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x0$[rsp], xmm0

; 245  : 	float x1 = x0 - 1.0f;

	movss	xmm0, DWORD PTR x0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR x1$[rsp], xmm0

; 246  : 	return (1.f/2.53125f) * (point(x0, i0) + point(x1, i1));

	mov	edx, DWORD PTR i0$[rsp]
	movss	xmm0, DWORD PTR x0$[rsp]
	call	?point@Perlin@@CAMMH@Z			; Perlin::point
	movss	DWORD PTR tv73[rsp], xmm0
	mov	edx, DWORD PTR i1$[rsp]
	movss	xmm0, DWORD PTR x1$[rsp]
	call	?point@Perlin@@CAMMH@Z			; Perlin::point
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3eca4588
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 247  : }

	add	rsp, 72					; 00000048H
	ret	0
?snoise@Perlin@@SAMM@Z ENDP				; Perlin::snoise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMMMM@Z
_TEXT	SEGMENT
wf0$ = 48
zf0$ = 52
yf0$ = 56
xf0$ = 60
wi$ = 64
xf1$ = 68
wf1$ = 72
zf1$ = 76
yf1$ = 80
i$ = 84
zi$ = 88
xi$ = 92
yi$ = 96
l2$ = 100
l1$ = 104
j$ = 108
l4$ = 112
l3$ = 116
tv68 = 120
tv73 = 124
tv78 = 128
tv83 = 132
AA$ = 136
A$ = 140
AB$ = 144
BA$ = 148
B$ = 152
BB$ = 156
BAA$ = 160
AAA$ = 164
BBA$ = 168
ABA$ = 172
BAB$ = 176
AAB$ = 180
BBB$ = 184
ABB$ = 188
k$ = 192
tv270 = 196
tv294 = 200
tv318 = 204
tv342 = 208
tv366 = 212
tv392 = 216
tv418 = 220
tv444 = 224
l6$ = 228
l5$ = 232
l8$ = 236
l7$ = 240
l$ = 244
x$ = 272
y$ = 280
z$ = 288
w$ = 296
?noise@Perlin@@SAMMMMM@Z PROC				; Perlin::noise, COMDAT

; 155  : float Perlin::noise(float x, float y, float z, float w) {

$LN11:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 264				; 00000108H

; 156  :     int xi = FASTFLOOR(x);

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@noise
	cvttss2si eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@noise
$LN3@noise:
	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv68[rsp], eax
$LN4@noise:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR xi$[rsp], eax

; 157  : 	int yi = FASTFLOOR(y);

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN5@noise
	cvttss2si eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN6@noise
$LN5@noise:
	cvttss2si eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN6@noise:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR yi$[rsp], eax

; 158  : 	int zi = FASTFLOOR(z);

	movss	xmm0, DWORD PTR z$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN7@noise
	cvttss2si eax, DWORD PTR z$[rsp]
	dec	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN8@noise
$LN7@noise:
	cvttss2si eax, DWORD PTR z$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN8@noise:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR zi$[rsp], eax

; 159  : 	int wi = FASTFLOOR(w);

	movss	xmm0, DWORD PTR w$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN9@noise
	cvttss2si eax, DWORD PTR w$[rsp]
	dec	eax
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN10@noise
$LN9@noise:
	cvttss2si eax, DWORD PTR w$[rsp]
	mov	DWORD PTR tv83[rsp], eax
$LN10@noise:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR wi$[rsp], eax

; 160  :     float xf0 = x - xi;

	cvtsi2ss xmm0, DWORD PTR xi$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR xf0$[rsp], xmm0

; 161  :     float yf0 = y - yi;

	cvtsi2ss xmm0, DWORD PTR yi$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR yf0$[rsp], xmm0

; 162  : 	float zf0 = z - zi;

	cvtsi2ss xmm0, DWORD PTR zi$[rsp]
	movss	xmm1, DWORD PTR z$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zf0$[rsp], xmm0

; 163  : 	float wf0 = w - wi;

	cvtsi2ss xmm0, DWORD PTR wi$[rsp]
	movss	xmm1, DWORD PTR w$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR wf0$[rsp], xmm0

; 164  :     float xf1 = xf0 - 1.0f;

	movss	xmm0, DWORD PTR xf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR xf1$[rsp], xmm0

; 165  :     float yf1 = yf0 - 1.0f;

	movss	xmm0, DWORD PTR yf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR yf1$[rsp], xmm0

; 166  : 	float zf1 = zf0 - 1.0f;

	movss	xmm0, DWORD PTR zf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR zf1$[rsp], xmm0

; 167  : 	float wf1 = wf0 - 1.0f;

	movss	xmm0, DWORD PTR wf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR wf1$[rsp], xmm0

; 168  :     xi = xi & 255;

	mov	eax, DWORD PTR xi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR xi$[rsp], eax

; 169  :     yi = yi & 255;   

	mov	eax, DWORD PTR yi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR yi$[rsp], eax

; 170  : 	zi = zi & 255;

	mov	eax, DWORD PTR zi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR zi$[rsp], eax

; 171  : 	wi = wi & 255;

	mov	eax, DWORD PTR wi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR wi$[rsp], eax

; 172  :     float i = FADE(xf0);

	movss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR xf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR i$[rsp], xmm0

; 173  :     float j = FADE(yf0);

	movss	xmm0, DWORD PTR yf0$[rsp]
	mulss	xmm0, DWORD PTR yf0$[rsp]
	mulss	xmm0, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR yf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR yf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR j$[rsp], xmm0

; 174  : 	float k = FADE(zf0);

	movss	xmm0, DWORD PTR zf0$[rsp]
	mulss	xmm0, DWORD PTR zf0$[rsp]
	mulss	xmm0, DWORD PTR zf0$[rsp]
	movss	xmm1, DWORD PTR zf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR zf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR k$[rsp], xmm0

; 175  : 	float l = FADE(wf0);

	movss	xmm0, DWORD PTR wf0$[rsp]
	mulss	xmm0, DWORD PTR wf0$[rsp]
	mulss	xmm0, DWORD PTR wf0$[rsp]
	movss	xmm1, DWORD PTR wf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR wf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR l$[rsp], xmm0

; 176  : 
; 177  : 	int A = perm[xi]  +yi, AA = perm[A]  +zi, AAA = perm[AA]  +wi,

	movsxd	rax, DWORD PTR xi$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR A$[rsp], eax
	movsxd	rax, DWORD PTR A$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR AA$[rsp], eax
	movsxd	rax, DWORD PTR AA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR AAA$[rsp], eax

; 178  :                                               AAB = perm[AA+1]+wi,

	mov	eax, DWORD PTR AA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR AAB$[rsp], eax

; 179  : 		                   AB = perm[A+1]+zi, ABA = perm[AB]  +wi,

	mov	eax, DWORD PTR A$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR AB$[rsp], eax
	movsxd	rax, DWORD PTR AB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR ABA$[rsp], eax

; 180  :                                               ABB = perm[AB+1]+wi;

	mov	eax, DWORD PTR AB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR ABB$[rsp], eax

; 181  : 	int B = perm[xi+1]+yi, BA = perm[B]  +zi, BAA = perm[BA]  +wi,

	mov	eax, DWORD PTR xi$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR B$[rsp], eax
	movsxd	rax, DWORD PTR B$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR BA$[rsp], eax
	movsxd	rax, DWORD PTR BA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR BAA$[rsp], eax

; 182  :                                               BAB = perm[BA+1]+wi,

	mov	eax, DWORD PTR BA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR BAB$[rsp], eax

; 183  : 		                   BB = perm[B+1]+zi, BBA = perm[BB]  +wi,

	mov	eax, DWORD PTR B$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR BB$[rsp], eax
	movsxd	rax, DWORD PTR BB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR BBA$[rsp], eax

; 184  :                                               BBB = perm[BB+1]+wi;

	mov	eax, DWORD PTR BB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR wi$[rsp]
	mov	DWORD PTR BBB$[rsp], eax

; 185  : 											  
; 186  : 	
; 187  : 	float l1 = lerp2(i, grad(perm[AAA  ], xf0, yf0, zf0, wf0), grad(perm[BAA  ], xf1, yf0, zf0, wf0));

	movsxd	rax, DWORD PTR BAA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv270[rsp], xmm0
	movsxd	rax, DWORD PTR AAA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv270[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l1$[rsp], xmm0

; 188  : 	float l2 = lerp2(i, grad(perm[ABA  ], xf0, yf1, zf0, wf0), grad(perm[BBA  ], xf1, yf1, zf0, wf0));

	movsxd	rax, DWORD PTR BBA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv294[rsp], xmm0
	movsxd	rax, DWORD PTR ABA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv294[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l2$[rsp], xmm0

; 189  : 	float l3 = lerp2(i, grad(perm[AAB  ], xf0, yf0, zf1, wf0), grad(perm[BAB  ], xf1, yf0, zf1, wf0));

	movsxd	rax, DWORD PTR BAB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv318[rsp], xmm0
	movsxd	rax, DWORD PTR AAB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv318[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l3$[rsp], xmm0

; 190  : 	float l4 = lerp2(i, grad(perm[ABB  ], xf0, yf1, zf1, wf0), grad(perm[BBB  ], xf1, yf1, zf1, wf0));

	movsxd	rax, DWORD PTR BBB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv342[rsp], xmm0
	movsxd	rax, DWORD PTR ABB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf0$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv342[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l4$[rsp], xmm0

; 191  : 	float l5 = lerp2(i, grad(perm[AAA+1], xf0, yf0, zf0, wf1), grad(perm[BAA+1], xf1, yf0, zf0, wf1));

	mov	eax, DWORD PTR BAA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv366[rsp], xmm0
	mov	eax, DWORD PTR AAA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv366[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l5$[rsp], xmm0

; 192  : 	float l6 = lerp2(i, grad(perm[ABA+1], xf0, yf1, zf0, wf1), grad(perm[BBA+1], xf1, yf1, zf0, wf1));

	mov	eax, DWORD PTR BBA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv392[rsp], xmm0
	mov	eax, DWORD PTR ABA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf0$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv392[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l6$[rsp], xmm0

; 193  : 	float l7 = lerp2(i, grad(perm[AAB+1], xf0, yf0, zf1, wf1), grad(perm[BAB+1], xf1, yf0, zf1, wf1));

	mov	eax, DWORD PTR BAB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv418[rsp], xmm0
	mov	eax, DWORD PTR AAB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv418[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l7$[rsp], xmm0

; 194  : 	float l8 = lerp2(i, grad(perm[ABB+1], xf0, yf1, zf1, wf1), grad(perm[BBB+1], xf1, yf1, zf1, wf1));

	mov	eax, DWORD PTR BBB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm0, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	DWORD PTR tv444[rsp], xmm0
	mov	eax, DWORD PTR ABB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR wf1$[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR zf1$[rsp]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMMM@Z		; Perlin::grad
	movss	xmm1, DWORD PTR tv444[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l8$[rsp], xmm0

; 195  : 
; 196  : 	l1 = lerp2(j, l1, l2);

	movss	xmm2, DWORD PTR l2$[rsp]
	movss	xmm1, DWORD PTR l1$[rsp]
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l1$[rsp], xmm0

; 197  : 	l2 = lerp2(j, l3, l4);

	movss	xmm2, DWORD PTR l4$[rsp]
	movss	xmm1, DWORD PTR l3$[rsp]
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l2$[rsp], xmm0

; 198  : 	l3 = lerp2(j, l5, l6);

	movss	xmm2, DWORD PTR l6$[rsp]
	movss	xmm1, DWORD PTR l5$[rsp]
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l3$[rsp], xmm0

; 199  : 	l4 = lerp2(j, l7, l8);

	movss	xmm2, DWORD PTR l8$[rsp]
	movss	xmm1, DWORD PTR l7$[rsp]
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l4$[rsp], xmm0

; 200  : 
; 201  : 	l1 = lerp2(k, l1, l2);

	movss	xmm2, DWORD PTR l2$[rsp]
	movss	xmm1, DWORD PTR l1$[rsp]
	movss	xmm0, DWORD PTR k$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l1$[rsp], xmm0

; 202  : 	l2 = lerp2(k, l3, l4);

	movss	xmm2, DWORD PTR l4$[rsp]
	movss	xmm1, DWORD PTR l3$[rsp]
	movss	xmm0, DWORD PTR k$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR l2$[rsp], xmm0

; 203  : 
; 204  : 	return lerp2(l, l1, l2) * 0.87f;

	movss	xmm2, DWORD PTR l2$[rsp]
	movss	xmm1, DWORD PTR l1$[rsp]
	movss	xmm0, DWORD PTR l$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	mulss	xmm0, DWORD PTR __real@3f5eb852

; 205  : }

	add	rsp, 264				; 00000108H
	ret	0
?noise@Perlin@@SAMMMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMMM@Z
_TEXT	SEGMENT
zf$ = 32
yf$ = 36
xf$ = 40
zi$ = 44
xi$ = 48
yi$ = 52
i$ = 56
tv68 = 60
tv73 = 64
tv78 = 68
A$ = 72
B$ = 76
BB$ = 80
AB$ = 84
BA$ = 88
AA$ = 92
j$ = 96
tv182 = 100
tv177 = 104
tv211 = 108
tv207 = 112
tv176 = 116
tv242 = 120
tv238 = 124
tv264 = 128
tv237 = 132
tv175 = 136
k$ = 140
x$ = 160
y$ = 168
z$ = 176
?noise@Perlin@@SAMMMM@Z PROC				; Perlin::noise, COMDAT

; 129  : float Perlin::noise(float x, float y, float z) {

$LN9:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 152				; 00000098H

; 130  : 	int xi = FASTFLOOR(x);

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@noise
	cvttss2si eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@noise
$LN3@noise:
	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv68[rsp], eax
$LN4@noise:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR xi$[rsp], eax

; 131  : 	int yi = FASTFLOOR(y);

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN5@noise
	cvttss2si eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN6@noise
$LN5@noise:
	cvttss2si eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN6@noise:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR yi$[rsp], eax

; 132  : 	int zi = FASTFLOOR(z);

	movss	xmm0, DWORD PTR z$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN7@noise
	cvttss2si eax, DWORD PTR z$[rsp]
	dec	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN8@noise
$LN7@noise:
	cvttss2si eax, DWORD PTR z$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN8@noise:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR zi$[rsp], eax

; 133  : 	float xf = x - (float)xi;

	cvtsi2ss xmm0, DWORD PTR xi$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR xf$[rsp], xmm0

; 134  : 	float yf = y - (float)yi;

	cvtsi2ss xmm0, DWORD PTR yi$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR yf$[rsp], xmm0

; 135  : 	float zf = z - (float)zi;

	cvtsi2ss xmm0, DWORD PTR zi$[rsp]
	movss	xmm1, DWORD PTR z$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zf$[rsp], xmm0

; 136  : 	xi = xi & 255;

	mov	eax, DWORD PTR xi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR xi$[rsp], eax

; 137  : 	yi = yi & 255;

	mov	eax, DWORD PTR yi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR yi$[rsp], eax

; 138  : 	zi = zi & 255;

	mov	eax, DWORD PTR zi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR zi$[rsp], eax

; 139  : 	float i = FADE(xf);

	movss	xmm0, DWORD PTR xf$[rsp]
	mulss	xmm0, DWORD PTR xf$[rsp]
	mulss	xmm0, DWORD PTR xf$[rsp]
	movss	xmm1, DWORD PTR xf$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR xf$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR i$[rsp], xmm0

; 140  : 	float j = FADE(yf);

	movss	xmm0, DWORD PTR yf$[rsp]
	mulss	xmm0, DWORD PTR yf$[rsp]
	mulss	xmm0, DWORD PTR yf$[rsp]
	movss	xmm1, DWORD PTR yf$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR yf$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR j$[rsp], xmm0

; 141  : 	float k = FADE(zf);

	movss	xmm0, DWORD PTR zf$[rsp]
	mulss	xmm0, DWORD PTR zf$[rsp]
	mulss	xmm0, DWORD PTR zf$[rsp]
	movss	xmm1, DWORD PTR zf$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR zf$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR k$[rsp], xmm0

; 142  : 	int A = perm[xi  ]+yi, AA = perm[A]+zi, AB = perm[A+1]+zi;

	movsxd	rax, DWORD PTR xi$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR A$[rsp], eax
	movsxd	rax, DWORD PTR A$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR AA$[rsp], eax
	mov	eax, DWORD PTR A$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR AB$[rsp], eax

; 143  : 	int B = perm[xi+1]+yi, BA = perm[B]+zi, BB = perm[B+1]+zi;

	mov	eax, DWORD PTR xi$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR B$[rsp], eax
	movsxd	rax, DWORD PTR B$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR BA$[rsp], eax
	mov	eax, DWORD PTR B$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR zi$[rsp]
	mov	DWORD PTR BB$[rsp], eax

; 144  : 
; 145  : 	return lerp2(k, lerp2(j, lerp2(i, grad(perm[AA  ], xf  , yf  , zf   ),

	movss	xmm0, DWORD PTR zf$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR yf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR xf$[rsp]
	subss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR tv182[rsp], xmm2
	mov	eax, DWORD PTR BB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv182[rsp]
	movaps	xmm1, xmm0
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	DWORD PTR tv177[rsp], xmm0
	movss	xmm1, DWORD PTR zf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR yf$[rsp]
	subss	xmm2, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR AB$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR xf$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv177[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR tv176[rsp], xmm0
	movss	xmm1, DWORD PTR zf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR xf$[rsp]
	subss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR tv211[rsp], xmm2
	mov	eax, DWORD PTR BA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR yf$[rsp]
	movss	xmm1, DWORD PTR tv211[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	DWORD PTR tv207[rsp], xmm0
	movss	xmm1, DWORD PTR zf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR AA$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR yf$[rsp]
	movss	xmm1, DWORD PTR xf$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv207[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	xmm1, DWORD PTR tv176[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR tv175[rsp], xmm0
	movss	xmm1, DWORD PTR yf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR xf$[rsp]
	subss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR tv242[rsp], xmm2
	movsxd	rax, DWORD PTR BB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm3, DWORD PTR zf$[rsp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR tv242[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	DWORD PTR tv238[rsp], xmm0
	movss	xmm1, DWORD PTR yf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR AB$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm3, DWORD PTR zf$[rsp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR xf$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv238[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR tv237[rsp], xmm0
	movss	xmm1, DWORD PTR xf$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR BA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm3, DWORD PTR zf$[rsp]
	movss	xmm2, DWORD PTR yf$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	DWORD PTR tv264[rsp], xmm0
	movsxd	rax, DWORD PTR AA$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm3, DWORD PTR zf$[rsp]
	movss	xmm2, DWORD PTR yf$[rsp]
	movss	xmm1, DWORD PTR xf$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv264[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	xmm1, DWORD PTR tv237[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	xmm1, DWORD PTR tv175[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR k$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	mulss	xmm0, DWORD PTR __real@3f6f9db2

; 146  : 								   grad(perm[BA  ], xf-1, yf  , zf   )),
; 147  : 						   lerp2(i, grad(perm[AB  ], xf  , yf-1, zf   ),
; 148  : 								   grad(perm[BB  ], xf-1, yf-1, zf   ))),
; 149  : 				   lerp2(j, lerp2(i, grad(perm[AA+1], xf  , yf  , zf-1 ),
; 150  : 								   grad(perm[BA+1], xf-1, yf  , zf-1 )),
; 151  : 						   lerp2(i, grad(perm[AB+1], xf  , yf-1, zf-1 ),
; 152  : 								   grad(perm[BB+1], xf-1, yf-1, zf-1 )))) * 0.936f;
; 153  : }

	add	rsp, 152				; 00000098H
	ret	0
?noise@Perlin@@SAMMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMMM@Z
_TEXT	SEGMENT
yf0$ = 32
xf0$ = 36
xi$ = 40
yi$ = 44
tv68 = 48
tv73 = 52
yf1$ = 56
B$ = 60
xf1$ = 64
A$ = 68
i$ = 72
tv141 = 76
tv164 = 80
tv140 = 84
j$ = 88
x$ = 112
y$ = 120
?noise@Perlin@@SAMMM@Z PROC				; Perlin::noise, COMDAT

; 109  : float Perlin::noise(float x, float y) {    

$LN7:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 104				; 00000068H

; 110  :     int xi = FASTFLOOR(x);

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@noise
	cvttss2si eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@noise
$LN3@noise:
	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv68[rsp], eax
$LN4@noise:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR xi$[rsp], eax

; 111  : 	int yi = FASTFLOOR(y);

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN5@noise
	cvttss2si eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN6@noise
$LN5@noise:
	cvttss2si eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN6@noise:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR yi$[rsp], eax

; 112  :     float xf0 = x - xi;

	cvtsi2ss xmm0, DWORD PTR xi$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR xf0$[rsp], xmm0

; 113  :     float yf0 = y - yi;

	cvtsi2ss xmm0, DWORD PTR yi$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR yf0$[rsp], xmm0

; 114  :     float xf1 = xf0 - 1.0f;

	movss	xmm0, DWORD PTR xf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR xf1$[rsp], xmm0

; 115  :     float yf1 = yf0 - 1.0f;

	movss	xmm0, DWORD PTR yf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR yf1$[rsp], xmm0

; 116  :     xi = xi & 255;

	mov	eax, DWORD PTR xi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR xi$[rsp], eax

; 117  :     yi = yi & 255;       

	mov	eax, DWORD PTR yi$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR yi$[rsp], eax

; 118  :     float i = FADE(xf0);

	movss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR xf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR i$[rsp], xmm0

; 119  : 	float j = FADE(yf0);

	movss	xmm0, DWORD PTR yf0$[rsp]
	mulss	xmm0, DWORD PTR yf0$[rsp]
	mulss	xmm0, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR yf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR yf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR j$[rsp], xmm0

; 120  : 	int A = perm[xi  ] + yi;

	movsxd	rax, DWORD PTR xi$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR A$[rsp], eax

; 121  : 	int B = perm[xi+1] + yi;

	mov	eax, DWORD PTR xi$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, DWORD PTR yi$[rsp]
	mov	DWORD PTR B$[rsp], eax

; 122  : 
; 123  :     return lerp2(j, lerp2(i, grad(perm[A  ], xf0, yf0),

	mov	eax, DWORD PTR B$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	movss	DWORD PTR tv141[rsp], xmm0
	mov	eax, DWORD PTR A$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm2, DWORD PTR yf1$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv141[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	DWORD PTR tv140[rsp], xmm0
	movsxd	rax, DWORD PTR B$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	movss	DWORD PTR tv164[rsp], xmm0
	movsxd	rax, DWORD PTR A$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm2, DWORD PTR yf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHMM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv164[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR i$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	movss	xmm1, DWORD PTR tv140[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR j$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	mulss	xmm0, DWORD PTR __real@3f01cac1

; 124  : 		                   grad(perm[B  ], xf1, yf0)),
; 125  : 		           lerp2(i, grad(perm[A+1], xf0, yf1),
; 126  : 		                   grad(perm[B+1], xf1, yf1))) * 0.507f;
; 127  : }

	add	rsp, 104				; 00000068H
	ret	0
?noise@Perlin@@SAMMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\perlin.cpp
;	COMDAT ?noise@Perlin@@SAMM@Z
_TEXT	SEGMENT
xf0$ = 32
ix0$ = 36
tv68 = 40
ix1$ = 44
xf1$ = 48
tv83 = 52
s$ = 56
x$ = 80
?noise@Perlin@@SAMM@Z PROC				; Perlin::noise, COMDAT

; 98   : float Perlin::noise(float x) {    

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 72					; 00000048H

; 99   :     int ix0 = FASTFLOOR(x);		

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@noise
	cvttss2si eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@noise
$LN3@noise:
	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv68[rsp], eax
$LN4@noise:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR ix0$[rsp], eax

; 100  : 	int ix1 = (ix0+1) & 255;

	mov	eax, DWORD PTR ix0$[rsp]
	inc	eax
	and	eax, 255				; 000000ffH
	mov	DWORD PTR ix1$[rsp], eax

; 101  :     float xf0 = x - ix0;

	cvtsi2ss xmm0, DWORD PTR ix0$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR xf0$[rsp], xmm0

; 102  : 	float xf1 = xf0 - 1.0f;   

	movss	xmm0, DWORD PTR xf0$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR xf1$[rsp], xmm0

; 103  : 	ix0 = ix0 & 0xff;    // Wrap to 0..255

	mov	eax, DWORD PTR ix0$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR ix0$[rsp], eax

; 104  :     float s = FADE(xf0);

	movss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	mulss	xmm0, DWORD PTR xf0$[rsp]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mulss	xmm1, DWORD PTR __real@40c00000
	subss	xmm1, DWORD PTR __real@41700000
	movss	xmm2, DWORD PTR xf0$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@41200000
	mulss	xmm0, xmm1
	movss	DWORD PTR s$[rsp], xmm0

; 105  :     return lerp2(s, grad(perm[ix0], xf0),

	movsxd	rax, DWORD PTR ix1$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR xf1$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHM@Z			; Perlin::grad
	movss	DWORD PTR tv83[rsp], xmm0
	movsxd	rax, DWORD PTR ix0$[rsp]
	lea	rcx, OFFSET FLAT:?perm@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	movss	xmm1, DWORD PTR xf0$[rsp]
	mov	ecx, eax
	call	?grad@Perlin@@CAMHM@Z			; Perlin::grad
	movss	xmm1, DWORD PTR tv83[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR s$[rsp]
	call	?lerp2@@YAMMMM@Z			; lerp2
	mulss	xmm0, DWORD PTR __real@3e408312

; 106  : 				   grad(perm[ix1], xf1)) * 0.188f;
; 107  : }

	add	rsp, 72					; 00000048H
	ret	0
?noise@Perlin@@SAMM@Z ENDP				; Perlin::noise
_TEXT	ENDS
END
