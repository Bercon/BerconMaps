; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??0Class_ID@@QEAA@KK@Z				; Class_ID::Class_ID
PUBLIC	??D@YA?AVPoint3@@AEBV0@M@Z			; operator*
PUBLIC	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ	; MaxSDK::AssetManagement::AssetId::AssetId
PUBLIC	??AMatrix3@@QEBAAEBVPoint3@@H@Z			; Matrix3::operator[]
PUBLIC	??0Matrix3@@QEAA@XZ				; Matrix3::Matrix3
PUBLIC	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z		; Matrix3::GetRow
PUBLIC	?SetEmpty@Interval@@QEAAXXZ			; Interval::SetEmpty
PUBLIC	?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z ; BerconXYZ::update
PUBLIC	?update@BerconXYZ@@QEAAXXZ			; BerconXYZ::update
PUBLIC	?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z ; BerconXYZ::reset
PUBLIC	?isRealworld@BerconXYZ@@QEAAHXZ			; BerconXYZ::isRealworld
PUBLIC	?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z ; BerconXYZ::get
PUBLIC	?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z ; BerconXYZ::get
PUBLIC	?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z ; BerconXYZ::get
PUBLIC	?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z ; BerconXYZ::get
PUBLIC	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z ; BerconXYZ::get
PUBLIC	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z ; BerconXYZ::get
PUBLIC	?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z ; BerconXYZ::seedRandomGen
PUBLIC	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
PUBLIC	?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z ; BerconXYZ::EnableStuff
PUBLIC	?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z ; BerconXYZ::getBasis
PUBLIC	__real@38d1b717
PUBLIC	__real@3c8efa35
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@46fffe00
PUBLIC	__real@49742400
PUBLIC	__real@c9742400
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp_srand:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_??0Point2@@QEAA@XZ:PROC
EXTRN	__imp_??0Point3@@QEAA@XZ:PROC
EXTRN	__imp_??0Point3@@QEAA@MMM@Z:PROC
EXTRN	__imp_??0Point3@@QEAA@AEBV0@@Z:PROC
EXTRN	__imp_??GPoint3@@QEBA?AV0@AEBV0@@Z:PROC
EXTRN	__imp_??HPoint3@@QEBA?AV0@AEBV0@@Z:PROC
EXTRN	__imp_??TPoint3@@QEBA?AV0@AEBV0@@Z:PROC
EXTRN	__imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z:PROC
EXTRN	__imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z:PROC
EXTRN	__imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z:PROC
EXTRN	__imp_?IdentityMatrix@Matrix3@@QEAAXXZ:PROC
EXTRN	__imp_?Translate@Matrix3@@QEAAXAEBVPoint3@@@Z:PROC
EXTRN	__imp_?RotateX@Matrix3@@QEAAXM@Z:PROC
EXTRN	__imp_?RotateY@Matrix3@@QEAAXM@Z:PROC
EXTRN	__imp_?RotateZ@Matrix3@@QEAAXM@Z:PROC
EXTRN	__imp_?Scale@Matrix3@@QEAAXAEBVPoint3@@H@Z:PROC
EXTRN	__imp_?Invert@Matrix3@@QEAAXXZ:PROC
EXTRN	__imp_?ReleaseISpinner@@YAXPEAVISpinnerControl@@@Z:PROC
EXTRN	__imp_?SetupFloatSpinner@@YAPEAVISpinnerControl@@PEAUHWND__@@HHMMMM@Z:PROC
EXTRN	__imp_?SetupUniverseSpinner@@YAPEAVISpinnerControl@@PEAUHWND__@@HHMMMM@Z:PROC
EXTRN	__imp_??0Interval@@QEAA@HH@Z:PROC
EXTRN	__imp_?GetCOREInterface@@YAPEAVInterface@@XZ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
?kTriObjNormalXTCID@@3VClass_ID@@B DQ 01H DUP (?)	; kTriObjNormalXTCID
?intvalid@@3VInterval@@A DQ 01H DUP (?)			; intvalid
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AVPoint3@@AEBV0@M@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??D@YA?AVPoint3@@AEBV0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
	DD	imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ+21
	DD	imagerel $unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkTriObjNormalXTCID@@YAXXZ DD imagerel ??__EkTriObjNormalXTCID@@YAXXZ
	DD	imagerel ??__EkTriObjNormalXTCID@@YAXXZ+32
	DD	imagerel $unwind$??__EkTriObjNormalXTCID@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eintvalid@@YAXXZ DD imagerel ??__Eintvalid@@YAXXZ
	DD	imagerel ??__Eintvalid@@YAXXZ+33
	DD	imagerel $unwind$??__Eintvalid@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z DD imagerel $LN4
	DD	imagerel $LN4+2812
	DD	imagerel $unwind$?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update@BerconXYZ@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+718
	DD	imagerel $unwind$?update@BerconXYZ@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z DD imagerel $LN4
	DD	imagerel $LN4+1258
	DD	imagerel $unwind$?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isRealworld@BerconXYZ@@QEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$?isRealworld@BerconXYZ@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z DD imagerel $LN5
	DD	imagerel $LN5+229
	DD	imagerel $unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z DD imagerel $LN20
	DD	imagerel $LN20+1475
	DD	imagerel $unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z DD imagerel $LN5
	DD	imagerel $LN5+192
	DD	imagerel $unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z DD imagerel $LN20
	DD	imagerel $LN20+1420
	DD	imagerel $unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z DD imagerel $LN23
	DD	imagerel $LN23+2099
	DD	imagerel $unwind$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z DD imagerel $LN22
	DD	imagerel $LN22+1233
	DD	imagerel $unwind$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z DD imagerel $LN9
	DD	imagerel $LN9+445
	DD	imagerel $unwind$?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z DD imagerel $LN9
	DD	imagerel $LN9+1389
	DD	imagerel $unwind$?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z DD imagerel $LN11
	DD	imagerel $LN11+1004
	DD	imagerel $unwind$?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z DD imagerel $LN5
	DD	imagerel $LN5+571
	DD	imagerel $unwind$?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z DD imagerel ?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z
	DD	imagerel ?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z+433
	DD	imagerel $unwind$?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?tiling@@YAHHAEAM@Z DD imagerel ?tiling@@YAHHAEAM@Z
	DD	imagerel ?tiling@@YAHHAEAM@Z+404
	DD	imagerel $unwind$?tiling@@YAHHAEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?tiling@@YAHHAEAMAEAH@Z DD imagerel ?tiling@@YAHHAEAMAEAH@Z
	DD	imagerel ?tiling@@YAHHAEAMAEAH@Z+420
	DD	imagerel $unwind$?tiling@@YAHHAEAMAEAH@Z
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c9742400
CONST	SEGMENT
__real@c9742400 DD 0c9742400r			; -1e+06
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?tiling@@YAHHAEAMAEAH@Z DD 011201H
	DD	02212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?tiling@@YAHHAEAM@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z DD 012619H
	DD	0e217H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z DD 042a19H
	DD	01f0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0e8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z DD 042f19H
	DD	027011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z DD 042f19H
	DD	043011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z DD 042f19H
	DD	069011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0330H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z DD 041801H
	DD	01f0118H
	DD	060107011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z DD 042f19H
	DD	06b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0340H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z DD 041d01H
	DD	021011dH
	DD	060157016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isRealworld@BerconXYZ@@QEAAHXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update@BerconXYZ@@QEAAXXZ DD 040e01H
	DD	011010eH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z DD 021b01H
	DD	025011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eintvalid@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkTriObjNormalXTCID@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD 020701H
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AVPoint3@@AEBV0@M@Z DD 011401H
	DD	06214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?kTriObjNormalXTCID$initializer$@@3P6AXXZEA DQ FLAT:??__EkTriObjNormalXTCID@@YAXXZ ; kTriObjNormalXTCID$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?intvalid$initializer$@@3P6AXXZEA DQ FLAT:??__Eintvalid@@YAXXZ ; intvalid$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?tiling@@YAHHAEAMAEAH@Z
_TEXT	SEGMENT
tv64 = 0
ix$1 = 4
type$ = 32
x$ = 40
flip$ = 48
?tiling@@YAHHAEAMAEAH@Z PROC				; tiling, COMDAT

; 265  : inline static int tiling(int type, float& x, int& flip) {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 266  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@tiling
	cmp	DWORD PTR tv64[rsp], 2
	je	SHORT $LN8@tiling
	cmp	DWORD PTR tv64[rsp], 3
	je	$LN10@tiling
	cmp	DWORD PTR tv64[rsp], 4
	je	$LN14@tiling
	jmp	$LN2@tiling
$LN4@tiling:

; 267  : 		case 1: {D_STRE(x) return TRUE;}

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN5@tiling
	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN6@tiling
$LN5@tiling:
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jae	SHORT $LN7@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0
$LN7@tiling:
$LN6@tiling:
	mov	eax, 1
	jmp	$LN1@tiling
$LN8@tiling:

; 268  : 		case 2: {D_LOOP(x) return TRUE;}

	mov	rax, QWORD PTR x$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN9@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN9@tiling:
	mov	eax, 1
	jmp	$LN1@tiling
$LN10@tiling:

; 269  : 		case 3: {
; 270  : 			if (x<0) x = -x;

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN11@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN11@tiling:

; 271  : 			int ix = int(x);

	mov	rax, QWORD PTR x$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	DWORD PTR ix$1[rsp], eax

; 272  : 			if (ix%2==0) x = x - ix;

	mov	eax, DWORD PTR ix$1[rsp]
	cdq
	and	eax, 1
	xor	eax, edx
	sub	eax, edx
	test	eax, eax
	jne	SHORT $LN12@tiling
	cvtsi2ss xmm0, DWORD PTR ix$1[rsp]
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN13@tiling
$LN12@tiling:

; 273  : 			else { x = 1.f - x + ix; flip = 1; }

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [rax]
	cvtsi2ss xmm1, DWORD PTR ix$1[rsp]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR flip$[rsp]
	mov	DWORD PTR [rax], 1
$LN13@tiling:

; 274  : 			return TRUE;				

	mov	eax, 1
	jmp	SHORT $LN1@tiling
$LN14@tiling:

; 275  : 		}
; 276  : 		case 4: {if (x<0||x>1) return FALSE;}

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	ja	SHORT $LN16@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jae	SHORT $LN15@tiling
$LN16@tiling:
	xor	eax, eax
	jmp	SHORT $LN1@tiling
$LN15@tiling:
$LN2@tiling:

; 277  : 	}
; 278  : 	return TRUE;

	mov	eax, 1
$LN1@tiling:

; 279  : }

	add	rsp, 24
	ret	0
?tiling@@YAHHAEAMAEAH@Z ENDP				; tiling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?tiling@@YAHHAEAM@Z
_TEXT	SEGMENT
tv64 = 0
ix$1 = 4
type$ = 32
x$ = 40
?tiling@@YAHHAEAM@Z PROC				; tiling, COMDAT

; 255  : inline static int tiling(int type, float& x) {

	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 256  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@tiling
	cmp	DWORD PTR tv64[rsp], 2
	je	SHORT $LN8@tiling
	cmp	DWORD PTR tv64[rsp], 3
	je	$LN10@tiling
	cmp	DWORD PTR tv64[rsp], 4
	je	$LN14@tiling
	jmp	$LN2@tiling
$LN4@tiling:

; 257  : 		case 1: {D_STRE(x) return TRUE;}

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN5@tiling
	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN6@tiling
$LN5@tiling:
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jae	SHORT $LN7@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0
$LN7@tiling:
$LN6@tiling:
	mov	eax, 1
	jmp	$LN1@tiling
$LN8@tiling:

; 258  : 		case 2: {D_LOOP(x) return TRUE;}

	mov	rax, QWORD PTR x$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN9@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN9@tiling:
	mov	eax, 1
	jmp	$LN1@tiling
$LN10@tiling:

; 259  : 		case 3: {D_MIRR(x) return TRUE;}

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN11@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN11@tiling:
	mov	rax, QWORD PTR x$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	DWORD PTR ix$1[rsp], eax
	mov	eax, DWORD PTR ix$1[rsp]
	cdq
	and	eax, 1
	xor	eax, edx
	sub	eax, edx
	test	eax, eax
	jne	SHORT $LN12@tiling
	cvtsi2ss xmm0, DWORD PTR ix$1[rsp]
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN13@tiling
$LN12@tiling:
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [rax]
	cvtsi2ss xmm1, DWORD PTR ix$1[rsp]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN13@tiling:
	mov	eax, 1
	jmp	SHORT $LN1@tiling
$LN14@tiling:

; 260  : 		case 4: {if (x<0||x>1) return FALSE;}

	mov	rax, QWORD PTR x$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	ja	SHORT $LN16@tiling
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jae	SHORT $LN15@tiling
$LN16@tiling:
	xor	eax, eax
	jmp	SHORT $LN1@tiling
$LN15@tiling:
$LN2@tiling:

; 261  : 	}
; 262  : 	return TRUE;

	mov	eax, 1
$LN1@tiling:

; 263  : }

	add	rsp, 24
	ret	0
?tiling@@YAHHAEAM@Z ENDP				; tiling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z
_TEXT	SEGMENT
tv84 = 64
minVal$ = 68
spin$ = 72
hWnd$ = 80
tv74 = 88
val$ = 96
__$ArrayPad$ = 104
map$ = 128
t$ = 136
pb_id$ = 144
edit_id$ = 152
spin_id$ = 160
spinnerTypeWorld$ = 168
allowNegative$ = 176
?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z PROC	; setSpinnerType, COMDAT

; 22   : static void setSpinnerType(IParamMap2 *map, TimeValue t, int pb_id, int edit_id, int spin_id, int spinnerTypeWorld=1, bool allowNegative=false) {	

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 23   : 	HWND hWnd = map->GetHWnd();	

	mov	rax, QWORD PTR map$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR map$[rsp]
	call	QWORD PTR [rax+112]
	mov	QWORD PTR hWnd$[rsp], rax

; 24   : 	if (!hWnd) return;

	cmp	QWORD PTR hWnd$[rsp], 0
	jne	SHORT $LN2@setSpinner
	jmp	$LN1@setSpinner
$LN2@setSpinner:

; 25   : 
; 26   : 	float val;
; 27   : 		map->GetParamBlock()->GetValue(pb_id, t, val, intvalid);

	mov	rax, QWORD PTR map$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR map$[rsp]
	call	QWORD PTR [rax+136]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR tv74[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+40], 0
	lea	rcx, OFFSET FLAT:?intvalid@@3VInterval@@A
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR val$[rsp]
	mov	r8d, DWORD PTR t$[rsp]
	movzx	edx, WORD PTR pb_id$[rsp]
	mov	rcx, QWORD PTR tv74[rsp]
	call	QWORD PTR [rax+1712]

; 28   : 
; 29   : 	float minVal = allowNegative ? -1000000.f : 0.f;

	movzx	eax, BYTE PTR allowNegative$[rsp]
	test	eax, eax
	je	SHORT $LN6@setSpinner
	movss	xmm0, DWORD PTR __real@c9742400
	movss	DWORD PTR tv84[rsp], xmm0
	jmp	SHORT $LN7@setSpinner
$LN6@setSpinner:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv84[rsp], xmm0
$LN7@setSpinner:
	movss	xmm0, DWORD PTR tv84[rsp]
	movss	DWORD PTR minVal$[rsp], xmm0

; 30   : 	
; 31   : 	ISpinnerControl* spin;	
; 32   : 	if (spinnerTypeWorld)

	cmp	DWORD PTR spinnerTypeWorld$[rsp], 0
	je	SHORT $LN3@setSpinner

; 33   : 		spin = SetupUniverseSpinner(hWnd, spin_id, edit_id,  minVal, 1000000.f, val);

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR val$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR minVal$[rsp]
	mov	r8d, DWORD PTR edit_id$[rsp]
	mov	edx, DWORD PTR spin_id$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_?SetupUniverseSpinner@@YAPEAVISpinnerControl@@PEAUHWND__@@HHMMMM@Z
	mov	QWORD PTR spin$[rsp], rax

; 34   : 	else

	jmp	SHORT $LN4@setSpinner
$LN3@setSpinner:

; 35   : 		spin = SetupFloatSpinner(hWnd, spin_id, edit_id,  minVal, 1000000.f, val);		

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR val$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR minVal$[rsp]
	mov	r8d, DWORD PTR edit_id$[rsp]
	mov	edx, DWORD PTR spin_id$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_?SetupFloatSpinner@@YAPEAVISpinnerControl@@PEAUHWND__@@HHMMMM@Z
	mov	QWORD PTR spin$[rsp], rax
$LN4@setSpinner:

; 36   : 	spin->SetAutoScale(TRUE);

	mov	rax, QWORD PTR spin$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 1
	mov	rcx, QWORD PTR spin$[rsp]
	call	QWORD PTR [rax+88]

; 37   : 	ReleaseISpinner(spin);

	mov	rcx, QWORD PTR spin$[rsp]
	call	QWORD PTR __imp_?ReleaseISpinner@@YAXPEAVISpinnerControl@@@Z
$LN1@setSpinner:

; 38   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ENDP	; setSpinnerType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
$T5 = 80
$T6 = 92
$T7 = 104
$T8 = 116
$T9 = 128
$T10 = 140
$T11 = 152
$T12 = 164
temp$13 = 176
__$ArrayPad$ = 232
this$ = 272
transform$ = 280
b$ = 288
?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z PROC	; BerconXYZ::getBasis, COMDAT

; 163  : void BerconXYZ::getBasis(Matrix3 transform, Point3* b) {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 164  : 	if (mappingType==4&&mode2D) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	$LN2@getBasis
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+260], 0
	je	$LN2@getBasis

; 165  : 		Matrix3 temp = transform;

	lea	rax, QWORD PTR temp$13[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR transform$[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb

; 166  : 		temp.Invert();

	lea	rcx, QWORD PTR temp$13[rsp]
	call	QWORD PTR __imp_?Invert@Matrix3@@QEAAXXZ

; 167  : 		b[0] = Normalize(temp.GetRow(0));

	xor	r8d, r8d
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR temp$13[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 168  : 		b[1] = Normalize(temp.GetRow(1));

	mov	r8d, 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR temp$13[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 169  : 		b[2] = Normalize(temp.GetRow(2));

	mov	r8d, 2
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR temp$13[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 170  : 	} else {

	jmp	$LN3@getBasis
$LN2@getBasis:

; 171  : 		b[0] = Normalize(transform.GetRow(0));

	xor	r8d, r8d
	lea	rdx, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR transform$[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 172  : 		b[1] = Normalize(transform.GetRow(1));

	mov	r8d, 1
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, QWORD PTR transform$[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 173  : 		b[2] = Normalize(transform.GetRow(2));

	mov	r8d, 2
	lea	rdx, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR transform$[rsp]
	call	?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z	; Matrix3::GetRow
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	QWORD PTR __imp_?Normalize@@YA?AVPoint3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN3@getBasis:

; 174  : 	}
; 175  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z ENDP	; BerconXYZ::getBasis
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z
_TEXT	SEGMENT
s$1 = 64
type$2 = 68
map$3 = 72
tv77 = 80
tv86 = 84
tv91 = 88
tv234 = 96
tv233 = 104
tv232 = 112
this$ = 144
pblock$ = 152
t$ = 160
?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z PROC	; BerconXYZ::EnableStuff, COMDAT

; 133  : void BerconXYZ::EnableStuff(IParamBlock2* pblock, TimeValue t) {	

$LN11:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 134  : 	if (pblock) {

	cmp	QWORD PTR pblock$[rsp], 0
	je	$LN2@EnableStuf

; 135  : 		IParamMap2 *map = pblock->GetMap();

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	edx, edx
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+2328]
	mov	QWORD PTR map$3[rsp], rax

; 136  : 		if (map) {

	cmp	QWORD PTR map$3[rsp], 0
	je	$LN3@EnableStuf

; 137  : 			map->Enable(xyz_size_y2, !lock);			

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+112], 0
	jne	SHORT $LN5@EnableStuf
	mov	DWORD PTR tv77[rsp], 1
	jmp	SHORT $LN6@EnableStuf
$LN5@EnableStuf:
	mov	DWORD PTR tv77[rsp], 0
$LN6@EnableStuf:
	mov	rax, QWORD PTR map$3[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	mov	r8d, DWORD PTR tv77[rsp]
	mov	dx, 18
	mov	rcx, QWORD PTR map$3[rsp]
	call	QWORD PTR [rax+184]

; 138  : 			map->Enable(xyz_size_z2, !lock);

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+112], 0
	jne	SHORT $LN7@EnableStuf
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@EnableStuf
$LN7@EnableStuf:
	mov	DWORD PTR tv86[rsp], 0
$LN8@EnableStuf:
	mov	rax, QWORD PTR map$3[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	mov	r8d, DWORD PTR tv86[rsp]
	mov	dx, 19
	mov	rcx, QWORD PTR map$3[rsp]
	call	QWORD PTR [rax+184]

; 139  : 
; 140  : 			bool s = mappingType==0; // || mappingType==1;

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN9@EnableStuf
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN10@EnableStuf
$LN9@EnableStuf:
	mov	DWORD PTR tv91[rsp], 0
$LN10@EnableStuf:
	movzx	eax, BYTE PTR tv91[rsp]
	mov	BYTE PTR s$1[rsp], al

; 141  : 			map->Enable(xyz_tile_x, s);

	movzx	eax, BYTE PTR s$1[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv234[rsp], rcx
	xor	r9d, r9d
	mov	r8d, eax
	mov	dx, 11
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rax, QWORD PTR tv234[rsp]
	call	QWORD PTR [rax+184]

; 142  : 			map->Enable(xyz_tile_y, s);

	movzx	eax, BYTE PTR s$1[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv233[rsp], rcx
	xor	r9d, r9d
	mov	r8d, eax
	mov	dx, 12
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rax, QWORD PTR tv233[rsp]
	call	QWORD PTR [rax+184]

; 143  : 			map->Enable(xyz_tile_z, s);

	movzx	eax, BYTE PTR s$1[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv232[rsp], rcx
	xor	r9d, r9d
	mov	r8d, eax
	mov	dx, 13
	mov	rcx, QWORD PTR map$3[rsp]
	mov	rax, QWORD PTR tv232[rsp]
	call	QWORD PTR [rax+184]

; 144  : 
; 145  : 			int type = isRealworld();

	mov	rcx, QWORD PTR this$[rsp]
	call	?isRealworld@BerconXYZ@@QEAAHXZ		; BerconXYZ::isRealworld
	mov	DWORD PTR type$2[rsp], eax

; 146  : 			
; 147  : 			setSpinnerType(map, t, xyz_offset_x, IDC_OFF_X, IDC_OFF_X_SPIN, type, true);	

	mov	BYTE PTR [rsp+48], 1
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1073		; 00000431H
	mov	r9d, 1072				; 00000430H
	mov	r8d, 2
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 148  : 			setSpinnerType(map, t, xyz_offset_y, IDC_OFF_Y, IDC_OFF_Y_SPIN, type, true);	

	mov	BYTE PTR [rsp+48], 1
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1054		; 0000041eH
	mov	r9d, 1053				; 0000041dH
	mov	r8d, 3
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 149  : 			setSpinnerType(map, t, xyz_offset_z, IDC_OFF_Z, IDC_OFF_Z_SPIN, type, true);	

	mov	BYTE PTR [rsp+48], 1
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1064		; 00000428H
	mov	r9d, 1063				; 00000427H
	mov	r8d, 4
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 150  : 			setSpinnerType(map, t, xyz_size_x, IDC_SIZ_X, IDC_SIZ_X_SPIN, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1056		; 00000420H
	mov	r9d, 1055				; 0000041fH
	mov	r8d, 5
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 151  : 			setSpinnerType(map, t, xyz_size_y, IDC_SIZ_Y, IDC_SIZ_Y_SPIN, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1060		; 00000424H
	mov	r9d, 1059				; 00000423H
	mov	r8d, 6
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 152  : 			setSpinnerType(map, t, xyz_size_z, IDC_SIZ_Z, IDC_SIZ_Z_SPIN, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1068		; 0000042cH
	mov	r9d, 1067				; 0000042bH
	mov	r8d, 7
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 153  : 			setSpinnerType(map, t, xyz_offset_x2, IDC_OFF_X2, IDC_OFF_X_SPIN2, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1095		; 00000447H
	mov	r9d, 1094				; 00000446H
	mov	r8d, 14
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 154  : 			setSpinnerType(map, t, xyz_offset_y2, IDC_OFF_Y2, IDC_OFF_Y_SPIN2, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1102		; 0000044eH
	mov	r9d, 1101				; 0000044dH
	mov	r8d, 15
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 155  : 			setSpinnerType(map, t, xyz_offset_z2, IDC_OFF_Z2, IDC_OFF_Z_SPIN2, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1109		; 00000455H
	mov	r9d, 1108				; 00000454H
	mov	r8d, 16
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 156  : 			setSpinnerType(map, t, xyz_size_x2, IDC_SIZ_X2, IDC_SIZ_X_SPIN2, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1097		; 00000449H
	mov	r9d, 1096				; 00000448H
	mov	r8d, 17
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 157  : 			setSpinnerType(map, t, xyz_size_y2, IDC_SIZ_Y2, IDC_SIZ_Y_SPIN2, type);	

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1104		; 00000450H
	mov	r9d, 1103				; 0000044fH
	mov	r8d, 18
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType

; 158  : 			setSpinnerType(map, t, xyz_size_z2, IDC_SIZ_Z2, IDC_SIZ_Z_SPIN2, type);

	mov	BYTE PTR [rsp+48], 0
	mov	eax, DWORD PTR type$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 1111		; 00000457H
	mov	r9d, 1110				; 00000456H
	mov	r8d, 19
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR map$3[rsp]
	call	?setSpinnerType@@YAXPEAVIParamMap2@@HHHHH_N@Z ; setSpinnerType
$LN3@EnableStuf:
$LN2@EnableStuf:

; 159  : 		}
; 160  : 	}
; 161  : }

	add	rsp, 136				; 00000088H
	ret	0
?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z ENDP	; BerconXYZ::EnableStuff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z
_TEXT	SEGMENT
add$1 = 32
tv79 = 36
tv89 = 40
tv188 = 44
tv201 = 48
tv211 = 52
$T2 = 56
$T3 = 68
$T4 = 80
scale$ = 96
transform$ = 112
__$ArrayPad$ = 168
this$ = 208
__$ReturnUdt$ = 216
sc$ = 224
inv$ = 232
?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z PROC ; BerconXYZ::random, COMDAT

; 195  : Matrix3 BerconXYZ::random(ShadeContext& sc, Matrix3* inv) {

$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 196  : 	seedRandomGen(sc);

	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z ; BerconXYZ::seedRandomGen

; 197  : 
; 198  : 	Matrix3 transform;

	lea	rcx, QWORD PTR transform$[rsp]
	call	??0Matrix3@@QEAA@XZ			; Matrix3::Matrix3

; 199  : 	transform.IdentityMatrix();

	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?IdentityMatrix@Matrix3@@QEAAXXZ

; 200  : 	transform.Translate(Point3(offX+offX2*URANDF(), offY+offY2*URANDF(), offZ+offZ2*URANDF()));

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+64]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv79[rsp], xmm0
	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+60]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv89[rsp], xmm0
	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+56]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv79[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv89[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?Translate@Matrix3@@QEAAXAEBVPoint3@@@Z

; 201  :  	transform.RotateX(angX+angX2*URANDF());

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+80]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+32]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?RotateX@Matrix3@@QEAAXM@Z

; 202  : 	transform.RotateY(angY+angY2*URANDF());

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+84]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+36]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?RotateY@Matrix3@@QEAAXM@Z

; 203  : 	transform.RotateZ(angZ+angZ2*URANDF());	

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+88]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+40]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?RotateZ@Matrix3@@QEAAXM@Z

; 204  : 
; 205  : 	if (inv) {

	cmp	QWORD PTR inv$[rsp], 0
	je	SHORT $LN2@random

; 206  : 		*inv = transform;

	lea	rax, QWORD PTR transform$[rsp]
	mov	rdi, QWORD PTR inv$[rsp]
	mov	rsi, rax
	mov	ecx, 52					; 00000034H
	rep movsb

; 207  : 		inv->Invert();

	mov	rcx, QWORD PTR inv$[rsp]
	call	QWORD PTR __imp_?Invert@Matrix3@@QEAAXXZ
$LN2@random:

; 208  : 	}
; 209  : 
; 210  : 	Point3 scale;

	lea	rcx, QWORD PTR scale$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@XZ

; 211  : 	if (lock) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+112], 0
	je	$LN3@random

; 212  : 		float add = sizeX2*URANDF();

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR add$1[rsp], xmm0

; 213  : 		scale = Point3(sizeX+add, sizeY+add, sizeZ+add);	

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	addss	xmm0, DWORD PTR add$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	addss	xmm1, DWORD PTR add$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+20]
	addss	xmm2, DWORD PTR add$1[rsp]
	movss	DWORD PTR tv188[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv188[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	lea	rcx, QWORD PTR scale$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 214  : 	} else {

	jmp	$LN4@random
$LN3@random:

; 215  : 		scale = Point3(sizeX+sizeX2*URANDF(), sizeY+sizeY2*URANDF(), sizeZ+sizeZ2*URANDF());

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+76]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+28]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv201[rsp], xmm0
	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv211[rsp], xmm0
	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv201[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv211[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	lea	rcx, QWORD PTR scale$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN4@random:

; 216  : 	}
; 217  : 	if (scale.x < 0.0001f) scale.x = 0.0001f;

	movss	xmm0, DWORD PTR scale$[rsp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jae	SHORT $LN5@random
	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR scale$[rsp], xmm0
$LN5@random:

; 218  : 	if (scale.y < 0.0001f) scale.y = 0.0001f;

	movss	xmm0, DWORD PTR scale$[rsp+4]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jae	SHORT $LN6@random
	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR scale$[rsp+4], xmm0
$LN6@random:

; 219  : 	if (scale.z < 0.0001f) scale.z = 0.0001f;

	movss	xmm0, DWORD PTR scale$[rsp+8]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jae	SHORT $LN7@random
	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR scale$[rsp+8], xmm0
$LN7@random:

; 220  : 	scale.x = 1.f/scale.x; scale.y = 1.f/scale.y; scale.z = 1.f/scale.z;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp+4]
	movss	DWORD PTR scale$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp+8]
	movss	DWORD PTR scale$[rsp+8], xmm0

; 221  : 	transform.Scale(scale);

	xor	r8d, r8d
	lea	rdx, QWORD PTR scale$[rsp]
	lea	rcx, QWORD PTR transform$[rsp]
	call	QWORD PTR __imp_?Scale@Matrix3@@QEAAXAEBVPoint3@@H@Z

; 222  : 
; 223  : 	return transform;

	lea	rax, QWORD PTR transform$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 224  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ENDP ; BerconXYZ::random
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z
_TEXT	SEGMENT
seed$ = 32
hand$1 = 36
id$2 = 40
chkMtlAPI$3 = 48
ob$4 = 56
node$5 = 64
obj$6 = 72
tv168 = 80
this$ = 112
sc$ = 120
?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z PROC ; BerconXYZ::seedRandomGen, COMDAT

; 226  : void BerconXYZ::seedRandomGen(ShadeContext& sc) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 227  : 	int seed = 1;

	mov	DWORD PTR seed$[rsp], 1

; 228  : 
; 229  : 	if (p_randMat) { 		

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+100], 0
	je	SHORT $LN2@seedRandom

; 230  : 		seed += sc.mtlNum;

	mov	rax, QWORD PTR sc$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	ecx, DWORD PTR seed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR seed$[rsp], eax
$LN2@seedRandom:

; 231  : 	}
; 232  : 	if (p_randObj) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+96], 0
	je	SHORT $LN3@seedRandom

; 233  : 		INode *node=sc.Node();

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+72]
	mov	QWORD PTR node$5[rsp], rax

; 234  : 		if (node) {

	cmp	QWORD PTR node$5[rsp], 0
	je	SHORT $LN4@seedRandom

; 235  : 			int hand = int(node->GetHandle());

	mov	rax, QWORD PTR node$5[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR node$5[rsp]
	call	QWORD PTR [rax+2600]
	mov	DWORD PTR hand$1[rsp], eax

; 236  : 			seed += hand*(hand*hand*15731 + 789221);

	mov	eax, DWORD PTR hand$1[rsp]
	imul	eax, DWORD PTR hand$1[rsp]
	imul	eax, eax, 15731				; 00003d73H
	add	eax, 789221				; 000c0ae5H
	mov	ecx, DWORD PTR hand$1[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR seed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR seed$[rsp], eax
$LN4@seedRandom:
$LN3@seedRandom:

; 237  : 		}
; 238  : 	}
; 239  : 	if (p_randPar) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+104], 0
	je	$LN5@seedRandom

; 240  : 		Object *ob = sc.GetEvalObject();		

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+80]
	mov	QWORD PTR ob$4[rsp], rax

; 241  : 		if (ob && ob->IsParticleSystem()) {

	cmp	QWORD PTR ob$4[rsp], 0
	je	$LN6@seedRandom
	mov	rax, QWORD PTR ob$4[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR ob$4[rsp]
	call	QWORD PTR [rax+1896]
	test	eax, eax
	je	$LN6@seedRandom

; 242  : 			ParticleObject *obj = static_cast<ParticleObject*>(ob);

	mov	rax, QWORD PTR ob$4[rsp]
	mov	QWORD PTR obj$6[rsp], rax

; 243  : 			IChkMtlAPI* chkMtlAPI = static_cast<IChkMtlAPI*>(obj->GetInterface(I_NEWMTLINTERFACE));

	mov	rax, QWORD PTR obj$6[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 4752				; 00001290H
	mov	rcx, QWORD PTR obj$6[rsp]
	call	QWORD PTR [rax+72]
	mov	QWORD PTR chkMtlAPI$3[rsp], rax

; 244  : 			if ((chkMtlAPI && chkMtlAPI->SupportsParticleIDbyFace())) {

	cmp	QWORD PTR chkMtlAPI$3[rsp], 0
	je	SHORT $LN7@seedRandom
	mov	rax, QWORD PTR chkMtlAPI$3[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR chkMtlAPI$3[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	je	SHORT $LN7@seedRandom

; 245  : 				int id = chkMtlAPI->GetParticleFromFace(sc.FaceNumber());

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+96]
	mov	rcx, QWORD PTR chkMtlAPI$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv168[rsp], rcx
	mov	edx, eax
	mov	rcx, QWORD PTR chkMtlAPI$3[rsp]
	mov	rax, QWORD PTR tv168[rsp]
	call	QWORD PTR [rax+8]
	mov	DWORD PTR id$2[rsp], eax

; 246  : 				seed += id*(id*id*571 + 789221);

	mov	eax, DWORD PTR id$2[rsp]
	imul	eax, DWORD PTR id$2[rsp]
	imul	eax, eax, 571				; 0000023bH
	add	eax, 789221				; 000c0ae5H
	mov	ecx, DWORD PTR id$2[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR seed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR seed$[rsp], eax
$LN7@seedRandom:
$LN6@seedRandom:
$LN5@seedRandom:

; 247  : 			}			
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	seed *= p_seed;

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR seed$[rsp]
	imul	ecx, DWORD PTR [rax+92]
	mov	eax, ecx
	mov	DWORD PTR seed$[rsp], eax

; 252  : 	srand(seed*(seed*seed*15731 + 789221));	

	mov	eax, DWORD PTR seed$[rsp]
	imul	eax, DWORD PTR seed$[rsp]
	imul	eax, eax, 15731				; 00003d73H
	add	eax, 789221				; 000c0ae5H
	mov	ecx, DWORD PTR seed$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	QWORD PTR __imp_srand

; 253  : }

	add	rsp, 104				; 00000068H
	ret	0
?seedRandomGen@BerconXYZ@@AEAAXAEAVShadeContext@@@Z ENDP ; BerconXYZ::seedRandomGen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z
_TEXT	SEGMENT
tv65 = 32
tv250 = 40
tv77 = 48
tv89 = 56
tv247 = 64
tv245 = 72
$T1 = 80
$T2 = 92
$T3 = 104
$T4 = 116
$T5 = 128
$T6 = 140
$T7 = 152
$T8 = 164
$T9 = 176
$T10 = 188
$T11 = 200
$T12 = 212
$T13 = 224
$T14 = 236
$T15 = 248
$T16 = 260
uv$17 = 272
duv$18 = 280
__$ArrayPad$ = 288
this$ = 336
sc$ = 344
p$ = 352
transform$ = 360
flips$ = 368
?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z PROC ; BerconXYZ::get, COMDAT

; 329  : int BerconXYZ::get(ShadeContext& sc, Point3& p, Matrix3 transform, int* flips) {

$LN22:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 330  : 	switch (mappingType) {

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN4@get
	cmp	DWORD PTR tv65[rsp], 1
	je	$LN17@get
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN18@get
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN19@get
	cmp	DWORD PTR tv65[rsp], 4
	je	$LN20@get
	jmp	$LN2@get
$LN4@get:

; 331  : 		case 0:
; 332  : 			p = transform * (sc.UVW(mappingChannel) - OFFSET_5) + OFFSET_5;	

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv89[rsp], rax
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv77[rsp], rax
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv250[rsp], rcx
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rdx+4]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	r9, QWORD PTR tv250[rsp]
	call	QWORD PTR [r9+296]
	mov	rcx, QWORD PTR tv77[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_??GPoint3@@QEBA?AV0@AEBV0@@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rcx, QWORD PTR tv89[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T6[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_??HPoint3@@QEBA?AV0@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 333  : 			if (flips) { if (!tiling(tileX, p.x, flips[0])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN5@get
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+44]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN7@get
	xor	eax, eax
	jmp	$LN1@get
$LN7@get:
	jmp	SHORT $LN6@get
$LN5@get:

; 334  : 			else { if (!tiling(tileX, p.x)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+44]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN8@get
	xor	eax, eax
	jmp	$LN1@get
$LN8@get:
$LN6@get:

; 335  : 			if (flips) { if (!tiling(tileY, p.y, flips[1])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN9@get
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, 4
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+48]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN11@get
	xor	eax, eax
	jmp	$LN1@get
$LN11@get:
	jmp	SHORT $LN10@get
$LN9@get:

; 336  : 			else { if (!tiling(tileY, p.y)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+48]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN12@get
	xor	eax, eax
	jmp	$LN1@get
$LN12@get:
$LN10@get:

; 337  : 			if (flips) { if (!tiling(tileZ, p.z, flips[2])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN13@get
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+52]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN15@get
	xor	eax, eax
	jmp	$LN1@get
$LN15@get:
	jmp	SHORT $LN14@get
$LN13@get:

; 338  : 			else { if (!tiling(tileZ, p.z)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+52]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN16@get
	xor	eax, eax
	jmp	$LN1@get
$LN16@get:
$LN14@get:

; 339  : 			break;

	jmp	$LN2@get
$LN17@get:

; 340  : 		case 1:			
; 341  : 			p = transform * sc.UVW(mappingChannel);			

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	lea	rdx, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+296]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 342  : 			break;

	jmp	$LN2@get
$LN18@get:

; 343  : 		case 2: {
; 344  : 			p = transform * sc.PointTo(sc.P(),REF_OBJECT);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+208]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv247[rsp], rcx
	mov	r9d, 2
	mov	r8, rax
	lea	rdx, QWORD PTR $T10[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR tv247[rsp]
	call	QWORD PTR [rax+416]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 345  : 			break;}

	jmp	$LN2@get
$LN19@get:

; 346  : 		case 3: {
; 347  : 			p = transform * sc.PointTo(sc.P(),REF_WORLD);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+208]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv245[rsp], rcx
	mov	r9d, 1
	mov	r8, rax
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR tv245[rsp]
	call	QWORD PTR [rax+416]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 348  : 			break;}

	jmp	$LN2@get
$LN20@get:

; 349  : 		case 4: {
; 350  : 			Point2 uv, duv;

	lea	rcx, QWORD PTR uv$17[rsp]
	call	QWORD PTR __imp_??0Point2@@QEAA@XZ
	lea	rcx, QWORD PTR duv$18[rsp]
	call	QWORD PTR __imp_??0Point2@@QEAA@XZ

; 351  : 			sc.ScreenUV(uv, duv);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR duv$18[rsp]
	lea	rdx, QWORD PTR uv$17[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+272]

; 352  : 			p = transform * Point3(uv.x, uv.y, 0.f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR uv$17[rsp+4]
	movss	xmm1, DWORD PTR uv$17[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN2@get:

; 353  : 			break;}
; 354  : 		}
; 355  : 	return TRUE;

	mov	eax, 1
$LN1@get:

; 356  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z
_TEXT	SEGMENT
tv65 = 32
tv399 = 40
tv394 = 48
tv402 = 56
tv91 = 64
tv135 = 72
$T1 = 80
$T2 = 92
$T3 = 104
$T4 = 116
$T5 = 128
$T6 = 140
$T7 = 152
$T8 = 164
$T9 = 176
$T10 = 188
$T11 = 200
$T12 = 212
$T13 = 224
$T14 = 236
$T15 = 248
$T16 = 260
$T17 = 272
$T18 = 284
$T19 = 296
$T20 = 308
$T21 = 320
$T22 = 332
$T23 = 344
$T24 = 356
$T25 = 368
$T26 = 380
$T27 = 392
$T28 = 404
$T29 = 416
$T30 = 428
$T31 = 440
$T32 = 452
$T33 = 464
uv$34 = 480
duv$35 = 488
duvw$36 = 496
__$ArrayPad$ = 512
this$ = 560
sc$ = 568
p$ = 576
dpdx$ = 584
dpdy$ = 592
transform$ = 600
flips$ = 608
?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z PROC ; BerconXYZ::get, COMDAT

; 283  : int BerconXYZ::get(ShadeContext& sc, Point3& p, Point3& dpdx, Point3& dpdy, Matrix3 transform, int* flips) {

$LN23:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 284  : 	switch (mappingType) {

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	jl	$LN2@get
	cmp	DWORD PTR tv65[rsp], 1
	jle	SHORT $LN4@get
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN19@get
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN20@get
	cmp	DWORD PTR tv65[rsp], 4
	je	$LN21@get
	jmp	$LN2@get
$LN4@get:

; 285  : 		case 0:
; 286  : 		case 1:
; 287  : 			if (mappingType)

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN5@get

; 288  : 				p = transform * sc.UVW(mappingChannel);			

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+296]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 289  : 			else

	jmp	$LN6@get
$LN5@get:

; 290  : 				p = transform * (sc.UVW(mappingChannel) - OFFSET_5) + OFFSET_5;

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T6[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv135[rsp], rax
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T7[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv91[rsp], rax
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv402[rsp], rcx
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rdx+4]
	lea	rdx, QWORD PTR $T8[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rdi, QWORD PTR tv402[rsp]
	call	QWORD PTR [rdi+296]
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_??GPoint3@@QEBA?AV0@AEBV0@@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rcx, QWORD PTR tv135[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T11[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_??HPoint3@@QEBA?AV0@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN6@get:

; 291  : 			{
; 292  : 			Point3 duvw = VectorTransform(transform, sc.DUVW(mappingChannel));

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+304]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR duvw$36[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z

; 293  : 			dpdx = Point3(duvw.x, 0.f, 0.f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR duvw$36[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rdi, QWORD PTR dpdx$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 294  : 			dpdy = Point3(0.f, duvw.y, 0.f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR duvw$36[rsp+4]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T14[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rdi, QWORD PTR dpdy$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 295  : 			}
; 296  : 			if (flips) { if (!tiling(tileX, p.x, flips[0])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN7@get
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+44]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN9@get
	xor	eax, eax
	jmp	$LN1@get
$LN9@get:
	jmp	SHORT $LN8@get
$LN7@get:

; 297  : 			else { if (!tiling(tileX, p.x)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+44]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN10@get
	xor	eax, eax
	jmp	$LN1@get
$LN10@get:
$LN8@get:

; 298  : 			if (flips) { if (!tiling(tileY, p.y, flips[1])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN11@get
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, 4
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+48]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN13@get
	xor	eax, eax
	jmp	$LN1@get
$LN13@get:
	jmp	SHORT $LN12@get
$LN11@get:

; 299  : 			else { if (!tiling(tileY, p.y)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+48]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN14@get
	xor	eax, eax
	jmp	$LN1@get
$LN14@get:
$LN12@get:

; 300  : 			if (flips) { if (!tiling(tileZ, p.z, flips[2])) return FALSE; }

	cmp	QWORD PTR flips$[rsp], 0
	je	SHORT $LN15@get
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR flips$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+52]
	call	?tiling@@YAHHAEAMAEAH@Z			; tiling
	test	eax, eax
	jne	SHORT $LN17@get
	xor	eax, eax
	jmp	$LN1@get
$LN17@get:
	jmp	SHORT $LN16@get
$LN15@get:

; 301  : 			else { if (!tiling(tileZ, p.z)) return FALSE; }

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rax+52]
	call	?tiling@@YAHHAEAM@Z			; tiling
	test	eax, eax
	jne	SHORT $LN18@get
	xor	eax, eax
	jmp	$LN1@get
$LN18@get:
$LN16@get:

; 302  : 			break;

	jmp	$LN2@get
$LN19@get:

; 303  : 		case 2: {
; 304  : 			p = transform * sc.PointTo(sc.P(),REF_OBJECT);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR $T15[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+208]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv399[rsp], rcx
	mov	r9d, 2
	mov	r8, rax
	lea	rdx, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR tv399[rsp]
	call	QWORD PTR [rax+416]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 305  : 			sc.DP(dpdx, dpdy);	

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR dpdy$[rsp]
	mov	rdx, QWORD PTR dpdx$[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+216]

; 306  : 			dpdx = VectorTransform(transform, sc.VectorTo(dpdx, REF_OBJECT));

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 2
	mov	r8, QWORD PTR dpdx$[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+432]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdx$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 307  : 			dpdy = VectorTransform(transform, sc.VectorTo(dpdy, REF_OBJECT));

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 2
	mov	r8, QWORD PTR dpdy$[rsp]
	lea	rdx, QWORD PTR $T20[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+432]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdy$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 308  : 			break;}

	jmp	$LN2@get
$LN20@get:

; 309  : 		case 3: {
; 310  : 			p = transform * sc.PointTo(sc.P(),REF_WORLD);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR $T22[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+208]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv394[rsp], rcx
	mov	r9d, 1
	mov	r8, rax
	lea	rdx, QWORD PTR $T23[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR tv394[rsp]
	call	QWORD PTR [rax+416]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 311  : 			sc.DP(dpdx, dpdy);	

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR dpdy$[rsp]
	mov	rdx, QWORD PTR dpdx$[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+216]

; 312  : 			dpdx = VectorTransform(transform, sc.VectorTo(dpdx, REF_WORLD));

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 1
	mov	r8, QWORD PTR dpdx$[rsp]
	lea	rdx, QWORD PTR $T25[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+432]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdx$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 313  : 			dpdy = VectorTransform(transform, sc.VectorTo(dpdy, REF_WORLD));

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 1
	mov	r8, QWORD PTR dpdy$[rsp]
	lea	rdx, QWORD PTR $T27[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+432]
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdy$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 314  : 			break;}

	jmp	$LN2@get
$LN21@get:

; 315  : 		case 4: {
; 316  : 			Point2 uv, duv;

	lea	rcx, QWORD PTR uv$34[rsp]
	call	QWORD PTR __imp_??0Point2@@QEAA@XZ
	lea	rcx, QWORD PTR duv$35[rsp]
	call	QWORD PTR __imp_??0Point2@@QEAA@XZ

; 317  : 			sc.ScreenUV(uv, duv);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR duv$35[rsp]
	lea	rdx, QWORD PTR uv$34[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+272]

; 318  : 			p = transform * Point3(uv.x, uv.y, 0.f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR uv$34[rsp+4]
	movss	xmm1, DWORD PTR uv$34[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	QWORD PTR __imp_??D@YA?AVPoint3@@AEBVMatrix3@@AEBV0@@Z
	mov	rdi, QWORD PTR p$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 319  : 			dpdx = VectorTransform(transform, Point3(duv.x, 0.f, 0.f));

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR duv$35[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdx$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 320  : 			dpdy = VectorTransform(transform, Point3(0.f, duv.y, 0.f));

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR duv$35[rsp+4]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T33[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	r8, rax
	mov	rdx, QWORD PTR transform$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	rdi, QWORD PTR dpdy$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN2@get:

; 321  : 			break;}
; 322  : 	}
; 323  : 
; 324  : 	dpdx = dpdx * filtering; dpdy = dpdy * filtering;

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+108]
	mov	rdx, QWORD PTR dpdx$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdi, QWORD PTR dpdx$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+108]
	mov	rdx, QWORD PTR dpdy$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??D@YA?AVPoint3@@AEBV0@M@Z		; operator*
	mov	rdi, QWORD PTR dpdy$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 325  : 	
; 326  : 	return TRUE;

	mov	eax, 1
$LN1@get:

; 327  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z
_TEXT	SEGMENT
i$1 = 48
tv81 = 56
tv217 = 64
$T2 = 72
$T3 = 80
tv351 = 88
$T4 = 96
$T5 = 108
$T6 = 120
$T7 = 132
$T8 = 144
$T9 = 156
$T10 = 168
$T11 = 184
$T12 = 240
$T13 = 304
$T14 = 368
$T15 = 432
$T16 = 496
$T17 = 552
inv$18 = 608
transform$19 = 664
transform$20 = 720
dp$21 = 776
__$ArrayPad$ = 816
this$ = 864
sc$ = 872
p$ = 880
basis$ = 888
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z PROC ; BerconXYZ::get, COMDAT

; 412  : int BerconXYZ::get(ShadeContext& sc, Point3& p, Point3* basis) {

$LN20:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 840				; 00000348H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 413  : 	/*int* flips = NULL;
; 414  : 	if (mappingType == 0) {
; 415  : 		flips = new int[3];
; 416  : 		flips[0]=0;flips[1]=0;flips[2]=0;
; 417  : 	}*/
; 418  : 
; 419  : 	/*CharStream* out = thread_local(current_stdout);
; 420  : 	out->printf(_T("Val: %d\n"), mappingChannel);*/
; 421  : 
; 422  : 	if ((mappingType == 0 || mappingType == 1) && mode2D) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN7@get
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	$LN5@get
$LN7@get:
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+260], 0
	je	$LN5@get

; 423  : 		Matrix3 inv;

	lea	rcx, QWORD PTR inv$18[rsp]
	call	??0Matrix3@@QEAA@XZ			; Matrix3::Matrix3

; 424  : 		Matrix3 transform = variance ? random(sc, &inv) : tm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN16@get
	lea	r9, QWORD PTR inv$18[rsp]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN17@get
$LN16@get:
	lea	rax, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv81[rsp], rax
$LN17@get:
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rax, QWORD PTR transform$19[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T2[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb

; 425  : 		if (!variance) inv = invNoScaleTm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	jne	SHORT $LN8@get
	lea	rax, QWORD PTR inv$18[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+208]
	mov	ecx, 52					; 00000034H
	rep movsb
$LN8@get:

; 426  : 
; 427  : 		if (!get(sc, p, transform)) { return FALSE; }

	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR transform$19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR $T12[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z ; BerconXYZ::get
	test	eax, eax
	jne	SHORT $LN9@get
	xor	eax, eax
	jmp	$LN1@get
$LN9@get:

; 428  : 		Point3 dp[3];

	mov	r9, QWORD PTR __imp_??0Point3@@QEAA@XZ
	mov	r8d, 3
	mov	edx, 12
	lea	rcx, QWORD PTR dp$21[rsp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 429  : 
; 430  : 		if (sc.BumpBasisVectors(dp, AXIS_UV, mappingChannel)) {

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r9d, DWORD PTR [rcx+4]
	xor	r8d, r8d
	lea	rdx, QWORD PTR dp$21[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+320]
	test	eax, eax
	je	$LN10@get

; 431  : 			basis[0] = VectorTransform(inv, dp[0]);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 432  : 			basis[1] = VectorTransform(inv, dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 433  : 			basis[2] = VectorTransform(inv, dp[0] ^ dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR dp$21[rsp+rcx]
	mov	r8, rax
	lea	rdx, QWORD PTR $T6[rsp]
	call	QWORD PTR __imp_??TPoint3@@QEBA?AV0@AEBV0@@Z
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 434  : 		}
; 435  : 		else {

	jmp	$LN11@get
$LN10@get:

; 436  : 			sc.DPdUVW(dp, mappingChannel);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	lea	rdx, QWORD PTR dp$21[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+312]

; 437  : 			transform.Invert();

	lea	rcx, QWORD PTR transform$19[rsp]
	call	QWORD PTR __imp_?Invert@Matrix3@@QEAAXXZ

; 438  : 			basis[0] = VectorTransform(inv, dp[0]);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 439  : 			basis[1] = VectorTransform(inv, dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 440  : 			basis[2] = VectorTransform(inv, dp[2]);

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN11@get:

; 441  : 		}
; 442  : 
; 443  : 	}
; 444  : 	else {

	jmp	$LN6@get
$LN5@get:

; 445  : 		Matrix3 transform = variance ? random(sc) : tm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN18@get
	xor	r9d, r9d
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv217[rsp], rax
	jmp	SHORT $LN19@get
$LN18@get:
	lea	rax, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR tv217[rsp], rax
$LN19@get:
	mov	rax, QWORD PTR tv217[rsp]
	mov	QWORD PTR $T3[rsp], rax
	lea	rax, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T3[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb

; 446  : 		if (!get(sc, p, transform)) { return FALSE; }

	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR $T14[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z ; BerconXYZ::get
	test	eax, eax
	jne	SHORT $LN12@get
	xor	eax, eax
	jmp	$LN1@get
$LN12@get:

; 447  : 		if (variance)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN13@get

; 448  : 			getBasis(transform, basis);

	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	r8, QWORD PTR basis$[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z ; BerconXYZ::getBasis

; 449  : 		else

	jmp	SHORT $LN14@get
$LN13@get:

; 450  : 			for (int i = 0; i < 3; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@get
$LN2@get:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@get:
	cmp	DWORD PTR i$1[rsp], 3
	jge	SHORT $LN3@get

; 451  : 				basis[i] = b[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 12
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR basis$[rsp]
	mov	rdi, QWORD PTR this$[rsp]
	mov	QWORD PTR tv351[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv351[rsp]
	lea	rsi, QWORD PTR [rcx+rax+120]
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@get
$LN3@get:
$LN14@get:
$LN6@get:

; 452  : 	}
; 453  : 
; 454  : 	/*if (flips) {
; 455  : 		if (flips[0]) basis[0] *= -1;
; 456  : 		if (flips[1]) basis[1] *= -1;
; 457  : 		if (flips[2]) basis[2] *= -1;
; 458  : 	}
; 459  : 	delete[] flips;*/
; 460  : 
; 461  : 	return TRUE;

	mov	eax, 1
$LN1@get:

; 462  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 840				; 00000348H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@PEAV3@@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z
_TEXT	SEGMENT
tv77 = 48
$T1 = 56
$T2 = 112
$T3 = 176
this$ = 272
sc$ = 280
p$ = 288
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z PROC ; BerconXYZ::get, COMDAT

; 362  : int BerconXYZ::get(ShadeContext& sc, Point3& p) {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H

; 363  : 	return get(sc, p, variance?random(sc):tm);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN3@get
	xor	r9d, r9d
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv77[rsp], rax
	jmp	SHORT $LN4@get
$LN3@get:
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv77[rsp], rax
$LN4@get:
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv77[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR $T2[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@VMatrix3@@PEAH@Z ; BerconXYZ::get

; 364  : }

	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z
_TEXT	SEGMENT
i$1 = 64
tv81 = 72
tv219 = 80
$T2 = 88
$T3 = 96
tv359 = 104
$T4 = 112
$T5 = 124
$T6 = 136
$T7 = 148
$T8 = 160
$T9 = 172
$T10 = 184
$T11 = 200
$T12 = 256
$T13 = 320
$T14 = 384
$T15 = 448
$T16 = 512
$T17 = 568
inv$18 = 624
transform$19 = 680
transform$20 = 736
dp$21 = 792
__$ArrayPad$ = 832
this$ = 880
sc$ = 888
p$ = 896
dpdx$ = 904
dpdy$ = 912
basis$ = 920
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z PROC ; BerconXYZ::get, COMDAT

; 366  : int BerconXYZ::get(ShadeContext& sc, Point3& p, Point3& dpdx, Point3& dpdy, Point3* basis) {

$LN20:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 856				; 00000358H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 367  : 	/*int* flips = NULL;
; 368  : 	if (mappingType == 0) {
; 369  : 		flips = new int[3];
; 370  : 		flips[0]=0;flips[1]=0;flips[2]=0;
; 371  : 	}*/
; 372  : 
; 373  : 	if ((mappingType == 0 || mappingType == 1) && mode2D) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN7@get
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	$LN5@get
$LN7@get:
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+260], 0
	je	$LN5@get

; 374  : 		Matrix3 inv;

	lea	rcx, QWORD PTR inv$18[rsp]
	call	??0Matrix3@@QEAA@XZ			; Matrix3::Matrix3

; 375  : 		Matrix3 transform = variance?random(sc, &inv):tm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN16@get
	lea	r9, QWORD PTR inv$18[rsp]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN17@get
$LN16@get:
	lea	rax, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv81[rsp], rax
$LN17@get:
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rax, QWORD PTR transform$19[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T2[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb

; 376  : 		if (!variance) inv = invNoScaleTm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	jne	SHORT $LN8@get
	lea	rax, QWORD PTR inv$18[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+208]
	mov	ecx, 52					; 00000034H
	rep movsb
$LN8@get:

; 377  : 		
; 378  : 		if (!get(sc, p, dpdx, dpdy, transform)) {return FALSE;}

	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR transform$19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+48], 0
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR dpdy$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dpdx$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z ; BerconXYZ::get
	test	eax, eax
	jne	SHORT $LN9@get
	xor	eax, eax
	jmp	$LN1@get
$LN9@get:

; 379  : 		Point3 dp[3];				

	mov	r9, QWORD PTR __imp_??0Point3@@QEAA@XZ
	mov	r8d, 3
	mov	edx, 12
	lea	rcx, QWORD PTR dp$21[rsp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 380  : 				 
; 381  : 		if (sc.BumpBasisVectors(dp, AXIS_UV, mappingChannel)) {

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r9d, DWORD PTR [rcx+4]
	xor	r8d, r8d
	lea	rdx, QWORD PTR dp$21[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+320]
	test	eax, eax
	je	$LN10@get

; 382  : 			basis[0] = VectorTransform(inv, dp[0]);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 383  : 			basis[1] = VectorTransform(inv, dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 384  : 			basis[2] = VectorTransform(inv, dp[0]^dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR dp$21[rsp+rcx]
	mov	r8, rax
	lea	rdx, QWORD PTR $T6[rsp]
	call	QWORD PTR __imp_??TPoint3@@QEBA?AV0@AEBV0@@Z
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 385  : 		} else {

	jmp	$LN11@get
$LN10@get:

; 386  : 			sc.DPdUVW(dp, mappingChannel);

	mov	rax, QWORD PTR sc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	lea	rdx, QWORD PTR dp$21[rsp]
	mov	rcx, QWORD PTR sc$[rsp]
	call	QWORD PTR [rax+312]

; 387  : 			transform.Invert();

	lea	rcx, QWORD PTR transform$19[rsp]
	call	QWORD PTR __imp_?Invert@Matrix3@@QEAAXXZ

; 388  : 			basis[0] = VectorTransform(inv, dp[0]);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 389  : 			basis[1] = VectorTransform(inv, dp[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 390  : 			basis[2] = VectorTransform(inv, dp[2]);			

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR dp$21[rsp+rax]
	mov	r8, rax
	lea	rdx, QWORD PTR inv$18[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	QWORD PTR __imp_?VectorTransform@@YA?AVPoint3@@AEBVMatrix3@@AEBV1@@Z
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR basis$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN11@get:

; 391  : 		 }		
; 392  : 	} else {	

	jmp	$LN6@get
$LN5@get:

; 393  : 		Matrix3 transform = variance?random(sc):tm;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN18@get
	xor	r9d, r9d
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv219[rsp], rax
	jmp	SHORT $LN19@get
$LN18@get:
	lea	rax, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR tv219[rsp], rax
$LN19@get:
	mov	rax, QWORD PTR tv219[rsp]
	mov	QWORD PTR $T3[rsp], rax
	lea	rax, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T3[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb

; 394  : 		if (!get(sc, p, dpdx, dpdy, transform)) {return FALSE;}

	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+48], 0
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR dpdy$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dpdx$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z ; BerconXYZ::get
	test	eax, eax
	jne	SHORT $LN12@get
	xor	eax, eax
	jmp	$LN1@get
$LN12@get:

; 395  : 		if (variance)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN13@get

; 396  : 			getBasis(transform, basis);

	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR transform$20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	r8, QWORD PTR basis$[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z ; BerconXYZ::getBasis

; 397  : 		else

	jmp	SHORT $LN14@get
$LN13@get:

; 398  : 			for (int i=0; i<3; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@get
$LN2@get:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@get:
	cmp	DWORD PTR i$1[rsp], 3
	jge	SHORT $LN3@get

; 399  : 				basis[i] = b[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 12
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR basis$[rsp]
	mov	rdi, QWORD PTR this$[rsp]
	mov	QWORD PTR tv359[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv359[rsp]
	lea	rsi, QWORD PTR [rcx+rax+120]
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@get
$LN3@get:
$LN14@get:
$LN6@get:

; 400  : 	}
; 401  : 
; 402  : 	/*if (flips) {
; 403  : 		if (flips[0]) basis[0] *= -1;
; 404  : 		if (flips[1]) basis[1] *= -1;
; 405  : 		if (flips[2]) basis[2] *= -1;
; 406  : 	}
; 407  : 	delete[] flips;*/
; 408  : 
; 409  : 	return TRUE;

	mov	eax, 1
$LN1@get:

; 410  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 856				; 00000358H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11PEAV3@@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z
_TEXT	SEGMENT
tv77 = 64
$T1 = 72
$T2 = 128
$T3 = 192
this$ = 288
sc$ = 296
p$ = 304
dpdx$ = 312
dpdy$ = 320
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z PROC ; BerconXYZ::get, COMDAT

; 358  : int BerconXYZ::get(ShadeContext& sc, Point3& p, Point3& dpdx, Point3& dpdy) {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H

; 359  : 	return get(sc, p, dpdx, dpdy, variance?random(sc):tm);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+116]
	test	eax, eax
	je	SHORT $LN3@get
	xor	r9d, r9d
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?random@BerconXYZ@@AEAA?AVMatrix3@@AEAVShadeContext@@PEAV2@@Z ; BerconXYZ::random
	mov	QWORD PTR tv77[rsp], rax
	jmp	SHORT $LN4@get
$LN3@get:
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv77[rsp], rax
$LN4@get:
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv77[rsp]
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	QWORD PTR [rsp+48], 0
	lea	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR dpdy$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dpdx$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR sc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?get@BerconXYZ@@AEAAHAEAVShadeContext@@AEAVPoint3@@11VMatrix3@@PEAH@Z ; BerconXYZ::get

; 360  : }

	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?get@BerconXYZ@@QEAAHAEAVShadeContext@@AEAVPoint3@@11@Z ENDP ; BerconXYZ::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.h
;	COMDAT ?isRealworld@BerconXYZ@@QEAAHXZ
_TEXT	SEGMENT
tv68 = 0
this$ = 32
?isRealworld@BerconXYZ@@QEAAHXZ PROC			; BerconXYZ::isRealworld, COMDAT

; 333  : 	int isRealworld() { return mappingType == 0 || mappingType == 4 ? 0 : 1; }

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN3@isRealworl
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 4
	je	SHORT $LN3@isRealworl
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@isRealworl
$LN3@isRealworl:
	mov	DWORD PTR tv68[rsp], 0
$LN4@isRealworl:
	mov	eax, DWORD PTR tv68[rsp]
	add	rsp, 24
	ret	0
?isRealworld@BerconXYZ@@QEAAHXZ ENDP			; BerconXYZ::isRealworld
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z
_TEXT	SEGMENT
t$ = 48
tv67 = 56
this$ = 80
pblock$ = 88
ivalid$ = 96
type$ = 104
x$ = 112
y$ = 120
z$ = 128
?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z PROC ; BerconXYZ::reset, COMDAT

; 40   : void BerconXYZ::reset(IParamBlock2* pblock, Interval& ivalid, int type, int x, int y, int z) {

$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 41   : 	if (!pblock) return;

	cmp	QWORD PTR pblock$[rsp], 0
	jne	SHORT $LN2@reset
	jmp	$LN1@reset
$LN2@reset:

; 42   : 	//if (!pblock->GetMap()) return;
; 43   : 
; 44   : 	TimeValue t = GetCOREInterface()->GetTime();

	call	QWORD PTR __imp_?GetCOREInterface@@YAPEAVInterface@@XZ
	mov	QWORD PTR tv67[rsp], rax
	mov	rax, QWORD PTR tv67[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv67[rsp]
	call	QWORD PTR [rax+1448]
	mov	DWORD PTR t$[rsp], eax

; 45   : 
; 46   : 	pblockSetValue(xyz_offset_x, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 2
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 47   : 	pblockSetValue(xyz_offset_y, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 3
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 48   : 	pblockSetValue(xyz_offset_z, 0.f);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 4
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 49   : 	pblockSetValue(xyz_size_x, 1.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 5
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 50   : 	pblockSetValue(xyz_size_y, 1.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 6
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 51   : 	pblockSetValue(xyz_size_z, 1.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 7
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 52   : 	pblockSetValue(xyz_angle_x, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 8
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 53   : 	pblockSetValue(xyz_angle_y, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 9
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 54   : 	pblockSetValue(xyz_angle_z, 0.f);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 10
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 55   : 
; 56   : 	pblockSetValue(xyz_offset_x2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 14
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 57   : 	pblockSetValue(xyz_offset_y2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 15
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 58   : 	pblockSetValue(xyz_offset_z2, 0.f);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 16
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 59   : 	pblockSetValue(xyz_size_x2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 17
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 60   : 	pblockSetValue(xyz_size_y2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 18
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 61   : 	pblockSetValue(xyz_size_z2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 19
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 62   : 	pblockSetValue(xyz_angle_x2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 20
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 63   : 	pblockSetValue(xyz_angle_y2, 0.f);	

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 21
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 64   : 	pblockSetValue(xyz_angle_z2, 0.f);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 22
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 65   : 
; 66   : 	pblockSetValue(xyz_tile_x, x);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 11
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 67   : 	pblockSetValue(xyz_tile_y, y);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 12
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 68   : 	pblockSetValue(xyz_tile_z, z);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR z$[rsp]
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 13
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 69   : 
; 70   : 	pblockSetValue(xyz_seed, 12345);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 12345				; 00003039H
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 23
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 71   : 	pblockSetValue(xyz_rand_obj, TRUE);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 25
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 72   : 	pblockSetValue(xyz_rand_mat, FALSE);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 24
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 73   : 	pblockSetValue(xyz_rand_par, FALSE);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 26
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 74   : 
; 75   : 	pblockSetValue(xyz_map, type);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR type$[rsp]
	mov	r8d, DWORD PTR t$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 76   : 	pblockSetValue(xyz_chan, 1);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 1
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 77   : 
; 78   : 	pblockSetValue(xyz_lock, TRUE);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 27
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1576]

; 79   : 
; 80   : 	pblockSetValue(xyz_filtering, 1.f);

	mov	rax, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 28
	mov	rcx, QWORD PTR pblock$[rsp]
	call	QWORD PTR [rax+1584]

; 81   : 
; 82   : 	ivalid.SetEmpty();	

	mov	rcx, QWORD PTR ivalid$[rsp]
	call	?SetEmpty@Interval@@QEAAXXZ		; Interval::SetEmpty
$LN1@reset:

; 83   : }

	add	rsp, 72					; 00000048H
	ret	0
?reset@BerconXYZ@@QEAAXPEAVIParamBlock2@@AEAVInterval@@HHHH@Z ENDP ; BerconXYZ::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?update@BerconXYZ@@QEAAXXZ
_TEXT	SEGMENT
tv165 = 32
tv138 = 36
$T1 = 40
$T2 = 52
$T3 = 64
this$ = 160
?update@BerconXYZ@@QEAAXXZ PROC				; BerconXYZ::update, COMDAT

; 178  : void BerconXYZ::update() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H

; 179  : 	tm.IdentityMatrix();

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 156				; 0000009cH
	mov	rcx, rax
	call	QWORD PTR __imp_?IdentityMatrix@Matrix3@@QEAAXXZ

; 180  : 	tm.Translate(Point3(offX, offY, offZ));

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm3, DWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 156				; 0000009cH
	mov	rdx, rax
	call	QWORD PTR __imp_?Translate@Matrix3@@QEAAXAEBVPoint3@@@Z

; 181  :  	tm.RotateX(angX);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 156				; 0000009cH
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rcx+32]
	mov	rcx, rax
	call	QWORD PTR __imp_?RotateX@Matrix3@@QEAAXM@Z

; 182  : 	tm.RotateY(angY);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 156				; 0000009cH
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rcx+36]
	mov	rcx, rax
	call	QWORD PTR __imp_?RotateY@Matrix3@@QEAAXM@Z

; 183  : 	tm.RotateZ(angZ);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 156				; 0000009cH
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rcx+40]
	mov	rcx, rax
	call	QWORD PTR __imp_?RotateZ@Matrix3@@QEAAXM@Z

; 184  : 
; 185  : 	invNoScaleTm = tm;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+208]
	lea	rsi, QWORD PTR [rcx+156]
	mov	ecx, 52					; 00000034H
	rep movsb

; 186  : 	invNoScaleTm.Invert();

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 208				; 000000d0H
	mov	rcx, rax
	call	QWORD PTR __imp_?Invert@Matrix3@@QEAAXXZ

; 187  : 
; 188  : 	tm.Scale(Point3(1.f/sizeX, 1.f/sizeY, 1.f/sizeZ));

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [rax+28]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [rax+24]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR [rax+20]
	movss	DWORD PTR tv138[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv138[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 156				; 0000009cH
	xor	r8d, r8d
	mov	rdx, rax
	call	QWORD PTR __imp_?Scale@Matrix3@@QEAAXAEBVPoint3@@H@Z

; 189  : 
; 190  : 	getBasis(tm, b);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 120				; 00000078H
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+156]
	mov	ecx, 52					; 00000034H
	rep movsb
	mov	r8, rax
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?getBasis@BerconXYZ@@AEAAXVMatrix3@@PEAVPoint3@@@Z ; BerconXYZ::getBasis

; 191  : 	
; 192  : 	variance = NZERO(offX2) || NZERO(offY2) || NZERO(offZ2) || NZERO(sizeX2) || NZERO(sizeY2) || NZERO(sizeZ2) || NZERO(angX2) || NZERO(angY2) || NZERO(angZ2);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+56]
	jb	$LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+60]
	jb	$LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+64]
	jb	$LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+68]
	jb	SHORT $LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+72]
	jb	SHORT $LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+76]
	jb	SHORT $LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+80]
	jb	SHORT $LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+84]
	jb	SHORT $LN3@update
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [rax+88]
	jb	SHORT $LN3@update
	mov	DWORD PTR tv165[rsp], 0
	jmp	SHORT $LN4@update
$LN3@update:
	mov	DWORD PTR tv165[rsp], 1
$LN4@update:
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR tv165[rsp]
	mov	BYTE PTR [rax+116], cl

; 193  : }

	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?update@BerconXYZ@@QEAAXXZ ENDP				; BerconXYZ::update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z
_TEXT	SEGMENT
tv408 = 48
tv407 = 56
tv406 = 64
tv405 = 72
tv404 = 80
tv403 = 88
tv402 = 96
tv401 = 104
tv400 = 112
tv399 = 120
tv398 = 128
tv397 = 136
tv396 = 144
tv395 = 152
tv394 = 160
tv393 = 168
tv392 = 176
tv391 = 184
tv390 = 192
tv389 = 200
tv388 = 208
tv387 = 216
tv386 = 224
tv385 = 232
tv384 = 240
tv383 = 248
tv382 = 256
tv381 = 264
tv380 = 272
this$ = 304
pblock$ = 312
t$ = 320
ivalid$ = 328
?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z PROC ; BerconXYZ::update, COMDAT

; 85   : void BerconXYZ::update(IParamBlock2* pblock, TimeValue t, Interval& ivalid) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H

; 86   : 	if (!pblock) return;

	cmp	QWORD PTR pblock$[rsp], 0
	jne	SHORT $LN2@update
	jmp	$LN1@update
$LN2@update:

; 87   : 	//if (!pblock->GetMap()) return;
; 88   : 
; 89   : 	pblockGetValue(xyz_offset_x, offX);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv408[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 2
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv408[rsp]
	call	QWORD PTR [rax+1712]

; 90   : 	pblockGetValue(xyz_offset_y, offY);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 12
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv407[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 3
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv407[rsp]
	call	QWORD PTR [rax+1712]

; 91   : 	pblockGetValue(xyz_offset_z, offZ);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv406[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 4
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv406[rsp]
	call	QWORD PTR [rax+1712]

; 92   : 	pblockGetValue(xyz_size_x, sizeX);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 20
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv405[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 5
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv405[rsp]
	call	QWORD PTR [rax+1712]

; 93   : 	pblockGetValue(xyz_size_y, sizeY);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 24
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv404[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 6
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv404[rsp]
	call	QWORD PTR [rax+1712]

; 94   : 	pblockGetValue(xyz_size_z, sizeZ);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 28
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv403[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 7
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv403[rsp]
	call	QWORD PTR [rax+1712]

; 95   : 	pblockGetValue(xyz_angle_x, angX);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv402[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 8
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv402[rsp]
	call	QWORD PTR [rax+1712]

; 96   : 	pblockGetValue(xyz_angle_y, angY);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 36					; 00000024H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv401[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 9
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv401[rsp]
	call	QWORD PTR [rax+1712]

; 97   : 	pblockGetValue(xyz_angle_z, angZ);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv400[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 10
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv400[rsp]
	call	QWORD PTR [rax+1712]

; 98   : 
; 99   : 	pblockGetValue(xyz_offset_x2, offX2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv399[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 14
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv399[rsp]
	call	QWORD PTR [rax+1712]

; 100  : 	pblockGetValue(xyz_offset_y2, offY2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 60					; 0000003cH
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv398[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 15
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv398[rsp]
	call	QWORD PTR [rax+1712]

; 101  : 	pblockGetValue(xyz_offset_z2, offZ2);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv397[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 16
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv397[rsp]
	call	QWORD PTR [rax+1712]

; 102  : 	pblockGetValue(xyz_size_x2, sizeX2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 68					; 00000044H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv396[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 17
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv396[rsp]
	call	QWORD PTR [rax+1712]

; 103  : 	pblockGetValue(xyz_size_y2, sizeY2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 72					; 00000048H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv395[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 18
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv395[rsp]
	call	QWORD PTR [rax+1712]

; 104  : 	pblockGetValue(xyz_size_z2, sizeZ2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 76					; 0000004cH
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv394[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 19
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv394[rsp]
	call	QWORD PTR [rax+1712]

; 105  : 	pblockGetValue(xyz_angle_x2, angX2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv393[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 20
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv393[rsp]
	call	QWORD PTR [rax+1712]

; 106  : 	pblockGetValue(xyz_angle_y2, angY2);	

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 84					; 00000054H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv392[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 21
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv392[rsp]
	call	QWORD PTR [rax+1712]

; 107  : 	pblockGetValue(xyz_angle_z2, angZ2);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 88					; 00000058H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv391[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 22
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv391[rsp]
	call	QWORD PTR [rax+1712]

; 108  : 
; 109  : 	pblockGetValue(xyz_tile_x, tileX);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 44					; 0000002cH
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv390[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 11
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv390[rsp]
	call	QWORD PTR [rax+1704]

; 110  : 	pblockGetValue(xyz_tile_y, tileY);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv389[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 12
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv389[rsp]
	call	QWORD PTR [rax+1704]

; 111  : 	pblockGetValue(xyz_tile_z, tileZ);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv388[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 13
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv388[rsp]
	call	QWORD PTR [rax+1704]

; 112  : 
; 113  : 	pblockGetValue(xyz_seed, p_seed);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 92					; 0000005cH
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv387[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 23
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv387[rsp]
	call	QWORD PTR [rax+1704]

; 114  : 	pblockGetValue(xyz_rand_obj, p_randObj);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 96					; 00000060H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv386[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 25
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv386[rsp]
	call	QWORD PTR [rax+1704]

; 115  : 	pblockGetValue(xyz_rand_mat, p_randMat);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 100				; 00000064H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv385[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 24
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv385[rsp]
	call	QWORD PTR [rax+1704]

; 116  : 	pblockGetValue(xyz_rand_par, p_randPar);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 104				; 00000068H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv384[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 26
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv384[rsp]
	call	QWORD PTR [rax+1704]

; 117  : 
; 118  : 	pblockGetValue(xyz_map, mappingType);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv383[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv383[rsp]
	call	QWORD PTR [rax+1704]

; 119  : 	pblockGetValue(xyz_chan, mappingChannel);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv382[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 1
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv382[rsp]
	call	QWORD PTR [rax+1704]

; 120  : 
; 121  : 	pblockGetValue(xyz_lock, lock);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 112				; 00000070H
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv381[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 27
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv381[rsp]
	call	QWORD PTR [rax+1704]

; 122  : 
; 123  : 	pblockGetValue(xyz_filtering, filtering);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 108				; 0000006cH
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv380[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	rdx, QWORD PTR ivalid$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8d, DWORD PTR t$[rsp]
	mov	dx, 28
	mov	rcx, QWORD PTR pblock$[rsp]
	mov	rax, QWORD PTR tv380[rsp]
	call	QWORD PTR [rax+1712]

; 124  : 	
; 125  : 
; 126  : 	angX *= DEG_TO_RAD; angY *= DEG_TO_RAD; angZ *= DEG_TO_RAD;

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+32]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+36]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+36], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+40]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+40], xmm0

; 127  : 	angX2 *= DEG_TO_RAD; angY2 *= DEG_TO_RAD; angZ2 *= DEG_TO_RAD;

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+80]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+80], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+84]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+84], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+88]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+88], xmm0

; 128  : 
; 129  : 	EnableStuff(pblock, t);

	mov	r8d, DWORD PTR t$[rsp]
	mov	rdx, QWORD PTR pblock$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?EnableStuff@BerconXYZ@@AEAAXPEAVIParamBlock2@@H@Z ; BerconXYZ::EnableStuff

; 130  : 	update();

	mov	rcx, QWORD PTR this$[rsp]
	call	?update@BerconXYZ@@QEAAXXZ		; BerconXYZ::update
$LN1@update:

; 131  : }

	add	rsp, 296				; 00000128H
	ret	0
?update@BerconXYZ@@QEAAXPEAVIParamBlock2@@HAEAVInterval@@@Z ENDP ; BerconXYZ::update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.h
;	COMDAT ??__Eintvalid@@YAXXZ
text$di	SEGMENT
??__Eintvalid@@YAXXZ PROC				; `dynamic initializer for 'intvalid'', COMDAT

; 83   : static Interval intvalid = Interval(TIME_NegInfinity, TIME_PosInfinity);

	sub	rsp, 40					; 00000028H
	mov	r8d, 2147483647				; 7fffffffH
	mov	edx, -2147483648			; ffffffff80000000H
	lea	rcx, OFFSET FLAT:?intvalid@@3VInterval@@A
	call	QWORD PTR __imp_??0Interval@@QEAA@HH@Z
	add	rsp, 40					; 00000028H
	ret	0
??__Eintvalid@@YAXXZ ENDP				; `dynamic initializer for 'intvalid''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\triobj.h
;	COMDAT ??__EkTriObjNormalXTCID@@YAXXZ
text$di	SEGMENT
??__EkTriObjNormalXTCID@@YAXXZ PROC			; `dynamic initializer for 'kTriObjNormalXTCID'', COMDAT

; 289  : const Class_ID kTriObjNormalXTCID = Class_ID(0x730a33d7, 0x27246c55);

	sub	rsp, 40					; 00000028H
	mov	r8d, 656698453				; 27246c55H
	mov	edx, 1930048471				; 730a33d7H
	lea	rcx, OFFSET FLAT:?kTriObjNormalXTCID@@3VClass_ID@@B
	call	??0Class_ID@@QEAA@KK@Z			; Class_ID::Class_ID
	add	rsp, 40					; 00000028H
	ret	0
??__EkTriObjNormalXTCID@@YAXXZ ENDP			; `dynamic initializer for 'kTriObjNormalXTCID''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\interval.h
;	COMDAT ?SetEmpty@Interval@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?SetEmpty@Interval@@QEAAXXZ PROC			; Interval::SetEmpty, COMDAT

; 118  : 		void SetEmpty() { start = TIME_NegInfinity; end = TIME_NegInfinity; }

	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], -2147483648		; ffffffff80000000H
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], -2147483648		; ffffffff80000000H
	ret	0
?SetEmpty@Interval@@QEAAXXZ ENDP			; Interval::SetEmpty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\matrix3.h
;	COMDAT ?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
i$ = 64
?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z PROC		; Matrix3::GetRow, COMDAT

; 260  :    Point3 GetRow(int i) const { return (*this)[i]; }

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??AMatrix3@@QEBAAEBVPoint3@@H@Z		; Matrix3::operator[]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	ret	0
?GetRow@Matrix3@@QEBA?AVPoint3@@H@Z ENDP		; Matrix3::GetRow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\matrix3.h
;	COMDAT ??0Matrix3@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Matrix3@@QEAA@XZ PROC				; Matrix3::Matrix3, COMDAT

; 172  :    Matrix3(){ flags = 0; }

	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+48], 0
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Matrix3@@QEAA@XZ ENDP				; Matrix3::Matrix3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\matrix3.h
;	COMDAT ??AMatrix3@@QEBAAEBVPoint3@@H@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??AMatrix3@@QEBAAEBVPoint3@@H@Z PROC			; Matrix3::operator[], COMDAT

; 118  :    const Point3& operator[](int i) const { return((Point3&)(*m[i])); }

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	add	rax, rcx
	ret	0
??AMatrix3@@QEBAAEBVPoint3@@H@Z ENDP			; Matrix3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 32   : 		static AssetId kInvalidId;

	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A
	call	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ; MaxSDK::AssetManagement::AssetId::AssetId
	add	rsp, 40					; 00000028H
	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 24
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	lea	rax, OFFSET FLAT:GUID_NULL
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\point3.h
;	COMDAT ??D@YA?AVPoint3@@AEBV0@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
a$ = 72
f$ = 80
??D@YA?AVPoint3@@AEBV0@M@Z PROC				; operator*, COMDAT

; 326  : __forceinline Point3 operator*(const Point3& a, float f) {

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 327  :    return(Point3(a.x*f, a.y*f, a.z*f));

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR f$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  :    }

	add	rsp, 56					; 00000038H
	ret	0
??D@YA?AVPoint3@@AEBV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR aa$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR bb$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

; 463  : }

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 56					; 00000038H
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
