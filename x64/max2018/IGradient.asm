; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
CONST	SEGMENT
$SG212043 DB	'C', 00H, 'u', 00H, 's', 00H, 't', 00H, 'G', 00H, 'r', 00H
	DB	'a', 00H, 'd', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	IsolationAwarePrivatenPgViNgRzlnPgpgk
PUBLIC	IsolationAwareCreateActCtxW
PUBLIC	IsolationAwareActivateActCtx
PUBLIC	IsolationAwareDeactivateActCtx
PUBLIC	IsolationAwareFindActCtxSectionStringW
PUBLIC	IsolationAwareQueryActCtxW
PUBLIC	WinbaseIsolationAwarePrivatetRgzlnPgpgk
PUBLIC	IsolationAwareRegisterClassExW
PUBLIC	??0Class_ID@@QEAA@KK@Z				; Class_ID::Class_ID
PUBLIC	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ	; MaxSDK::AssetManagement::AssetId::AssetId
PUBLIC	?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ; IGradient::GradientProc
PUBLIC	??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z ; DLSetWindowLongPtr<IGradient * __ptr64>
PUBLIC	??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z ; DLGetWindowLongPtr<IGradient * __ptr64>
PUBLIC	?InitGradientControls@@YAXXZ			; InitGradientControls
PUBLIC	??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_GetModuleFileNameW:PROC
EXTRN	__imp_GetModuleHandleExW:PROC
EXTRN	__imp_LoadLibraryW:PROC
EXTRN	__imp_CreateActCtxW:PROC
EXTRN	__imp_ActivateActCtx:PROC
EXTRN	__imp_DeactivateActCtx:PROC
EXTRN	__imp_FindActCtxSectionStringW:PROC
EXTRN	__imp_QueryActCtxW:PROC
EXTRN	__imp_GetStockObject:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassExW:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_LoadMenuW:PROC
EXTRN	__imp_GetSubMenu:PROC
EXTRN	__imp_TrackPopupMenuEx:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetCursorPos:PROC
EXTRN	__imp_GetWindowLongPtrW:PROC
EXTRN	__imp_SetWindowLongPtrW:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_??0Interval@@QEAA@HH@Z:PROC
EXTRN	?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z:PROC	; GradientRamp::paint
EXTRN	?leftDown@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::leftDown
EXTRN	?leftUp@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::leftUp
EXTRN	?dragging@GradientRamp@@QEAAXHH_N00@Z:PROC	; GradientRamp::dragging
EXTRN	?popup@GradientRamp@@QEAAXHHH@Z:PROC		; GradientRamp::popup
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_SEH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	?hInstance@@3PEAUHINSTANCE__@@EA:QWORD		; hInstance
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
?kTriObjNormalXTCID@@3VClass_ID@@B DQ 01H DUP (?)	; kTriObjNormalXTCID
?intvalid@@3VInterval@@A DQ 01H DUP (?)			; intvalid
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwarePrivatenPgViNgRzlnPgpgk DD imagerel $LN14
	DD	imagerel $LN14+194
	DD	imagerel $unwind$IsolationAwarePrivatenPgViNgRzlnPgpgk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareCreateActCtxW DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$IsolationAwareCreateActCtxW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareActivateActCtx DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$IsolationAwareActivateActCtx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareDeactivateActCtx DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$IsolationAwareDeactivateActCtx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareFindActCtxSectionStringW DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$IsolationAwareFindActCtxSectionStringW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareQueryActCtxW DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$IsolationAwareQueryActCtxW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$WinbaseIsolationAwarePrivatetRgzlnPgpgk DD imagerel $LN28
	DD	imagerel $LN28+580
	DD	imagerel $unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 DD imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
	DD	imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0+31
	DD	imagerel $unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareRegisterClassExW DD imagerel $LN27
	DD	imagerel $LN27+271
	DD	imagerel $unwind$IsolationAwareRegisterClassExW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsolationAwareRegisterClassExW$fin$0 DD imagerel IsolationAwareRegisterClassExW$fin$0
	DD	imagerel IsolationAwareRegisterClassExW$fin$0+123
	DD	imagerel $unwind$IsolationAwareRegisterClassExW$fin$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
	DD	imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ+21
	DD	imagerel $unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkTriObjNormalXTCID@@YAXXZ DD imagerel ??__EkTriObjNormalXTCID@@YAXXZ
	DD	imagerel ??__EkTriObjNormalXTCID@@YAXXZ+32
	DD	imagerel $unwind$??__EkTriObjNormalXTCID@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eintvalid@@YAXXZ DD imagerel ??__Eintvalid@@YAXXZ
	DD	imagerel ??__Eintvalid@@YAXXZ+33
	DD	imagerel $unwind$??__Eintvalid@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN35
	DD	imagerel $LN35+1203
	DD	imagerel $unwind$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InitGradientControls@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+182
	DD	imagerel $unwind$?InitGradientControls@@YAXXZ
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB
CONST	SEGMENT
?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB DB 'Isola'
	DB	'tionAware function called after IsolationAwareCleanup', 0aH, 00H ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
CONST	ENDS
;	COMDAT ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'c', 00H, 't', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InitGradientControls@@YAXXZ DD 021619H
	DD	0110107H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01f011aH
	DD	imagerel __GSHandlerCheck
	DD	0e8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eintvalid@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkTriObjNormalXTCID@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD 020701H
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareRegisterClassExW$fin$0 DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareRegisterClassExW DD 011819H
	DD	0a209H
	DD	imagerel __GSHandlerCheck_SEH
	DD	01H
	DD	imagerel $LN27+115
	DD	imagerel $LN27+131
	DD	imagerel IsolationAwareRegisterClassExW$fin$0
	DD	00H
	DD	04aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 DD 020601H
	DD	050027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WinbaseIsolationAwarePrivatetRgzlnPgpgk DD 021919H
	DD	0690107H
	DD	imagerel __GSHandlerCheck_SEH
	DD	01H
	DD	imagerel $LN28+465
	DD	imagerel $LN28+529
	DD	imagerel WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0
	DD	00H
	DD	0332H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareQueryActCtxW DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareFindActCtxSectionStringW DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareDeactivateActCtx DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareActivateActCtx DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwareCreateActCtxW DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsolationAwarePrivatenPgViNgRzlnPgpgk DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?kTriObjNormalXTCID$initializer$@@3P6AXXZEA DQ FLAT:??__EkTriObjNormalXTCID@@YAXXZ ; kTriObjNormalXTCID$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?intvalid$initializer$@@3P6AXXZEA DQ FLAT:??__Eintvalid@@YAXXZ ; intvalid$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\igradient.cpp
;	COMDAT ?InitGradientControls@@YAXXZ
_TEXT	SEGMENT
wc$ = 32
__$ArrayPad$ = 112
?InitGradientControls@@YAXXZ PROC			; InitGradientControls, COMDAT

; 185  : void InitGradientControls() {

$LN3:
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 186  : 	WNDCLASSEX wc;
; 187  : 	wc.cbClsExtra = 0;

	mov	DWORD PTR wc$[rsp+16], 0

; 188  : 	wc.cbWndExtra = 0;

	mov	DWORD PTR wc$[rsp+20], 0

; 189  : 	wc.hbrBackground = (HBRUSH)GetStockObject(NULL_BRUSH);

	mov	ecx, 5
	call	QWORD PTR __imp_GetStockObject
	mov	QWORD PTR wc$[rsp+48], rax

; 190  : 	wc.hCursor = LoadCursor(NULL, /*IDC_CROSS*/IDC_ARROW);

	mov	edx, 32512				; 00007f00H
	xor	ecx, ecx
	call	QWORD PTR __imp_LoadCursorW
	mov	QWORD PTR wc$[rsp+40], rax

; 191  : 	wc.hIcon = NULL;

	mov	QWORD PTR wc$[rsp+32], 0

; 192  : 	wc.hIconSm = NULL;

	mov	QWORD PTR wc$[rsp+72], 0

; 193  : 	wc.hInstance = hInstance;

	mov	rax, QWORD PTR ?hInstance@@3PEAUHINSTANCE__@@EA ; hInstance
	mov	QWORD PTR wc$[rsp+24], rax

; 194  : 	wc.lpfnWndProc = IGradient::GradientProc; //DlgProc control

	lea	rax, OFFSET FLAT:?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ; IGradient::GradientProc
	mov	QWORD PTR wc$[rsp+8], rax

; 195  : 	wc.lpszClassName = L"CustGradient";

	lea	rax, OFFSET FLAT:$SG212043
	mov	QWORD PTR wc$[rsp+64], rax

; 196  : 	wc.lpszMenuName = NULL;

	mov	QWORD PTR wc$[rsp+56], 0

; 197  : 	wc.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW;

	mov	DWORD PTR wc$[rsp+4], 35		; 00000023H

; 198  : 	wc.cbSize = sizeof(wc);

	mov	DWORD PTR wc$[rsp], 80			; 00000050H

; 199  : 	RegisterClassEx(&wc);

	lea	rcx, QWORD PTR wc$[rsp]
	call	IsolationAwareRegisterClassExW

; 200  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?InitGradientControls@@YAXXZ ENDP			; InitGradientControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\3dsmaxdlport.h
;	COMDAT ??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z
_TEXT	SEGMENT
hWnd$ = 48
n$ = 56
__formal$ = 64
??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z PROC ; DLGetWindowLongPtr<IGradient * __ptr64>, COMDAT

; 48   : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 49   :    return (DataPtr)(static_cast<LONG_PTR>(::GetWindowLongPtr(hWnd, n)));

	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_GetWindowLongPtrW

; 50   : }

	add	rsp, 40					; 00000028H
	ret	0
??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z ENDP ; DLGetWindowLongPtr<IGradient * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\3dsmaxdlport.h
;	COMDAT ??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z
_TEXT	SEGMENT
hWnd$ = 48
ptr$ = 56
n$ = 64
??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z PROC ; DLSetWindowLongPtr<IGradient * __ptr64>, COMDAT

; 101  : {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 102  : #if !defined( _WIN64 )
; 103  :    // SetWindowLongPtr() maps to SetWindowLong() in 32 bit land; react accordingly to keep
; 104  :    // the compiler happy, even with /Wp64.
; 105  :    return (Type)(static_cast<LONG_PTR>(::SetWindowLongPtr(hWnd, n, (LONG)((LONG_PTR)(ptr)))));
; 106  : #else
; 107  :    return (Type)(static_cast<LONG_PTR>(::SetWindowLongPtr(hWnd, n, (LONG_PTR)(ptr))));

	mov	r8, QWORD PTR ptr$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_SetWindowLongPtrW

; 108  : #endif
; 109  : }

	add	rsp, 40					; 00000028H
	ret	0
??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z ENDP ; DLSetWindowLongPtr<IGradient * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\igradient.cpp
;	COMDAT ?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z
_TEXT	SEGMENT
tv95 = 48
tv131 = 49
tv135 = 50
tv152 = 51
tv156 = 52
tv160 = 53
tv177 = 54
tv181 = 55
tv185 = 56
tv75 = 60
grad$ = 64
buttons$1 = 72
buttons$2 = 76
buttons$3 = 80
sel$4 = 84
mouse_y$5 = 88
mouse_x$6 = 92
mouse_y$7 = 96
mouse_x$8 = 100
mouse_y$9 = 104
mouse_x$10 = 108
mouse_y$11 = 112
mouse_x$12 = 116
Popup$13 = 120
lpcs$14 = 128
ps$15 = 144
pt$16 = 224
__$ArrayPad$ = 232
hWnd$ = 256
msg$ = 264
wParam$ = 272
lParam$ = 280
?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z PROC	; IGradient::GradientProc, COMDAT

; 39   : LRESULT CALLBACK IGradient::GradientProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {

$LN35:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 40   :    IGradient *grad = DLGetWindowLongPtr<IGradient*>(hWnd);

	xor	r8d, r8d
	mov	edx, -21
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	??$DLGetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@HPEAV0@@Z ; DLGetWindowLongPtr<IGradient * __ptr64>
	mov	QWORD PTR grad$[rsp], rax

; 41   :    if(grad == NULL && msg != WM_CREATE)

	cmp	QWORD PTR grad$[rsp], 0
	jne	SHORT $LN4@GradientPr
	cmp	DWORD PTR msg$[rsp], 1
	je	SHORT $LN4@GradientPr

; 42   :       return DefWindowProc(hWnd, msg, wParam, lParam);

	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR msg$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
	jmp	$LN1@GradientPr
$LN4@GradientPr:

; 43   : 
; 44   :    switch(msg) {	   

	mov	eax, DWORD PTR msg$[rsp]
	mov	DWORD PTR tv75[rsp], eax
	cmp	DWORD PTR tv75[rsp], 513		; 00000201H
	ja	SHORT $LN34@GradientPr
	cmp	DWORD PTR tv75[rsp], 513		; 00000201H
	je	$LN8@GradientPr
	cmp	DWORD PTR tv75[rsp], 1
	je	SHORT $LN5@GradientPr
	cmp	DWORD PTR tv75[rsp], 15
	je	$LN13@GradientPr
	cmp	DWORD PTR tv75[rsp], 512		; 00000200H
	je	SHORT $LN6@GradientPr
	jmp	$LN14@GradientPr
$LN34@GradientPr:
	cmp	DWORD PTR tv75[rsp], 514		; 00000202H
	je	$LN9@GradientPr
	cmp	DWORD PTR tv75[rsp], 517		; 00000205H
	je	$LN10@GradientPr
	cmp	DWORD PTR tv75[rsp], 520		; 00000208H
	je	$LN12@GradientPr
	jmp	$LN14@GradientPr
$LN5@GradientPr:

; 45   : 		case WM_CREATE:      {
; 46   : 			LPCREATESTRUCT lpcs = (LPCREATESTRUCT)lParam;

	mov	rax, QWORD PTR lParam$[rsp]
	mov	QWORD PTR lpcs$14[rsp], rax

; 47   : 			grad = (IGradient*)lpcs->lpCreateParams;

	mov	rax, QWORD PTR lpcs$14[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR grad$[rsp], rax

; 48   : 			DLSetWindowLongPtr(hWnd, grad);

	mov	r8d, -21
	mov	rdx, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	??$DLSetWindowLongPtr@PEAVIGradient@@@@YAPEAVIGradient@@PEAUHWND__@@PEAV0@H@Z ; DLSetWindowLongPtr<IGradient * __ptr64>

; 49   : 			break;

	jmp	$LN2@GradientPr
$LN6@GradientPr:

; 50   : 		}
; 51   : 	   /*
; 52   : 		case WM_KILLFOCUS:
; 53   : 			if (ctrl->m_bMouseOver)	{
; 54   : 				ctrl->m_bMouseOver = false;
; 55   : 				ctrl->run_event_handler(n_mouseout, (short)LOWORD(lParam), (short)HIWORD(lParam), wParam, false);
; 56   : 			}
; 57   : 		break;
; 58   : 		 */
; 59   : 		case WM_MOUSEMOVE: {
; 60   : 			int buttons = (int)wParam; 

	mov	eax, DWORD PTR wParam$[rsp]
	mov	DWORD PTR buttons$1[rsp], eax

; 61   : 			if (buttons & MK_LBUTTON) {				

	mov	eax, DWORD PTR buttons$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN7@GradientPr

; 62   : 				int mouse_x = (int)LOWORD(lParam);

	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_x$6[rsp], eax

; 63   : 				int mouse_y = (int)HIWORD(lParam); 

	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_y$5[rsp], eax

; 64   : 				grad->gradient->dragging(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	cwde
	test	eax, eax
	jge	SHORT $LN16@GradientPr
	mov	BYTE PTR tv95[rsp], 1
	jmp	SHORT $LN17@GradientPr
$LN16@GradientPr:
	mov	BYTE PTR tv95[rsp], 0
$LN17@GradientPr:
	mov	eax, DWORD PTR buttons$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN18@GradientPr
	mov	BYTE PTR tv131[rsp], 1
	jmp	SHORT $LN19@GradientPr
$LN18@GradientPr:
	mov	BYTE PTR tv131[rsp], 0
$LN19@GradientPr:
	mov	eax, DWORD PTR buttons$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN20@GradientPr
	mov	BYTE PTR tv135[rsp], 1
	jmp	SHORT $LN21@GradientPr
$LN20@GradientPr:
	mov	BYTE PTR tv135[rsp], 0
$LN21@GradientPr:
	movzx	eax, BYTE PTR tv95[rsp]
	mov	BYTE PTR [rsp+40], al
	movzx	eax, BYTE PTR tv131[rsp]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR tv135[rsp]
	mov	r8d, DWORD PTR mouse_y$5[rsp]
	mov	edx, DWORD PTR mouse_x$6[rsp]
	mov	rax, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?dragging@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::dragging
$LN7@GradientPr:

; 65   : 				//CharStream *out = thread_local(current_stdout);
; 66   : 				//out->printf("Dragging %d %d\n", mouse_x, mouse_y);
; 67   : 			}
; 68   : 			break;

	jmp	$LN2@GradientPr
$LN8@GradientPr:

; 69   : 		}
; 70   : 		 
; 71   : 		case WM_LBUTTONDOWN: {
; 72   : 			//CharStream *out = thread_local(current_stdout);
; 73   : 			
; 74   : 			int buttons = (int)wParam; 

	mov	eax, DWORD PTR wParam$[rsp]
	mov	DWORD PTR buttons$2[rsp], eax

; 75   : 			int mouse_x = (int)LOWORD(lParam);

	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_x$8[rsp], eax

; 76   : 			int mouse_y = (int)HIWORD(lParam); 

	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_y$7[rsp], eax

; 77   : 
; 78   : 			grad->gradient->leftDown(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	cwde
	test	eax, eax
	jge	SHORT $LN22@GradientPr
	mov	BYTE PTR tv152[rsp], 1
	jmp	SHORT $LN23@GradientPr
$LN22@GradientPr:
	mov	BYTE PTR tv152[rsp], 0
$LN23@GradientPr:
	mov	eax, DWORD PTR buttons$2[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN24@GradientPr
	mov	BYTE PTR tv156[rsp], 1
	jmp	SHORT $LN25@GradientPr
$LN24@GradientPr:
	mov	BYTE PTR tv156[rsp], 0
$LN25@GradientPr:
	mov	eax, DWORD PTR buttons$2[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN26@GradientPr
	mov	BYTE PTR tv160[rsp], 1
	jmp	SHORT $LN27@GradientPr
$LN26@GradientPr:
	mov	BYTE PTR tv160[rsp], 0
$LN27@GradientPr:
	movzx	eax, BYTE PTR tv152[rsp]
	mov	BYTE PTR [rsp+40], al
	movzx	eax, BYTE PTR tv156[rsp]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR tv160[rsp]
	mov	r8d, DWORD PTR mouse_y$7[rsp]
	mov	edx, DWORD PTR mouse_x$8[rsp]
	mov	rax, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?leftDown@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::leftDown

; 79   : 
; 80   : 			/*
; 81   : 			if (buttons & MK_CONTROL) {	
; 82   : 				out->printf("Left mouse DOWN + control\n");
; 83   : 			} else if (buttons & MK_SHIFT) {
; 84   : 				out->printf("Left mouse DOWN + shift\n");
; 85   : 			} else {
; 86   : 				out->printf("Left mouse DOWN %d %d\n", mouse_x, mouse_y);
; 87   : 			}*/
; 88   : 
; 89   : 			break;

	jmp	$LN2@GradientPr
$LN9@GradientPr:

; 90   : 		}
; 91   : 
; 92   : 		case WM_LBUTTONUP: {
; 93   : 			/*CharStream *out = thread_local(current_stdout);*/
; 94   : 			
; 95   : 			int buttons = (int)wParam; 

	mov	eax, DWORD PTR wParam$[rsp]
	mov	DWORD PTR buttons$3[rsp], eax

; 96   : 			int mouse_x = (int)LOWORD(lParam);

	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_x$10[rsp], eax

; 97   : 			int mouse_y = (int)HIWORD(lParam); 

	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_y$9[rsp], eax

; 98   : 			grad->gradient->leftUp(mouse_x, mouse_y, buttons&MK_CONTROL, buttons&MK_SHIFT, GetKeyState(VK_MENU) < 0);

	mov	ecx, 18
	call	QWORD PTR __imp_GetKeyState
	cwde
	test	eax, eax
	jge	SHORT $LN28@GradientPr
	mov	BYTE PTR tv177[rsp], 1
	jmp	SHORT $LN29@GradientPr
$LN28@GradientPr:
	mov	BYTE PTR tv177[rsp], 0
$LN29@GradientPr:
	mov	eax, DWORD PTR buttons$3[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN30@GradientPr
	mov	BYTE PTR tv181[rsp], 1
	jmp	SHORT $LN31@GradientPr
$LN30@GradientPr:
	mov	BYTE PTR tv181[rsp], 0
$LN31@GradientPr:
	mov	eax, DWORD PTR buttons$3[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN32@GradientPr
	mov	BYTE PTR tv185[rsp], 1
	jmp	SHORT $LN33@GradientPr
$LN32@GradientPr:
	mov	BYTE PTR tv185[rsp], 0
$LN33@GradientPr:
	movzx	eax, BYTE PTR tv177[rsp]
	mov	BYTE PTR [rsp+40], al
	movzx	eax, BYTE PTR tv181[rsp]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR tv185[rsp]
	mov	r8d, DWORD PTR mouse_y$9[rsp]
	mov	edx, DWORD PTR mouse_x$10[rsp]
	mov	rax, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?leftUp@GradientRamp@@QEAAXHH_N00@Z	; GradientRamp::leftUp

; 99   : 
; 100  : 			/*
; 101  : 			if (buttons & MK_CONTROL) {	
; 102  : 				out->printf("Left mouse + control\n");
; 103  : 			} else if (buttons & MK_SHIFT) {
; 104  : 				out->printf("Left mouse + shift\n");
; 105  : 			} else {
; 106  : 				out->printf("Left mouse\n");
; 107  : 			}  */
; 108  : 			break;

	jmp	$LN2@GradientPr
$LN10@GradientPr:

; 109  : 		}
; 110  : 
; 111  : 		case WM_RBUTTONUP: {
; 112  : 			HMENU Popup;
; 113  : 			POINT pt;
; 114  : 			Popup = LoadMenu(hInstance, MAKEINTRESOURCE(IDR_GRADIENTMENU));

	mov	edx, 169				; 000000a9H
	mov	rcx, QWORD PTR ?hInstance@@3PEAUHINSTANCE__@@EA ; hInstance
	call	QWORD PTR __imp_LoadMenuW
	mov	QWORD PTR Popup$13[rsp], rax

; 115  : 			Popup = GetSubMenu(Popup, 0);

	xor	edx, edx
	mov	rcx, QWORD PTR Popup$13[rsp]
	call	QWORD PTR __imp_GetSubMenu
	mov	QWORD PTR Popup$13[rsp], rax

; 116  : 			GetCursorPos(&pt);

	lea	rcx, QWORD PTR pt$16[rsp]
	call	QWORD PTR __imp_GetCursorPos

; 117  : 			int sel = TrackPopupMenuEx(Popup, TPM_LEFTALIGN | TPM_RIGHTBUTTON | TPM_RETURNCMD, pt.x, pt.y, hWnd, NULL);

	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR hWnd$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR pt$16[rsp+4]
	mov	r8d, DWORD PTR pt$16[rsp]
	mov	edx, 258				; 00000102H
	mov	rcx, QWORD PTR Popup$13[rsp]
	call	QWORD PTR __imp_TrackPopupMenuEx
	mov	DWORD PTR sel$4[rsp], eax

; 118  : 			if (sel > 0) {

	cmp	DWORD PTR sel$4[rsp], 0
	jle	SHORT $LN11@GradientPr

; 119  : 				int mouse_x = (int)LOWORD(lParam);

	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_x$12[rsp], eax

; 120  : 				int mouse_y = (int)HIWORD(lParam); 

	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR mouse_y$11[rsp], eax

; 121  : 				grad->gradient->popup(mouse_x, mouse_y, sel);

	mov	r9d, DWORD PTR sel$4[rsp]
	mov	r8d, DWORD PTR mouse_y$11[rsp]
	mov	edx, DWORD PTR mouse_x$12[rsp]
	mov	rax, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?popup@GradientRamp@@QEAAXHHH@Z		; GradientRamp::popup
$LN11@GradientPr:

; 122  : 			}
; 123  : 			break;

	jmp	SHORT $LN2@GradientPr
$LN12@GradientPr:

; 124  : 		}
; 125  : 
; 126  : 		case WM_MBUTTONUP: {
; 127  : 			/*
; 128  : 			CharStream *out = thread_local(current_stdout);
; 129  : 
; 130  : 			int buttons = (int)wParam; 
; 131  : 			if (buttons & MK_CONTROL) {	
; 132  : 				out->printf("Middle mouse + control\n");
; 133  : 			} else if (buttons & MK_SHIFT) {
; 134  : 				out->printf("Middle mouse + shift\n");
; 135  : 			} else {
; 136  : 				out->printf("Middle mouse\n");
; 137  : 			}  */
; 138  : 			break;

	jmp	SHORT $LN2@GradientPr
$LN13@GradientPr:

; 139  : 		}
; 140  : 								 
; 141  : 		   /*
; 142  : 		case WM_LBUTTONUP:
; 143  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, left);
; 144  : 
; 145  : 		case WM_LBUTTONDBLCLK:
; 146  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, left);
; 147  : 
; 148  : 		case WM_RBUTTONDOWN:
; 149  : 			return ctrl->ButtonDown((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 150  : 
; 151  : 		case WM_RBUTTONUP:
; 152  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 153  : 
; 154  : 		case WM_RBUTTONDBLCLK:
; 155  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, right);
; 156  : 
; 157  : 		case WM_MBUTTONDOWN:
; 158  : 			return ctrl->ButtonDown((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 159  : 
; 160  : 		case WM_MBUTTONUP:
; 161  : 			return ctrl->ButtonUp((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 162  : 
; 163  : 		case WM_MBUTTONDBLCLK:
; 164  : 			return ctrl->ButtonDblClk((short)LOWORD(lParam), (short)HIWORD(lParam), wParam, middle);
; 165  : 
; 166  : 		case WM_ERASEBKGND:
; 167  : 			return ctrl->EraseBkgnd((HDC)wParam);
; 168  : 		 
; 169  : 		 */
; 170  : 		case WM_PAINT: {			
; 171  : 			//CharStream *out = thread_local(current_stdout);
; 172  : 			//out->printf("!!Paint!!\n");
; 173  : 			PAINTSTRUCT ps;
; 174  : 			BeginPaint(hWnd,&ps);

	lea	rdx, QWORD PTR ps$15[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_BeginPaint

; 175  : 			grad->gradient->paint(ps.hdc);

	mov	rdx, QWORD PTR ps$15[rsp]
	mov	rax, QWORD PTR grad$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z	; GradientRamp::paint

; 176  : 			EndPaint(hWnd,&ps);

	lea	rdx, QWORD PTR ps$15[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_EndPaint

; 177  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN1@GradientPr
$LN14@GradientPr:

; 178  : 		}
; 179  : 		default:
; 180  : 			return DefWindowProc(hWnd, msg, wParam, lParam);

	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR msg$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
	jmp	SHORT $LN1@GradientPr
$LN2@GradientPr:

; 181  : 	}
; 182  : 	return FALSE;

	xor	eax, eax
$LN1@GradientPr:

; 183  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
?GradientProc@IGradient@@SA_JPEAUHWND__@@I_K_J@Z ENDP	; IGradient::GradientProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.h
;	COMDAT ??__Eintvalid@@YAXXZ
text$di	SEGMENT
??__Eintvalid@@YAXXZ PROC				; `dynamic initializer for 'intvalid'', COMDAT

; 83   : static Interval intvalid = Interval(TIME_NegInfinity, TIME_PosInfinity);

	sub	rsp, 40					; 00000028H
	mov	r8d, 2147483647				; 7fffffffH
	mov	edx, -2147483648			; ffffffff80000000H
	lea	rcx, OFFSET FLAT:?intvalid@@3VInterval@@A
	call	QWORD PTR __imp_??0Interval@@QEAA@HH@Z
	add	rsp, 40					; 00000028H
	ret	0
??__Eintvalid@@YAXXZ ENDP				; `dynamic initializer for 'intvalid''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\triobj.h
;	COMDAT ??__EkTriObjNormalXTCID@@YAXXZ
text$di	SEGMENT
??__EkTriObjNormalXTCID@@YAXXZ PROC			; `dynamic initializer for 'kTriObjNormalXTCID'', COMDAT

; 289  : const Class_ID kTriObjNormalXTCID = Class_ID(0x730a33d7, 0x27246c55);

	sub	rsp, 40					; 00000028H
	mov	r8d, 656698453				; 27246c55H
	mov	edx, 1930048471				; 730a33d7H
	lea	rcx, OFFSET FLAT:?kTriObjNormalXTCID@@3VClass_ID@@B
	call	??0Class_ID@@QEAA@KK@Z			; Class_ID::Class_ID
	add	rsp, 40					; 00000028H
	ret	0
??__EkTriObjNormalXTCID@@YAXXZ ENDP			; `dynamic initializer for 'kTriObjNormalXTCID''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 32   : 		static AssetId kInvalidId;

	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A
	call	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ; MaxSDK::AssetManagement::AssetId::AssetId
	add	rsp, 40					; 00000028H
	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 24
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	lea	rax, OFFSET FLAT:GUID_NULL
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR aa$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR bb$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winuser.inl
;	COMDAT IsolationAwareRegisterClassExW
_TEXT	SEGMENT
result$ = 32
tv77 = 36
tv80 = 40
fPreserveLastError$1 = 44
dwLastError$2 = 48
tv69 = 52
fActivateActCtxSuccess$ = 56
ulpCookie$ = 64
__$ArrayPad$ = 72
unnamed1$ = 96
IsolationAwareRegisterClassExW PROC			; COMDAT

; 318  : {

$LN27:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 319  :     ATOM result = 0 ;

	xor	eax, eax
	mov	WORD PTR result$[rsp], ax

; 320  :     ULONG_PTR ulpCookie = 0;

	mov	QWORD PTR ulpCookie$[rsp], 0

; 321  :     const BOOL fActivateActCtxSuccess =
; 322  :         IsolationAwarePrivateT_SAbnPgpgk ||
; 323  :         IsolationAwarePrivateT_SqbjaYRiRY ||

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	jne	SHORT $LN8@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN8@IsolationA
	lea	rcx, QWORD PTR ulpCookie$[rsp]
	call	IsolationAwarePrivatenPgViNgRzlnPgpgk
	test	eax, eax
	jne	SHORT $LN8@IsolationA
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN9@IsolationA
$LN8@IsolationA:
	mov	DWORD PTR tv69[rsp], 1
$LN9@IsolationA:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR fActivateActCtxSuccess$[rsp], eax

; 324  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);
; 325  :     if (!fActivateActCtxSuccess)

	cmp	DWORD PTR fActivateActCtxSuccess$[rsp], 0
	jne	SHORT $LN2@IsolationA

; 326  :         return result;

	movzx	eax, WORD PTR result$[rsp]
	jmp	$LN21@IsolationA
$LN2@IsolationA:

; 327  :     __try
; 328  :     {
; 329  :         result = RegisterClassExW(unnamed1);

	mov	rcx, QWORD PTR unnamed1$[rsp]
	call	QWORD PTR __imp_RegisterClassExW
	mov	WORD PTR result$[rsp], ax
$LN25@IsolationA:

; 330  :     }
; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN14@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN20@IsolationA
$LN14@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	movzx	eax, WORD PTR result$[rsp]
	test	eax, eax
	jne	SHORT $LN15@IsolationA
	mov	DWORD PTR tv77[rsp], 1
	jmp	SHORT $LN16@IsolationA
$LN15@IsolationA:
	mov	DWORD PTR tv77[rsp], 0
$LN16@IsolationA:
	mov	eax, DWORD PTR tv77[rsp]
	mov	DWORD PTR fPreserveLastError$1[rsp], eax

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR fPreserveLastError$1[rsp], 0
	je	SHORT $LN17@IsolationA
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv80[rsp], eax
	jmp	SHORT $LN18@IsolationA
$LN17@IsolationA:
	mov	DWORD PTR tv80[rsp], 0
$LN18@IsolationA:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR dwLastError$2[rsp], eax

; 339  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rsp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx

; 340  :             if (fPreserveLastError)

	cmp	DWORD PTR fPreserveLastError$1[rsp], 0
	je	SHORT $LN20@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR dwLastError$2[rsp]
	call	QWORD PTR __imp_SetLastError
$LN20@IsolationA:

; 342  :         }
; 343  :     }
; 344  :     return result;

	movzx	eax, WORD PTR result$[rsp]
$LN21@IsolationA:

; 345  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
IsolationAwareRegisterClassExW ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
result$ = 32
tv77 = 36
tv80 = 40
fPreserveLastError$1 = 44
dwLastError$2 = 48
tv69 = 52
fActivateActCtxSuccess$ = 56
ulpCookie$ = 64
__$ArrayPad$ = 72
unnamed1$ = 96
IsolationAwareRegisterClassExW$fin$0 PROC

; 330  :     }

	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
$LN22@IsolationA:

; 330  :     }
; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN5@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN23@IsolationA
$LN5@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	movzx	eax, WORD PTR result$[rbp]
	test	eax, eax
	jne	SHORT $LN10@IsolationA
	mov	DWORD PTR tv77[rbp], 1
	jmp	SHORT $LN11@IsolationA
$LN10@IsolationA:
	mov	DWORD PTR tv77[rbp], 0
$LN11@IsolationA:
	mov	eax, DWORD PTR tv77[rbp]
	mov	DWORD PTR fPreserveLastError$1[rbp], eax

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR fPreserveLastError$1[rbp], 0
	je	SHORT $LN12@IsolationA
	call	QWORD PTR __imp_GetLastError
	npad	1
	mov	DWORD PTR tv80[rbp], eax
	jmp	SHORT $LN13@IsolationA
$LN12@IsolationA:
	mov	DWORD PTR tv80[rbp], 0
$LN13@IsolationA:
	mov	eax, DWORD PTR tv80[rbp]
	mov	DWORD PTR dwLastError$2[rbp], eax

; 339  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx
	npad	1

; 340  :             if (fPreserveLastError)

	cmp	DWORD PTR fPreserveLastError$1[rbp], 0
	je	SHORT $LN23@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR dwLastError$2[rbp]
	call	QWORD PTR __imp_SetLastError
	npad	1
$LN23@IsolationA:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
IsolationAwareRegisterClassExW$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
result$ = 32
tv77 = 36
tv80 = 40
fPreserveLastError$1 = 44
dwLastError$2 = 48
tv69 = 52
fActivateActCtxSuccess$ = 56
ulpCookie$ = 64
__$ArrayPad$ = 72
unnamed1$ = 96
IsolationAwareRegisterClassExW$fin$0 PROC

; 330  :     }

	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
$LN22@IsolationA:

; 331  :     __finally
; 332  :     {
; 333  :         if (!IsolationAwarePrivateT_SAbnPgpgk
; 334  :          || !IsolationAwarePrivateT_SqbjaYRiRY

	cmp	DWORD PTR IsolationAwarePrivateT_SAbnPgpgk, 0
	je	SHORT $LN5@IsolationA
	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN23@IsolationA
$LN5@IsolationA:

; 335  :         )
; 336  :         {
; 337  :             const BOOL fPreserveLastError = (result == 0 );

	movzx	eax, WORD PTR result$[rbp]
	test	eax, eax
	jne	SHORT $LN10@IsolationA
	mov	DWORD PTR tv77[rbp], 1
	jmp	SHORT $LN11@IsolationA
$LN10@IsolationA:
	mov	DWORD PTR tv77[rbp], 0
$LN11@IsolationA:
	mov	eax, DWORD PTR tv77[rbp]
	mov	DWORD PTR fPreserveLastError$1[rbp], eax

; 338  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR fPreserveLastError$1[rbp], 0
	je	SHORT $LN12@IsolationA
	call	QWORD PTR __imp_GetLastError
	npad	1
	mov	DWORD PTR tv80[rbp], eax
	jmp	SHORT $LN13@IsolationA
$LN12@IsolationA:
	mov	DWORD PTR tv80[rbp], 0
$LN13@IsolationA:
	mov	eax, DWORD PTR tv80[rbp]
	mov	DWORD PTR dwLastError$2[rbp], eax

; 339  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx
	npad	1

; 340  :             if (fPreserveLastError)

	cmp	DWORD PTR fPreserveLastError$1[rbp], 0
	je	SHORT $LN23@IsolationA

; 341  :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR dwLastError$2[rbp]
	call	QWORD PTR __imp_SetLastError
	npad	1
$LN23@IsolationA:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
IsolationAwareRegisterClassExW$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT WinbaseIsolationAwarePrivatetRgzlnPgpgk
_TEXT	SEGMENT
dwLastError$1 = 64
fResult$ = 68
dw$2 = 72
actCtxBasicInfo$ = 80
hmodSelf$3 = 96
actCtx$4 = 104
ulpCookie$ = 160
actCtxSectionKeyedData$5 = 176
rgchFullModulePath$6 = 288
__$ArrayPad$ = 816
WinbaseIsolationAwarePrivatetRgzlnPgpgk PROC		; COMDAT

; 396  : {

$LN28:
	sub	rsp, 840				; 00000348H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 397  :     BOOL fResult = FALSE;

	mov	DWORD PTR fResult$[rsp], 0

; 398  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 399  :     ULONG_PTR ulpCookie = 0;

	mov	QWORD PTR ulpCookie$[rsp], 0

; 400  : 
; 401  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	je	SHORT $LN2@WinbaseIso

; 402  :     {
; 403  :         fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1

; 404  :         goto Exit;

	jmp	$Exit$29
$LN2@WinbaseIso:

; 405  :     }
; 406  : 
; 407  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)

	cmp	QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk, -1
	je	SHORT $LN4@WinbaseIso

; 408  :     {
; 409  :         fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1

; 410  :         goto Exit;

	jmp	$Exit$29
$LN4@WinbaseIso:

; 411  :     }
; 412  : 
; 413  :     if (!IsolationAwareQueryActCtxW(

	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 16
	lea	rax, QWORD PTR actCtxBasicInfo$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:WinbaseIsolationAwarePrivateT_UnPgpgk
	mov	ecx, -2147483632			; 80000010H
	call	IsolationAwareQueryActCtxW
	test	eax, eax
	jne	SHORT $LN6@WinbaseIso

; 414  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 415  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 416  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 417  :         NULL,
; 418  :         ActivationContextBasicInformation,
; 419  :         &actCtxBasicInfo,
; 420  :         sizeof(actCtxBasicInfo),
; 421  :         NULL))
; 422  :         goto Exit;

	jmp	$Exit$29
$LN6@WinbaseIso:

; 423  : 
; 424  :     /*
; 425  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 426  :     */
; 427  :     if (actCtxBasicInfo.hActCtx == NULL)

	cmp	QWORD PTR actCtxBasicInfo$[rsp], 0
	jne	$LN8@WinbaseIso

; 428  :     {
; 429  :         ACTCTXW actCtx;
; 430  :         WCHAR rgchFullModulePath[MAX_PATH + 1];
; 431  :         DWORD dw;
; 432  :         HMODULE hmodSelf;
; 433  : #ifdef _M_IX86
; 434  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");
; 435  :         if (pfnGetModuleHandleExW == NULL)
; 436  :             goto Exit;
; 437  : #endif
; 438  :         if (!

	lea	r8, QWORD PTR hmodSelf$3[rsp]
	lea	rdx, OFFSET FLAT:WinbaseIsolationAwarePrivateT_UnPgpgk
	mov	ecx, 6
	call	QWORD PTR __imp_GetModuleHandleExW
	test	eax, eax
	jne	SHORT $LN9@WinbaseIso

; 439  : #ifdef _M_IX86
; 440  :             (*pfnGetModuleHandleExW)
; 441  : #else
; 442  :             GetModuleHandleExW
; 443  : #endif
; 444  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 445  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 446  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 447  :                 &hmodSelf))
; 448  :             goto Exit;

	jmp	$Exit$29
$LN9@WinbaseIso:

; 449  : 
; 450  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath));

	mov	r8d, 261				; 00000105H
	lea	rdx, QWORD PTR rgchFullModulePath$6[rsp]
	mov	rcx, QWORD PTR hmodSelf$3[rsp]
	call	QWORD PTR __imp_GetModuleFileNameW
	mov	DWORD PTR dw$2[rsp], eax

; 451  :         if (dw == 0)

	cmp	DWORD PTR dw$2[rsp], 0
	jne	SHORT $LN11@WinbaseIso

; 452  :             goto Exit;

	jmp	$Exit$29
$LN11@WinbaseIso:

; 453  :         if (dw >= WINBASE_NUMBER_OF(rgchFullModulePath))

	mov	eax, DWORD PTR dw$2[rsp]
	cmp	rax, 261				; 00000105H
	jb	SHORT $LN13@WinbaseIso

; 454  :         {
; 455  :             SetLastError(ERROR_BUFFER_OVERFLOW);

	mov	ecx, 111				; 0000006fH
	call	QWORD PTR __imp_SetLastError

; 456  :             goto Exit;

	jmp	$Exit$29
$LN13@WinbaseIso:

; 457  :         }
; 458  : 
; 459  :         actCtx.cbSize = sizeof(actCtx);

	mov	DWORD PTR actCtx$4[rsp], 56		; 00000038H

; 460  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;

	mov	DWORD PTR actCtx$4[rsp+4], 136		; 00000088H

; 461  :         actCtx.lpSource = rgchFullModulePath;

	lea	rax, QWORD PTR rgchFullModulePath$6[rsp]
	mov	QWORD PTR actCtx$4[rsp+8], rax

; 462  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;

	mov	QWORD PTR actCtx$4[rsp+32], 3

; 463  :         actCtx.hModule = hmodSelf;

	mov	rax, QWORD PTR hmodSelf$3[rsp]
	mov	QWORD PTR actCtx$4[rsp+48], rax

; 464  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);

	lea	rcx, QWORD PTR actCtx$4[rsp]
	call	IsolationAwareCreateActCtxW
	mov	QWORD PTR actCtxBasicInfo$[rsp], rax

; 465  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)

	cmp	QWORD PTR actCtxBasicInfo$[rsp], -1
	jne	SHORT $LN15@WinbaseIso

; 466  :         {
; 467  :             const DWORD dwLastError = GetLastError();

	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR dwLastError$1[rsp], eax

; 468  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 469  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 470  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 471  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND) &&
; 472  :                 (dwLastError != ERROR_FILE_NOT_FOUND) &&

	cmp	DWORD PTR dwLastError$1[rsp], 1812	; 00000714H
	je	SHORT $LN16@WinbaseIso
	cmp	DWORD PTR dwLastError$1[rsp], 1813	; 00000715H
	je	SHORT $LN16@WinbaseIso
	cmp	DWORD PTR dwLastError$1[rsp], 1815	; 00000717H
	je	SHORT $LN16@WinbaseIso
	cmp	DWORD PTR dwLastError$1[rsp], 1814	; 00000716H
	je	SHORT $LN16@WinbaseIso
	cmp	DWORD PTR dwLastError$1[rsp], 2
	je	SHORT $LN16@WinbaseIso
	cmp	DWORD PTR dwLastError$1[rsp], 3
	je	SHORT $LN16@WinbaseIso

; 473  :                 (dwLastError != ERROR_PATH_NOT_FOUND))
; 474  :                 goto Exit;

	jmp	$Exit$29
$LN16@WinbaseIso:

; 475  : 
; 476  :             actCtxBasicInfo.hActCtx = NULL;

	mov	QWORD PTR actCtxBasicInfo$[rsp], 0
$LN15@WinbaseIso:

; 477  :         }
; 478  : 
; 479  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;

	mov	DWORD PTR WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk, 1
$LN8@WinbaseIso:

; 480  :     }
; 481  : 
; 482  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;

	mov	rax, QWORD PTR actCtxBasicInfo$[rsp]
	mov	QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk, rax

; 483  : 
; 484  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 485  : 
; 486  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))

	lea	rdx, QWORD PTR ulpCookie$[rsp]
	mov	rcx, QWORD PTR actCtxBasicInfo$[rsp]
	call	IsolationAwareActivateActCtx
	test	eax, eax
	je	SHORT $LN18@WinbaseIso

; 487  :     {
; 488  :         __try
; 489  :         {
; 490  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 491  : 
; 492  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);

	mov	DWORD PTR actCtxSectionKeyedData$5[rsp], 112 ; 00000070H

; 493  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))

	lea	rax, QWORD PTR actCtxSectionKeyedData$5[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	mov	r8d, 2
	xor	edx, edx
	xor	ecx, ecx
	call	IsolationAwareFindActCtxSectionStringW
	test	eax, eax
	je	SHORT $LN20@WinbaseIso

; 494  :             {
; 495  :                 /* get button, edit, etc. registered */
; 496  :                 LoadLibraryW(L"Comctl32.dll");

	lea	rcx, OFFSET FLAT:??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	QWORD PTR __imp_LoadLibraryW
	npad	1
$LN20@WinbaseIso:
$LN26@WinbaseIso:

; 497  :             }
; 498  :         }
; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rsp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx
$LN18@WinbaseIso:

; 502  :         }
; 503  :     }
; 504  : 
; 505  :     fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1
$Exit$29:

; 506  : Exit:
; 507  :     return fResult;

	mov	eax, DWORD PTR fResult$[rsp]
$LN22@WinbaseIso:

; 508  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 840				; 00000348H
	ret	0
WinbaseIsolationAwarePrivatetRgzlnPgpgk ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
dwLastError$1 = 64
fResult$ = 68
dw$2 = 72
actCtxBasicInfo$ = 80
hmodSelf$3 = 96
actCtx$4 = 104
ulpCookie$ = 160
actCtxSectionKeyedData$5 = 176
rgchFullModulePath$6 = 288
__$ArrayPad$ = 816
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 PROC

; 497  :             }
; 498  :         }

	push	rbp
	sub	rsp, 64					; 00000040H
	mov	rbp, rdx
$LN23@WinbaseIso:

; 497  :             }
; 498  :         }
; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx
	npad	1
$LN24@WinbaseIso:
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
	int	3
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
dwLastError$1 = 64
fResult$ = 68
dw$2 = 72
actCtxBasicInfo$ = 80
hmodSelf$3 = 96
actCtx$4 = 104
ulpCookie$ = 160
actCtxSectionKeyedData$5 = 176
rgchFullModulePath$6 = 288
__$ArrayPad$ = 816
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 PROC

; 498  :         }

	push	rbp
	sub	rsp, 64					; 00000040H
	mov	rbp, rdx
$LN23@WinbaseIso:

; 499  :         __finally
; 500  :         {
; 501  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	rdx, QWORD PTR ulpCookie$[rbp]
	xor	ecx, ecx
	call	IsolationAwareDeactivateActCtx
	npad	1
$LN24@WinbaseIso:
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
	int	3
WinbaseIsolationAwarePrivatetRgzlnPgpgk$fin$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwareQueryActCtxW
_TEXT	SEGMENT
dwFlags$ = 80
hActCtx$ = 88
pvSubInstance$ = 96
ulInfoClass$ = 104
pvBuffer$ = 112
cbBuffer$ = 120
pcbWrittenOrRequired$ = 128
IsolationAwareQueryActCtxW PROC				; COMDAT

; 207  : {

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 208  : #ifdef _WIN64
; 209  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	mov	rax, QWORD PTR pcbWrittenOrRequired$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR cbBuffer$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR pvBuffer$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR ulInfoClass$[rsp]
	mov	r8, QWORD PTR pvSubInstance$[rsp]
	mov	rdx, QWORD PTR hActCtx$[rsp]
	mov	ecx, DWORD PTR dwFlags$[rsp]
	call	QWORD PTR __imp_QueryActCtxW

; 210  : #else
; 211  :     BOOL fResult = FALSE;
; 212  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ HANDLE hActCtx,_In_opt_ PVOID pvSubInstance,_In_ ULONG ulInfoClass,_Out_writes_bytes_to_opt_(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,_In_ SIZE_T cbBuffer,_Out_opt_ SIZE_T*pcbWrittenOrRequired);
; 213  :     static PFN s_pfn;
; 214  :     PFN __IsolationAware_pfn = s_pfn;
; 215  :     if (__IsolationAware_pfn == NULL)
; 216  :     {
; 217  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("QueryActCtxW");
; 218  :         if (__IsolationAware_pfn == NULL)
; 219  :             return fResult;
; 220  :         s_pfn = __IsolationAware_pfn;
; 221  :     }
; 222  :     fResult = __IsolationAware_pfn(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 223  :     return fResult;
; 224  : #endif
; 225  : }

	add	rsp, 72					; 00000048H
	ret	0
IsolationAwareQueryActCtxW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwareFindActCtxSectionStringW
_TEXT	SEGMENT
dwFlags$ = 64
lpExtensionGuid$ = 72
ulSectionId$ = 80
lpStringToFind$ = 88
ReturnedData$ = 96
IsolationAwareFindActCtxSectionStringW PROC		; COMDAT

; 186  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 187  : #ifdef _WIN64
; 188  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	mov	rax, QWORD PTR ReturnedData$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lpStringToFind$[rsp]
	mov	r8d, DWORD PTR ulSectionId$[rsp]
	mov	rdx, QWORD PTR lpExtensionGuid$[rsp]
	mov	ecx, DWORD PTR dwFlags$[rsp]
	call	QWORD PTR __imp_FindActCtxSectionStringW

; 189  : #else
; 190  :     BOOL fResult = FALSE;
; 191  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_Reserved_ const GUID*lpExtensionGuid,_In_ ULONG ulSectionId,_In_ LPCWSTR lpStringToFind,_Out_ PACTCTX_SECTION_KEYED_DATA ReturnedData);
; 192  :     static PFN s_pfn;
; 193  :     PFN __IsolationAware_pfn = s_pfn;
; 194  :     if (__IsolationAware_pfn == NULL)
; 195  :     {
; 196  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("FindActCtxSectionStringW");
; 197  :         if (__IsolationAware_pfn == NULL)
; 198  :             return fResult;
; 199  :         s_pfn = __IsolationAware_pfn;
; 200  :     }
; 201  :     fResult = __IsolationAware_pfn(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 202  :     return fResult;
; 203  : #endif
; 204  : }

	add	rsp, 56					; 00000038H
	ret	0
IsolationAwareFindActCtxSectionStringW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwareDeactivateActCtx
_TEXT	SEGMENT
dwFlags$ = 48
ulCookie$ = 56
IsolationAwareDeactivateActCtx PROC			; COMDAT

; 165  : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 166  : #ifdef _WIN64
; 167  :     return DeactivateActCtx(dwFlags,ulCookie);

	mov	rdx, QWORD PTR ulCookie$[rsp]
	mov	ecx, DWORD PTR dwFlags$[rsp]
	call	QWORD PTR __imp_DeactivateActCtx

; 168  : #else
; 169  :     BOOL fResult = FALSE;
; 170  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ ULONG_PTR ulCookie);
; 171  :     static PFN s_pfn;
; 172  :     PFN __IsolationAware_pfn = s_pfn;
; 173  :     if (__IsolationAware_pfn == NULL)
; 174  :     {
; 175  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("DeactivateActCtx");
; 176  :         if (__IsolationAware_pfn == NULL)
; 177  :             return fResult;
; 178  :         s_pfn = __IsolationAware_pfn;
; 179  :     }
; 180  :     fResult = __IsolationAware_pfn(dwFlags,ulCookie);
; 181  :     return fResult;
; 182  : #endif
; 183  : }

	add	rsp, 40					; 00000028H
	ret	0
IsolationAwareDeactivateActCtx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwareActivateActCtx
_TEXT	SEGMENT
hActCtx$ = 48
lpCookie$ = 56
IsolationAwareActivateActCtx PROC			; COMDAT

; 144  : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 145  : #ifdef _WIN64
; 146  :     return ActivateActCtx(hActCtx,lpCookie);

	mov	rdx, QWORD PTR lpCookie$[rsp]
	mov	rcx, QWORD PTR hActCtx$[rsp]
	call	QWORD PTR __imp_ActivateActCtx

; 147  : #else
; 148  :     BOOL fResult = FALSE;
; 149  :     typedef BOOL (WINAPI* PFN)(_Inout_opt_ HANDLE hActCtx,_Out_ ULONG_PTR*lpCookie);
; 150  :     static PFN s_pfn;
; 151  :     PFN __IsolationAware_pfn = s_pfn;
; 152  :     if (__IsolationAware_pfn == NULL)
; 153  :     {
; 154  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("ActivateActCtx");
; 155  :         if (__IsolationAware_pfn == NULL)
; 156  :             return fResult;
; 157  :         s_pfn = __IsolationAware_pfn;
; 158  :     }
; 159  :     fResult = __IsolationAware_pfn(hActCtx,lpCookie);
; 160  :     return fResult;
; 161  : #endif
; 162  : }

	add	rsp, 40					; 00000028H
	ret	0
IsolationAwareActivateActCtx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwareCreateActCtxW
_TEXT	SEGMENT
pActCtx$ = 48
IsolationAwareCreateActCtxW PROC			; COMDAT

; 103  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 104  : #ifdef _WIN64
; 105  :     return CreateActCtxW(pActCtx);

	mov	rcx, QWORD PTR pActCtx$[rsp]
	call	QWORD PTR __imp_CreateActCtxW

; 106  : #else
; 107  :     HANDLE result = INVALID_HANDLE_VALUE;
; 108  :     typedef HANDLE (WINAPI* PFN)(_In_ PCACTCTXW pActCtx);
; 109  :     static PFN s_pfn;
; 110  :     PFN __IsolationAware_pfn = s_pfn;
; 111  :     if (__IsolationAware_pfn == NULL)
; 112  :     {
; 113  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("CreateActCtxW");
; 114  :         if (__IsolationAware_pfn == NULL)
; 115  :             return result;
; 116  :         s_pfn = __IsolationAware_pfn;
; 117  :     }
; 118  :     result = __IsolationAware_pfn(pActCtx);
; 119  :     return result;
; 120  : #endif
; 121  : }

	add	rsp, 40					; 00000028H
	ret	0
IsolationAwareCreateActCtxW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\um\winbase.inl
;	COMDAT IsolationAwarePrivatenPgViNgRzlnPgpgk
_TEXT	SEGMENT
dwLastError$1 = 32
fResult$ = 36
pulpCookie$ = 64
IsolationAwarePrivatenPgViNgRzlnPgpgk PROC		; COMDAT

; 582  : {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 583  :     BOOL fResult = FALSE;

	mov	DWORD PTR fResult$[rsp], 0

; 584  : 
; 585  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, 0
	je	SHORT $LN2@IsolationA

; 586  :     {
; 587  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 588  :         OutputDebugStringA(debugString);

	lea	rcx, OFFSET FLAT:?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	QWORD PTR __imp_OutputDebugStringA
$LN2@IsolationA:

; 589  :     }
; 590  : 
; 591  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 0
	je	SHORT $LN3@IsolationA

; 592  :     {
; 593  :         fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1

; 594  :         goto Exit;

	jmp	SHORT $LN4@IsolationA
	jmp	SHORT $Exit$15
$LN3@IsolationA:

; 595  :     }
; 596  : 
; 597  :     /* Do not call Init if Cleanup has been called. */
; 598  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, 0
	jne	SHORT $LN5@IsolationA

; 599  :     {
; 600  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	WinbaseIsolationAwarePrivatetRgzlnPgpgk
	test	eax, eax
	jne	SHORT $LN6@IsolationA

; 601  :             goto Exit;

	jmp	SHORT $LN7@IsolationA
	jmp	SHORT $Exit$15
$LN6@IsolationA:
$LN5@IsolationA:

; 602  :     }
; 603  :     /* If Cleanup has been called and id3 was in use, this will activate NULL. */
; 604  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	mov	rdx, QWORD PTR pulpCookie$[rsp]
	mov	rcx, QWORD PTR WinbaseIsolationAwarePrivateT_UnPgpgk
	call	IsolationAwareActivateActCtx
	test	eax, eax
	jne	SHORT $LN8@IsolationA

; 605  :         goto Exit;

	jmp	SHORT $LN9@IsolationA
	jmp	SHORT $Exit$15
$LN8@IsolationA:

; 606  : 
; 607  :     fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1
$LN4@IsolationA:
$LN7@IsolationA:
$LN9@IsolationA:
$Exit$15:

; 608  : Exit:
; 609  :     if (!fResult)

	cmp	DWORD PTR fResult$[rsp], 0
	jne	SHORT $LN10@IsolationA

; 610  :     {
; 611  :         const DWORD dwLastError = GetLastError();

	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR dwLastError$1[rsp], eax

; 612  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 613  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 614  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED
; 615  :             || dwLastError == ERROR_INVALID_FUNCTION
; 616  :             || dwLastError == ERROR_NOT_SUPPORTED)

	cmp	DWORD PTR dwLastError$1[rsp], 127	; 0000007fH
	je	SHORT $LN12@IsolationA
	cmp	DWORD PTR dwLastError$1[rsp], 126	; 0000007eH
	je	SHORT $LN12@IsolationA
	cmp	DWORD PTR dwLastError$1[rsp], 120	; 00000078H
	je	SHORT $LN12@IsolationA
	cmp	DWORD PTR dwLastError$1[rsp], 1
	je	SHORT $LN12@IsolationA
	cmp	DWORD PTR dwLastError$1[rsp], 50	; 00000032H
	jne	SHORT $LN11@IsolationA
$LN12@IsolationA:

; 617  :         {
; 618  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	DWORD PTR IsolationAwarePrivateT_SqbjaYRiRY, 1

; 619  :             fResult = TRUE;

	mov	DWORD PTR fResult$[rsp], 1
$LN11@IsolationA:
$LN10@IsolationA:

; 620  :         }
; 621  :     }
; 622  :     return fResult;

	mov	eax, DWORD PTR fResult$[rsp]

; 623  : }

	add	rsp, 56					; 00000038H
	ret	0
IsolationAwarePrivatenPgViNgRzlnPgpgk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\igradient.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\igradient.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 56					; 00000038H
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
