; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?smooth@@YAMM@Z					; smooth
PUBLIC	?smooth@@YAMMMM@Z				; smooth
PUBLIC	?linear@@YAMMMM@Z				; linear
PUBLIC	?lerp@@YAMMMM@Z					; lerp
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
EXTRN	_fltused:DWORD
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\commonmath.cpp
;	COMDAT ?lerp@@YAMMMM@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
blend$ = 24
?lerp@@YAMMMM@Z PROC					; lerp, COMDAT

; 38   : float lerp(float a, float b, float blend) {

	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0

; 39   : 	return b + blend * (a-b);

	movss	xmm0, DWORD PTR a$[rsp]
	subss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR blend$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR b$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1

; 40   : }

	ret	0
?lerp@@YAMMMM@Z ENDP					; lerp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\commonmath.cpp
;	COMDAT ?linear@@YAMMMM@Z
_TEXT	SEGMENT
d$ = 8
low$ = 16
high$ = 24
?linear@@YAMMMM@Z PROC					; linear, COMDAT

; 31   : float linear(float d, float low, float high) { 

	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0

; 32   : 	d = (d-low)/(high-low);

	movss	xmm0, DWORD PTR d$[rsp]
	subss	xmm0, DWORD PTR low$[rsp]
	movss	xmm1, DWORD PTR high$[rsp]
	subss	xmm1, DWORD PTR low$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR d$[rsp], xmm0

; 33   : 	if (d < 0) return 0.f;

	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN2@linear
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@linear
$LN2@linear:

; 34   : 	if (d > 1) return 1.f;

	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@linear
	movss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN1@linear
$LN3@linear:

; 35   : 	return d;

	movss	xmm0, DWORD PTR d$[rsp]
$LN1@linear:

; 36   : }

	ret	0
?linear@@YAMMMM@Z ENDP					; linear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\commonmath.cpp
;	COMDAT ?smooth@@YAMMMM@Z
_TEXT	SEGMENT
d$ = 8
low$ = 16
high$ = 24
?smooth@@YAMMMM@Z PROC					; smooth, COMDAT

; 24   : float smooth(float d, float low, float high) { 

	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0

; 25   : 	d = (d-low)/(high-low);

	movss	xmm0, DWORD PTR d$[rsp]
	subss	xmm0, DWORD PTR low$[rsp]
	movss	xmm1, DWORD PTR high$[rsp]
	subss	xmm1, DWORD PTR low$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR d$[rsp], xmm0

; 26   : 	if (d < 0) return 0.f;

	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN2@smooth
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@smooth
$LN2@smooth:

; 27   : 	if (d > 1) return 1.f;

	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@smooth
	movss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN1@smooth
$LN3@smooth:

; 28   : 	return (d*d*(3.f-2.f*d));

	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR d$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR d$[rsp]
	movss	xmm2, DWORD PTR __real@40400000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
$LN1@smooth:

; 29   : }

	ret	0
?smooth@@YAMMMM@Z ENDP					; smooth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\commonmath.cpp
;	COMDAT ?smooth@@YAMM@Z
_TEXT	SEGMENT
d$ = 8
?smooth@@YAMM@Z PROC					; smooth, COMDAT

; 20   : float smooth(float d) { 

	movss	DWORD PTR [rsp+8], xmm0

; 21   : 	return (d*d*(3.f-2.f*d));

	movss	xmm0, DWORD PTR d$[rsp]
	mulss	xmm0, DWORD PTR d$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR d$[rsp]
	movss	xmm2, DWORD PTR __real@40400000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1

; 22   : }

	ret	0
?smooth@@YAMM@Z ENDP					; smooth
_TEXT	ENDS
END
