; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24231.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	WinbaseIsolationAwarePrivateT_UnPgpgk
PUBLIC	IsolationAwarePrivateT_SqbjaYRiRY
PUBLIC	IsolationAwarePrivateT_SAbnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
PUBLIC	WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
;	COMDAT IsolationAwarePrivateT_SqbjaYRiRY
_BSS	SEGMENT
IsolationAwarePrivateT_SqbjaYRiRY DD 01H DUP (?)
_BSS	ENDS
;	COMDAT IsolationAwarePrivateT_SAbnPgpgk
_BSS	SEGMENT
IsolationAwarePrivateT_SAbnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ
_BSS	SEGMENT
WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ DD 01H DUP (?)
_BSS	ENDS
;	COMDAT WinbaseIsolationAwarePrivateT_UnPgpgk
_DATA	SEGMENT
WinbaseIsolationAwarePrivateT_UnPgpgk DQ ffffffffffffffffH
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??0Class_ID@@QEAA@KK@Z				; Class_ID::Class_ID
PUBLIC	??D@YA?AVPoint3@@MAEBV0@@Z			; operator*
PUBLIC	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ	; MaxSDK::AssetManagement::AssetId::AssetId
PUBLIC	??0AColor@@QEAA@XZ				; AColor::AColor
PUBLIC	??0AColor@@QEAA@MMMM@Z				; AColor::AColor
PUBLIC	??0AColor@@QEAA@AEBV0@@Z			; AColor::AColor
PUBLIC	??HAColor@@QEBA?AV0@AEBV0@@Z			; AColor::operator+
PUBLIC	??D@YA?AVAColor@@AEBV0@M@Z			; operator*
PUBLIC	?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z	; GradientRamp::setHWND
PUBLIC	?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z		; GradientRamp::paint
PUBLIC	?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ; GradientRamp::paintArrow
PUBLIC	?invalidate@GradientRamp@@QEAAXXZ		; GradientRamp::invalidate
PUBLIC	?hit@GradientRamp@@QEAAHHH_N@Z			; GradientRamp::hit
PUBLIC	?toPos@GradientRamp@@QEAAMH@Z			; GradientRamp::toPos
PUBLIC	?leftDown@GradientRamp@@QEAAXHH_N00@Z		; GradientRamp::leftDown
PUBLIC	?leftUp@GradientRamp@@QEAAXHH_N00@Z		; GradientRamp::leftUp
PUBLIC	?dragging@GradientRamp@@QEAAXHH_N00@Z		; GradientRamp::dragging
PUBLIC	?popup@GradientRamp@@QEAAXHHH@Z			; GradientRamp::popup
PUBLIC	?toIndex@GradientRamp@@QEAAHH@Z			; GradientRamp::toIndex
PUBLIC	?selectKey@GradientRamp@@QEAAXH@Z		; GradientRamp::selectKey
PUBLIC	?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z ; GradientRamp::addKey
PUBLIC	?reset@GradientRamp@@QEAAXXZ			; GradientRamp::reset
PUBLIC	?swap@GradientRamp@@QEAAXHH@Z			; GradientRamp::swap
PUBLIC	?sort@GradientRamp@@QEAAXXZ			; GradientRamp::sort
PUBLIC	?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z	; GradientRamp::getSubtex
PUBLIC	?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z	; GradientRamp::setSubtex
PUBLIC	?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z	; GradientRamp::setSubtex
PUBLIC	?findHighKey@GradientRamp@@QEAAHM@Z		; GradientRamp::findHighKey
PUBLIC	?interpolate@GradientRamp@@QEAAMMMM@Z		; GradientRamp::interpolate
PUBLIC	?getColor@GradientRamp@@QEAA?AVAColor@@M@Z	; GradientRamp::getColor
PUBLIC	?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z ; GradientRamp::getColor
PUBLIC	?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z ; GradientRamp::getBump
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@437f0000
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__imp_BitBlt:PROC
EXTRN	__imp_CreateCompatibleBitmap:PROC
EXTRN	__imp_CreateCompatibleDC:PROC
EXTRN	__imp_CreateSolidBrush:PROC
EXTRN	__imp_DeleteDC:PROC
EXTRN	__imp_DeleteObject:PROC
EXTRN	__imp_SelectObject:PROC
EXTRN	__imp_SetPixel:PROC
EXTRN	__imp_InvalidateRect:PROC
EXTRN	__imp_GetWindowRect:PROC
EXTRN	__imp_FillRect:PROC
EXTRN	__imp_??_UMaxHeapOperators@@SAPEAX_K@Z:PROC
EXTRN	__imp_??_VMaxHeapOperators@@SAXPEAX@Z:PROC
EXTRN	__imp_??0Point3@@QEAA@XZ:PROC
EXTRN	__imp_??0Point3@@QEAA@MMM@Z:PROC
EXTRN	__imp_??0Point3@@QEAA@AEBV0@@Z:PROC
EXTRN	__imp_??HPoint3@@QEBA?AV0@AEBV0@@Z:PROC
EXTRN	__imp_??0Interval@@QEAA@HH@Z:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A DB 010H DUP (?) ; MaxSDK::AssetManagement::kInvalidId
?kTriObjNormalXTCID@@3VClass_ID@@B DQ 01H DUP (?)	; kTriObjNormalXTCID
?intvalid@@3VInterval@@A DQ 01H DUP (?)			; intvalid
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AVPoint3@@MAEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??D@YA?AVPoint3@@MAEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
	DD	imagerel ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ+21
	DD	imagerel $unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??HAColor@@QEBA?AV0@AEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$??HAColor@@QEBA?AV0@AEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AVAColor@@AEBV0@M@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$??D@YA?AVAColor@@AEBV0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EkTriObjNormalXTCID@@YAXXZ DD imagerel ??__EkTriObjNormalXTCID@@YAXXZ
	DD	imagerel ??__EkTriObjNormalXTCID@@YAXXZ+32
	DD	imagerel $unwind$??__EkTriObjNormalXTCID@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eintvalid@@YAXXZ DD imagerel ??__Eintvalid@@YAXXZ
	DD	imagerel ??__Eintvalid@@YAXXZ+33
	DD	imagerel $unwind$??__Eintvalid@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z DD imagerel $LN16
	DD	imagerel $LN16+1283
	DD	imagerel $unwind$?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z DD imagerel $LN11
	DD	imagerel $LN11+230
	DD	imagerel $unwind$?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?invalidate@GradientRamp@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?invalidate@GradientRamp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hit@GradientRamp@@QEAAHHH_N@Z DD imagerel $LN12
	DD	imagerel $LN12+277
	DD	imagerel $unwind$?hit@GradientRamp@@QEAAHHH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toPos@GradientRamp@@QEAAMH@Z DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$?toPos@GradientRamp@@QEAAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?leftDown@GradientRamp@@QEAAXHH_N00@Z DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$?leftDown@GradientRamp@@QEAAXHH_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?leftUp@GradientRamp@@QEAAXHH_N00@Z DD imagerel $LN7
	DD	imagerel $LN7+263
	DD	imagerel $unwind$?leftUp@GradientRamp@@QEAAXHH_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dragging@GradientRamp@@QEAAXHH_N00@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$?dragging@GradientRamp@@QEAAXHH_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?popup@GradientRamp@@QEAAXHHH@Z DD imagerel $LN13
	DD	imagerel $LN13+398
	DD	imagerel $unwind$?popup@GradientRamp@@QEAAXHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toIndex@GradientRamp@@QEAAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+82
	DD	imagerel $unwind$?toIndex@GradientRamp@@QEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?selectKey@GradientRamp@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?selectKey@GradientRamp@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z DD imagerel $LN17
	DD	imagerel $LN17+1258
	DD	imagerel $unwind$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA DD imagerel ?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA
	DD	imagerel ?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA+25
	DD	imagerel $unwind$?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@GradientRamp@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+437
	DD	imagerel $unwind$?reset@GradientRamp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@GradientRamp@@QEAAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+445
	DD	imagerel $unwind$?swap@GradientRamp@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sort@GradientRamp@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+141
	DD	imagerel $unwind$?sort@GradientRamp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?findHighKey@GradientRamp@@QEAAHM@Z DD imagerel $LN8
	DD	imagerel $LN8+151
	DD	imagerel $unwind$?findHighKey@GradientRamp@@QEAAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?interpolate@GradientRamp@@QEAAMMMM@Z DD imagerel $LN10
	DD	imagerel $LN10+232
	DD	imagerel $unwind$?interpolate@GradientRamp@@QEAAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getColor@GradientRamp@@QEAA?AVAColor@@M@Z DD imagerel $LN12
	DD	imagerel $LN12+623
	DD	imagerel $unwind$?getColor@GradientRamp@@QEAA?AVAColor@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z DD imagerel $LN26
	DD	imagerel $LN26+1751
	DD	imagerel $unwind$?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z DD imagerel $LN26
	DD	imagerel $LN26+1847
	DD	imagerel $unwind$?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?kInvalidId$initializer$@AssetManagement@MaxSDK@@3P6AXXZEA DQ FLAT:??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ; MaxSDK::AssetManagement::kInvalidId$initializer$
CRT$XCU	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z DD 043019H
	DD	033011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0188H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z DD 021c01H
	DD	037011cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getColor@GradientRamp@@QEAA?AVAColor@@M@Z DD 011401H
	DD	0c214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?interpolate@GradientRamp@@QEAAMMMM@Z DD 011b01H
	DD	0221bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?findHighKey@GradientRamp@@QEAAHM@Z DD 010f01H
	DD	0220fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sort@GradientRamp@@QEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@GradientRamp@@QEAAXHH@Z DD 032319H
	DD	07010a214H
	DD	0600fH
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@GradientRamp@@QEAAXXZ DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z DD imagerel ?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
	DD	0ffffffffH
	DD	imagerel ?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z+514
	DD	00H
	DD	imagerel ?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z+583
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
	DD	0c0H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z DD 042911H
	DD	01b011dH
	DD	060157016H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?selectKey@GradientRamp@@QEAAXH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toIndex@GradientRamp@@QEAAHH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?popup@GradientRamp@@QEAAXHHH@Z DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dragging@GradientRamp@@QEAAXHH_N00@Z DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?leftUp@GradientRamp@@QEAAXHH_N00@Z DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?leftDown@GradientRamp@@QEAAXHH_N00@Z DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toPos@GradientRamp@@QEAAMH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hit@GradientRamp@@QEAAHHH_N@Z DD 011701H
	DD	02217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?invalidate@GradientRamp@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z DD 022319H
	DD	01b0111H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z DD 011d19H
	DD	0820eH
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eintvalid@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkTriObjNormalXTCID@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AVAColor@@AEBV0@M@Z DD 011401H
	DD	08214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??HAColor@@QEBA?AV0@AEBV0@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ DD 020701H
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AVPoint3@@MAEBV0@@Z DD 011401H
	DD	06214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?kTriObjNormalXTCID$initializer$@@3P6AXXZEA DQ FLAT:??__EkTriObjNormalXTCID@@YAXXZ ; kTriObjNormalXTCID$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?intvalid$initializer$@@3P6AXXZEA DQ FLAT:??__Eintvalid@@YAXXZ ; intvalid$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z
_TEXT	SEGMENT
maps$ = 32
high$ = 36
low$ = 40
key$1 = 44
tv241 = 48
mult$2 = 52
tv90 = 56
tv161 = 64
tv195 = 72
tv227 = 80
tv270 = 88
$T3 = 96
$T4 = 104
$T5 = 112
$T6 = 120
$T7 = 128
tv384 = 136
$T8 = 144
$T9 = 156
$T10 = 168
$T11 = 180
$T12 = 192
$T13 = 204
$T14 = 216
$T15 = 228
$T16 = 240
$T17 = 252
$T18 = 264
$T19 = 276
$T20 = 288
$T21 = 300
$T22 = 312
$T23 = 324
$T24 = 336
$T25 = 348
v1$ = 360
v2$ = 376
__$ArrayPad$ = 392
this$ = 432
__$ReturnUdt$ = 440
x$ = 448
normal$ = 456
sc$ = 464
?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z PROC ; GradientRamp::getBump, COMDAT

; 495  : Point3 GradientRamp::getBump(float x, Point3 normal, ShadeContext& sc) {

$LN26:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 496  : 	if (x<=0) return subtex[0]?subtex[0]->EvalNormalPerturb(sc):NOBUMP;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	$LN2@getBump
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+rcx], 0
	je	SHORT $LN14@getBump
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx+rdx]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T10[rsp]
	call	QWORD PTR [rax+1520]
	mov	QWORD PTR tv90[rsp], rax
	jmp	SHORT $LN15@getBump
$LN14@getBump:
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T11[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv90[rsp], rax
$LN15@getBump:
	mov	rax, QWORD PTR tv90[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getBump
$LN2@getBump:

; 497  : 	if (x>=1) return subtex[keys-1]?subtex[keys-1]->EvalNormalPerturb(sc):NOBUMP;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN3@getBump
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN16@getBump
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	call	QWORD PTR [rax+1520]
	mov	QWORD PTR tv161[rsp], rax
	jmp	SHORT $LN17@getBump
$LN16@getBump:
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv161[rsp], rax
$LN17@getBump:
	mov	rax, QWORD PTR tv161[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getBump
$LN3@getBump:

; 498  : 	int high = findHighKey(x);

	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?findHighKey@GradientRamp@@QEAAHM@Z	; GradientRamp::findHighKey
	mov	DWORD PTR high$[rsp], eax

; 499  : 	if (interpolation == 4) return subtex[high]?subtex[high]->EvalNormalPerturb(sc):NOBUMP;

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 4
	jne	$LN4@getBump
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN18@getBump
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR high$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T14[rsp]
	call	QWORD PTR [rax+1520]
	mov	QWORD PTR tv195[rsp], rax
	jmp	SHORT $LN19@getBump
$LN18@getBump:
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T15[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv195[rsp], rax
$LN19@getBump:
	mov	rax, QWORD PTR tv195[rsp]
	mov	QWORD PTR $T5[rsp], rax
	mov	rdx, QWORD PTR $T5[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getBump
$LN4@getBump:

; 500  : 	int low = high - 1;	

	mov	eax, DWORD PTR high$[rsp]
	dec	eax
	mov	DWORD PTR low$[rsp], eax

; 501  : 	if (interpolation == 3) return subtex[low]?subtex[low]->EvalNormalPerturb(sc):NOBUMP;	

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 3
	jne	$LN5@getBump
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN20@getBump
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR low$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	call	QWORD PTR [rax+1520]
	mov	QWORD PTR tv227[rsp], rax
	jmp	SHORT $LN21@getBump
$LN20@getBump:
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T17[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv227[rsp], rax
$LN21@getBump:
	mov	rax, QWORD PTR tv227[rsp]
	mov	QWORD PTR $T6[rsp], rax
	mov	rdx, QWORD PTR $T6[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getBump
$LN5@getBump:

; 502  : 	if (interpolation == 2) {		

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 2
	jne	$LN6@getBump

; 503  : 		int key = x-position[low]<position[high]-x?low:high;

	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	subss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm0, xmm1
	jae	SHORT $LN22@getBump
	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR tv241[rsp], eax
	jmp	SHORT $LN23@getBump
$LN22@getBump:
	mov	eax, DWORD PTR high$[rsp]
	mov	DWORD PTR tv241[rsp], eax
$LN23@getBump:
	mov	eax, DWORD PTR tv241[rsp]
	mov	DWORD PTR key$1[rsp], eax

; 504  : 		return subtex[key]?subtex[key]->EvalNormalPerturb(sc):NOBUMP;

	movsxd	rax, DWORD PTR key$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN24@getBump
	movsxd	rax, DWORD PTR key$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR key$1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	call	QWORD PTR [rax+1520]
	mov	QWORD PTR tv270[rsp], rax
	jmp	SHORT $LN25@getBump
$LN24@getBump:
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T19[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	QWORD PTR tv270[rsp], rax
$LN25@getBump:
	mov	rax, QWORD PTR tv270[rsp]
	mov	QWORD PTR $T7[rsp], rax
	mov	rdx, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getBump
$LN6@getBump:

; 505  : 	}
; 506  : 
; 507  : 	//float f1, f2;
; 508  : 	Point3 v1, v2;

	lea	rcx, QWORD PTR v1$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@XZ
	lea	rcx, QWORD PTR v2$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@XZ

; 509  : 	bool maps = false;

	mov	BYTE PTR maps$[rsp], 0

; 510  : 	if (subtex[0]) {

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+rcx], 0
	je	SHORT $LN7@getBump

; 511  : 		//f1 = subtex[low]->EvalMono(sc);
; 512  : 		v1 = subtex[low]->EvalNormalPerturb(sc);

	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR low$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T20[rsp]
	call	QWORD PTR [rax+1520]
	lea	rcx, QWORD PTR v1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 513  : 		maps = true;

	mov	BYTE PTR maps$[rsp], 1

; 514  : 	} else {

	jmp	SHORT $LN8@getBump
$LN7@getBump:

; 515  : 		//f1 = Intens(color[low]);
; 516  : 		v1 = Point3(0.f, 0.f, 0.f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T21[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	lea	rcx, QWORD PTR v1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN8@getBump:

; 517  : 	}
; 518  : 	if (subtex[1]) {

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+rcx], 0
	je	SHORT $LN9@getBump

; 519  : 		//f2 = subtex[high]->EvalMono(sc);
; 520  : 		v2 = subtex[high]->EvalNormalPerturb(sc);

	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR high$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T22[rsp]
	call	QWORD PTR [rax+1520]
	lea	rcx, QWORD PTR v2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 521  : 		maps = true;

	mov	BYTE PTR maps$[rsp], 1

; 522  : 	} else {

	jmp	SHORT $LN10@getBump
$LN9@getBump:

; 523  : 		//f2 = Intens(color[high]);
; 524  : 		v2 = Point3(0.f, 0.f, 0.f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T23[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	lea	rcx, QWORD PTR v2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN10@getBump:

; 525  : 	}
; 526  : 	
; 527  : 	// Calculate vector	
; 528  : 	if (maps) {

	movzx	eax, BYTE PTR maps$[rsp]
	test	eax, eax
	je	$LN11@getBump

; 529  : 		float mult = interpolate(x, position[low], position[high]);

	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR low$[rsp]
	mov	rdi, QWORD PTR this$[rsp]
	mov	rdi, QWORD PTR [rdi+32]
	movss	xmm3, DWORD PTR [rcx+rax*4]
	movss	xmm2, DWORD PTR [rdi+rdx*4]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?interpolate@GradientRamp@@QEAAMMMM@Z	; GradientRamp::interpolate
	movss	DWORD PTR mult$2[rsp], xmm0

; 530  : 		v1 = /*(f2-f1)**/ normal + mult*v2 + (1.f-mult)*v1;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR mult$2[rsp]
	lea	r8, QWORD PTR v1$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T24[rsp]
	call	??D@YA?AVPoint3@@MAEBV0@@Z		; operator*
	mov	QWORD PTR tv384[rsp], rax
	lea	r8, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR mult$2[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??D@YA?AVPoint3@@MAEBV0@@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR $T8[rsp]
	mov	rcx, QWORD PTR normal$[rsp]
	call	QWORD PTR __imp_??HPoint3@@QEBA?AV0@AEBV0@@Z
	mov	rcx, QWORD PTR tv384[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_??HPoint3@@QEBA?AV0@AEBV0@@Z
	lea	rcx, QWORD PTR v1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 531  : 	} else {

	jmp	SHORT $LN12@getBump
$LN11@getBump:

; 532  : 		v1 = normal; // * (f2 - f1);

	lea	rax, QWORD PTR v1$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR normal$[rsp]
	mov	ecx, 12
	rep movsb
$LN12@getBump:

; 533  : 	}
; 534  : 
; 535  : 	return v1;

	lea	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@AEBV0@@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@getBump:

; 536  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?getBump@GradientRamp@@QEAA?AVPoint3@@MV2@AEAVShadeContext@@@Z ENDP ; GradientRamp::getBump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z
_TEXT	SEGMENT
high$ = 32
low$ = 36
key$1 = 40
tv206 = 44
tv253 = 48
mult$ = 52
tv91 = 56
tv167 = 64
tv203 = 72
tv239 = 80
tv284 = 88
tv365 = 96
tv330 = 104
$T2 = 112
$T3 = 120
$T4 = 128
$T5 = 136
$T6 = 144
$T7 = 152
$T8 = 160
tv335 = 168
$T9 = 176
$T10 = 192
$T11 = 208
$T12 = 224
$T13 = 240
$T14 = 256
$T15 = 272
$T16 = 288
$T17 = 304
$T18 = 320
$T19 = 336
$T20 = 352
$T21 = 368
$T22 = 384
$T23 = 400
$T24 = 416
this$ = 448
__$ReturnUdt$ = 456
x$ = 464
sc$ = 472
?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z PROC ; GradientRamp::getColor, COMDAT

; 478  : AColor GradientRamp::getColor(float x, ShadeContext& sc) {

$LN26:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 440				; 000001b8H

; 479  : 	if (x<=0) return subtex[0]?subtex[0]->EvalColor(sc):color[0];

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	$LN2@getColor
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+rcx], 0
	je	SHORT $LN8@getColor
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx+rdx]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T9[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv91[rsp], rax
	jmp	SHORT $LN9@getColor
$LN8@getColor:
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv91[rsp], rax
$LN9@getColor:
	mov	rax, QWORD PTR tv91[rsp]
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN2@getColor:

; 480  : 	if (x>=1) return subtex[keys-1]?subtex[keys-1]->EvalColor(sc):color[keys-1];

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN3@getColor
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN10@getColor
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T11[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv167[rsp], rax
	jmp	SHORT $LN11@getColor
$LN10@getColor:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv167[rsp], rax
$LN11@getColor:
	mov	rax, QWORD PTR tv167[rsp]
	mov	QWORD PTR $T3[rsp], rax
	mov	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN3@getColor:

; 481  : 	int high = findHighKey(x);

	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?findHighKey@GradientRamp@@QEAAHM@Z	; GradientRamp::findHighKey
	mov	DWORD PTR high$[rsp], eax

; 482  : 	if (interpolation == 4) return subtex[high]?subtex[high]->EvalColor(sc):color[high];

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 4
	jne	$LN4@getColor
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN12@getColor
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR high$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv203[rsp], rax
	jmp	SHORT $LN13@getColor
$LN12@getColor:
	movsxd	rax, DWORD PTR high$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv203[rsp], rax
$LN13@getColor:
	mov	rax, QWORD PTR tv203[rsp]
	mov	QWORD PTR $T4[rsp], rax
	mov	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN4@getColor:

; 483  : 	int low = (high > 0 ? high - 1 : 0); // should never happen but just in case

	cmp	DWORD PTR high$[rsp], 0
	jle	SHORT $LN14@getColor
	mov	eax, DWORD PTR high$[rsp]
	dec	eax
	mov	DWORD PTR tv206[rsp], eax
	jmp	SHORT $LN15@getColor
$LN14@getColor:
	mov	DWORD PTR tv206[rsp], 0
$LN15@getColor:
	mov	eax, DWORD PTR tv206[rsp]
	mov	DWORD PTR low$[rsp], eax

; 484  : 	if (interpolation == 3) return subtex[low]?subtex[low]->EvalColor(sc):color[low];	

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 3
	jne	$LN5@getColor
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN16@getColor
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR low$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv239[rsp], rax
	jmp	SHORT $LN17@getColor
$LN16@getColor:
	movsxd	rax, DWORD PTR low$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv239[rsp], rax
$LN17@getColor:
	mov	rax, QWORD PTR tv239[rsp]
	mov	QWORD PTR $T5[rsp], rax
	mov	rdx, QWORD PTR $T5[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN5@getColor:

; 485  : 	if (interpolation == 2) {		

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 2
	jne	$LN6@getColor

; 486  : 		int key = x-position[low]<position[high]-x?low:high;

	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	subss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm0, xmm1
	jae	SHORT $LN18@getColor
	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR tv253[rsp], eax
	jmp	SHORT $LN19@getColor
$LN18@getColor:
	mov	eax, DWORD PTR high$[rsp]
	mov	DWORD PTR tv253[rsp], eax
$LN19@getColor:
	mov	eax, DWORD PTR tv253[rsp]
	mov	DWORD PTR key$1[rsp], eax

; 487  : 		return subtex[key]?subtex[key]->EvalColor(sc):color[key];

	movsxd	rax, DWORD PTR key$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN20@getColor
	movsxd	rax, DWORD PTR key$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR key$1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv284[rsp], rax
	jmp	SHORT $LN21@getColor
$LN20@getColor:
	movsxd	rax, DWORD PTR key$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv284[rsp], rax
$LN21@getColor:
	mov	rax, QWORD PTR tv284[rsp]
	mov	QWORD PTR $T6[rsp], rax
	mov	rdx, QWORD PTR $T6[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN6@getColor:

; 488  : 	}
; 489  : 	float mult = interpolate(x, position[low], position[high]);

	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR low$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+32]
	movss	xmm3, DWORD PTR [rcx+rax*4]
	movss	xmm2, DWORD PTR [r8+rdx*4]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?interpolate@GradientRamp@@QEAAMMMM@Z	; GradientRamp::interpolate
	movss	DWORD PTR mult$[rsp], xmm0

; 490  : 	return (subtex[low]?subtex[low]->EvalColor(sc):color[low])

	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN24@getColor
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR high$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv365[rsp], rax
	jmp	SHORT $LN25@getColor
$LN24@getColor:
	movsxd	rax, DWORD PTR high$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv365[rsp], rax
$LN25@getColor:
	mov	rax, QWORD PTR tv365[rsp]
	mov	QWORD PTR $T7[rsp], rax
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN22@getColor
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR low$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR sc$[rsp]
	lea	rdx, QWORD PTR $T21[rsp]
	call	QWORD PTR [rax+1504]
	mov	QWORD PTR tv330[rsp], rax
	jmp	SHORT $LN23@getColor
$LN22@getColor:
	movsxd	rax, DWORD PTR low$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	QWORD PTR tv330[rsp], rax
$LN23@getColor:
	mov	rax, QWORD PTR tv330[rsp]
	mov	QWORD PTR $T8[rsp], rax
	movss	xmm2, DWORD PTR mult$[rsp]
	mov	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??D@YA?AVAColor@@AEBV0@M@Z		; operator*
	mov	QWORD PTR tv335[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR mult$[rsp]
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??D@YA?AVAColor@@AEBV0@M@Z		; operator*
	mov	rcx, QWORD PTR tv335[rsp]
	mov	r8, rcx
	mov	rdx, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, rax
	call	??HAColor@@QEBA?AV0@AEBV0@@Z		; AColor::operator+
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@getColor:

; 491  : 		* (1.f - mult) + (subtex[high]?subtex[high]->EvalColor(sc):color[high]) * mult;
; 492  : }

	add	rsp, 440				; 000001b8H
	ret	0
?getColor@GradientRamp@@QEAA?AVAColor@@MAEAVShadeContext@@@Z ENDP ; GradientRamp::getColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?getColor@GradientRamp@@QEAA?AVAColor@@M@Z
_TEXT	SEGMENT
high$ = 32
low$ = 36
tv93 = 40
tv152 = 44
mult$ = 48
tv181 = 56
$T1 = 64
$T2 = 80
this$ = 112
__$ReturnUdt$ = 120
x$ = 128
?getColor@GradientRamp@@QEAA?AVAColor@@M@Z PROC		; GradientRamp::getColor, COMDAT

; 466  : AColor GradientRamp::getColor(float x) {

$LN12:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 467  : 	if (x<=0) return color[0];

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN2@getColor
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN2@getColor:

; 468  : 	if (x>=1) return color[keys-1];

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@getColor
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN3@getColor:

; 469  : 	int high = findHighKey(x);

	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?findHighKey@GradientRamp@@QEAAHM@Z	; GradientRamp::findHighKey
	mov	DWORD PTR high$[rsp], eax

; 470  : 	if (interpolation == 4) return color[high];

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 4
	jne	SHORT $LN4@getColor
	movsxd	rax, DWORD PTR high$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN4@getColor:

; 471  : 	int low = (high > 0 ? high - 1 : 0); // should never happen but just in case

	cmp	DWORD PTR high$[rsp], 0
	jle	SHORT $LN8@getColor
	mov	eax, DWORD PTR high$[rsp]
	dec	eax
	mov	DWORD PTR tv93[rsp], eax
	jmp	SHORT $LN9@getColor
$LN8@getColor:
	mov	DWORD PTR tv93[rsp], 0
$LN9@getColor:
	mov	eax, DWORD PTR tv93[rsp]
	mov	DWORD PTR low$[rsp], eax

; 472  : 	if (interpolation == 3) return color[low];

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 3
	jne	SHORT $LN5@getColor
	movsxd	rax, DWORD PTR low$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN5@getColor:

; 473  : 	if (interpolation == 2) return color[x-position[low]<position[high]-x?low:high];

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+68], 2
	jne	SHORT $LN6@getColor
	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	subss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm0, xmm1
	jae	SHORT $LN10@getColor
	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	jmp	SHORT $LN11@getColor
$LN10@getColor:
	mov	eax, DWORD PTR high$[rsp]
	mov	DWORD PTR tv152[rsp], eax
$LN11@getColor:
	movsxd	rax, DWORD PTR tv152[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@getColor
$LN6@getColor:

; 474  : 	float mult = interpolate(x, position[low], position[high]);

	movsxd	rax, DWORD PTR high$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR low$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+32]
	movss	xmm3, DWORD PTR [rcx+rax*4]
	movss	xmm2, DWORD PTR [r8+rdx*4]
	movss	xmm1, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?interpolate@GradientRamp@@QEAAMMMM@Z	; GradientRamp::interpolate
	movss	DWORD PTR mult$[rsp], xmm0

; 475  : 	return color[low] * (1.f - mult) + color[high] * mult;

	movsxd	rax, DWORD PTR high$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	movss	xmm2, DWORD PTR mult$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??D@YA?AVAColor@@AEBV0@M@Z		; operator*
	mov	QWORD PTR tv181[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR mult$[rsp]
	movsxd	rcx, DWORD PTR low$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR this$[rsp]
	add	rcx, QWORD PTR [rdx+40]
	movaps	xmm2, xmm0
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??D@YA?AVAColor@@AEBV0@M@Z		; operator*
	mov	rcx, QWORD PTR tv181[rsp]
	mov	r8, rcx
	mov	rdx, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, rax
	call	??HAColor@@QEBA?AV0@AEBV0@@Z		; AColor::operator+
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@getColor:

; 476  : }

	add	rsp, 104				; 00000068H
	ret	0
?getColor@GradientRamp@@QEAA?AVAColor@@M@Z ENDP		; GradientRamp::getColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?interpolate@GradientRamp@@QEAAMMMM@Z
_TEXT	SEGMENT
tv65 = 0
this$ = 32
x$ = 40
low$ = 48
high$ = 56
?interpolate@GradientRamp@@QEAAMMMM@Z PROC		; GradientRamp::interpolate, COMDAT

; 452  : float GradientRamp::interpolate(float x, float low, float high) {

$LN10:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 453  : 	//int interpolation; // 0 linear 1 smooth 2 solid near 3 solid left 4 solid right	
; 454  : 	switch (interpolation) {

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+68]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN4@interpolat
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN5@interpolat
	jmp	$LN2@interpolat
$LN4@interpolat:

; 455  : 		case 0:	
; 456  : 			return (x - low) / (high - low);

	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR low$[rsp]
	movss	xmm1, DWORD PTR high$[rsp]
	subss	xmm1, DWORD PTR low$[rsp]
	divss	xmm0, xmm1
	jmp	$LN1@interpolat
$LN5@interpolat:

; 457  : 		case 1:	
; 458  : 			x = (x-low)/(high-low);

	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR low$[rsp]
	movss	xmm1, DWORD PTR high$[rsp]
	subss	xmm1, DWORD PTR low$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR x$[rsp], xmm0

; 459  : 			if (x < 0.f) x = 0.f;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN6@interpolat
	xorps	xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
	jmp	SHORT $LN7@interpolat
$LN6@interpolat:

; 460  : 			else if (x > 1.f) x = 1.f;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN8@interpolat
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR x$[rsp], xmm0
$LN8@interpolat:
$LN7@interpolat:

; 461  : 			return (x*x*(3.f-2.f*x));

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR __real@40400000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	jmp	SHORT $LN1@interpolat
$LN2@interpolat:

; 462  : 	}
; 463  : 	return 0.f;

	xorps	xmm0, xmm0
$LN1@interpolat:

; 464  : }

	add	rsp, 24
	ret	0
?interpolate@GradientRamp@@QEAAMMMM@Z ENDP		; GradientRamp::interpolate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?findHighKey@GradientRamp@@QEAAHM@Z
_TEXT	SEGMENT
low$ = 0
high$ = 4
mid$ = 8
this$ = 32
x$ = 40
?findHighKey@GradientRamp@@QEAAHM@Z PROC		; GradientRamp::findHighKey, COMDAT

; 436  : int GradientRamp::findHighKey(float x) {

$LN8:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 437  : 	int low = 0;

	mov	DWORD PTR low$[rsp], 0

; 438  : 	int high = keys-1;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	mov	DWORD PTR high$[rsp], eax

; 439  : 	int mid;	
; 440  : 	if (x < position[low])

	movsxd	rax, DWORD PTR low$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR [rcx+rax*4]
	jae	SHORT $LN4@findHighKe

; 441  : 		return low;

	mov	eax, DWORD PTR low$[rsp]
	jmp	SHORT $LN1@findHighKe
$LN4@findHighKe:
$LN2@findHighKe:

; 442  : 	while (low < (high-1)) {

	mov	eax, DWORD PTR high$[rsp]
	dec	eax
	cmp	DWORD PTR low$[rsp], eax
	jge	SHORT $LN3@findHighKe

; 443  : 		mid = (low + high) / 2;

	mov	eax, DWORD PTR high$[rsp]
	mov	ecx, DWORD PTR low$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR mid$[rsp], eax

; 444  : 		if (x < position[mid])

	movsxd	rax, DWORD PTR mid$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR [rcx+rax*4]
	jae	SHORT $LN5@findHighKe

; 445  : 			high  = mid;

	mov	eax, DWORD PTR mid$[rsp]
	mov	DWORD PTR high$[rsp], eax

; 446  : 		else

	jmp	SHORT $LN6@findHighKe
$LN5@findHighKe:

; 447  : 			low = mid;		

	mov	eax, DWORD PTR mid$[rsp]
	mov	DWORD PTR low$[rsp], eax
$LN6@findHighKe:

; 448  : 	}

	jmp	SHORT $LN2@findHighKe
$LN3@findHighKe:

; 449  : 	return high;

	mov	eax, DWORD PTR high$[rsp]
$LN1@findHighKe:

; 450  : }

	add	rsp, 24
	ret	0
?findHighKey@GradientRamp@@QEAAHM@Z ENDP		; GradientRamp::findHighKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z
_TEXT	SEGMENT
this$ = 48
sub$ = 56
?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z PROC	; GradientRamp::setSubtex, COMDAT

; 411  : void GradientRamp::setSubtex(Texmap* sub) { 

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 412  : 	if (selected >= 0 && selected < keys)

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+64], 0
	jl	SHORT $LN2@setSubtex
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+64], ecx
	jge	SHORT $LN2@setSubtex

; 413  : 		setSubtex(selected, sub);

	mov	r8, QWORD PTR sub$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	call	?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z ; GradientRamp::setSubtex
$LN2@setSubtex:

; 414  : }	

	add	rsp, 40					; 00000028H
	ret	0
?setSubtex@GradientRamp@@QEAAXPEAVTexmap@@@Z ENDP	; GradientRamp::setSubtex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
sub$ = 64
?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z PROC	; GradientRamp::setSubtex, COMDAT

; 407  : void GradientRamp::setSubtex(int n, Texmap* sub) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 408  : 	subtex[toIndex(n)] = sub;

	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, rax
	call	?toIndex@GradientRamp@@QEAAHH@Z		; GradientRamp::toIndex
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR sub$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 409  : }

	add	rsp, 40					; 00000028H
	ret	0
?setSubtex@GradientRamp@@QEAAXHPEAVTexmap@@@Z ENDP	; GradientRamp::setSubtex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z PROC	; GradientRamp::getSubtex, COMDAT

; 396  : Texmap* GradientRamp::getSubtex(int n) {

$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 397  : 	if (n == -1)

	cmp	DWORD PTR n$[rsp], -1
	jne	SHORT $LN2@getSubtex

; 398  : 		if (selected >= 0 && selected < keys)

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+64], 0
	jl	SHORT $LN4@getSubtex
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+64], ecx
	jge	SHORT $LN4@getSubtex

; 399  : 			return subtex[toIndex(selected)];

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rcx+64]
	mov	rcx, rax
	call	?toIndex@GradientRamp@@QEAAHH@Z		; GradientRamp::toIndex
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	jmp	SHORT $LN1@getSubtex

; 400  : 		else

	jmp	SHORT $LN5@getSubtex
$LN4@getSubtex:

; 401  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@getSubtex
$LN5@getSubtex:

; 402  : 	else

	jmp	SHORT $LN3@getSubtex
$LN2@getSubtex:

; 403  : 		return subtex[toIndex(n)]; 

	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, rax
	call	?toIndex@GradientRamp@@QEAAHH@Z		; GradientRamp::toIndex
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
$LN3@getSubtex:
$LN1@getSubtex:

; 404  : }

	add	rsp, 40					; 00000028H
	ret	0
?getSubtex@GradientRamp@@QEAAPEAVTexmap@@H@Z ENDP	; GradientRamp::getSubtex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?sort@GradientRamp@@QEAAXXZ
_TEXT	SEGMENT
i$ = 32
this$ = 64
?sort@GradientRamp@@QEAAXXZ PROC			; GradientRamp::sort, COMDAT

; 378  : void GradientRamp::sort() {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 379  : 	int i = 1;	

	mov	DWORD PTR i$[rsp], 1
$LN2@sort:

; 380  : 	while (i < keys) {

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@sort

; 381  : 		if (position[i-1] <= position[i]) {

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+32]
	movss	xmm0, DWORD PTR [r8+rdx*4]
	comiss	xmm0, DWORD PTR [rcx+rax*4]
	jb	SHORT $LN4@sort

; 382  : 	        i++;			

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 383  : 		} else {

	jmp	SHORT $LN5@sort
$LN4@sort:

; 384  : 			swap(i-1, i);

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	r8d, DWORD PTR i$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rsp]
	call	?swap@GradientRamp@@QEAAXHH@Z		; GradientRamp::swap

; 385  : 			i--;

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax

; 386  : 			if (i <= 0)

	cmp	DWORD PTR i$[rsp], 0
	jg	SHORT $LN6@sort

; 387  : 				i = 1;

	mov	DWORD PTR i$[rsp], 1
$LN6@sort:
$LN5@sort:

; 388  : 		}
; 389  : 	} 

	jmp	SHORT $LN2@sort
$LN3@sort:

; 390  : }

	add	rsp, 56					; 00000038H
	ret	0
?sort@GradientRamp@@QEAAXXZ ENDP			; GradientRamp::sort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?swap@GradientRamp@@QEAAXHH@Z
_TEXT	SEGMENT
pos$ = 32
num$ = 36
sub$ = 40
col$ = 48
__$ArrayPad$ = 64
this$ = 112
a$ = 120
b$ = 128
?swap@GradientRamp@@QEAAXHH@Z PROC			; GradientRamp::swap, COMDAT

; 361  : void GradientRamp::swap(int a, int b) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 362  : 	Texmap* sub	= subtex[a];

	movsxd	rax, DWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR sub$[rsp], rax

; 363  : 	float pos	= position[a];

	movsxd	rax, DWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR pos$[rsp], xmm0

; 364  : 	AColor col	= color[a];

	movsxd	rax, DWORD PTR a$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	rdx, rax
	lea	rcx, QWORD PTR col$[rsp]
	call	??0AColor@@QEAA@AEBV0@@Z		; AColor::AColor

; 365  : 	int num		= number[a];

	movsxd	rax, DWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR num$[rsp], eax

; 366  : 	
; 367  : 	subtex[a]	= subtex[b];

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsxd	rdx, DWORD PTR a$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [r8+rdx*8], rax

; 368  : 	position[a] = position[b];

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR a$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+32]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR [r8+rdx*4], xmm0

; 369  : 	color[a]	= color[b];

	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movsxd	rdx, DWORD PTR a$[rsp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+40]
	lea	rdi, QWORD PTR [r8+rdx]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb

; 370  : 	number[a]	= number[b];

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	movsxd	rdx, DWORD PTR a$[rsp]
	mov	rdi, QWORD PTR this$[rsp]
	mov	rdi, QWORD PTR [rdi+48]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [rdi+rdx*4], eax

; 371  : 
; 372  : 	subtex[b]	= sub;

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR sub$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 373  : 	position[b] = pos;

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR pos$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0

; 374  : 	color[b]	= col;

	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	lea	rdx, QWORD PTR col$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb

; 375  : 	number[b]	= num;

	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR num$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 376  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?swap@GradientRamp@@QEAAXHH@Z ENDP			; GradientRamp::swap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?reset@GradientRamp@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 80
$T6 = 88
$T7 = 96
$T8 = 112
this$ = 144
?reset@GradientRamp@@QEAAXXZ PROC			; GradientRamp::reset, COMDAT

; 344  : void GradientRamp::reset() {		

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 345  : 	keys = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+56], 0

; 346  : 	
; 347  : 	if (subtex) delete[] subtex;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN2@reset
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]
$LN2@reset:

; 348  : 	if (position) delete[] position;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN3@reset
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR $T2[rsp], rax
	mov	rcx, QWORD PTR $T2[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]
$LN3@reset:

; 349  : 	if (color) delete[] color;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN4@reset
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR $T3[rsp], rax
	mov	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR __imp_??_VMaxHeapOperators@@SAXPEAX@Z
$LN4@reset:

; 350  : 	if (number) delete[] number;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN5@reset
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR $T4[rsp], rax
	mov	rcx, QWORD PTR $T4[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]
$LN5@reset:

; 351  : 	
; 352  : 	subtex = NULL;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 353  : 	position = NULL;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 354  : 	color = NULL;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+40], 0

; 355  : 	number = NULL;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+48], 0

; 356  : 
; 357  : 	addKey(0, 0.f, AColor(0.f,0.f,0.f,1.f), NULL);

	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR $T5[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR $T5[rsp]
	call	??0AColor@@QEAA@MMMM@Z			; AColor::AColor
	mov	QWORD PTR [rsp+32], 0
	mov	r9, rax
	xorps	xmm2, xmm2
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rsp]
	call	?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z ; GradientRamp::addKey

; 358  : 	addKey(1, 1.f, AColor(1.f,1.f,1.f,1.f), NULL);	

	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR $T6[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	mov	rcx, QWORD PTR $T6[rsp]
	call	??0AColor@@QEAA@MMMM@Z			; AColor::AColor
	mov	QWORD PTR [rsp+32], 0
	mov	r9, rax
	movss	xmm2, DWORD PTR __real@3f800000
	mov	edx, 1
	mov	rcx, QWORD PTR this$[rsp]
	call	?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z ; GradientRamp::addKey

; 359  : }

	add	rsp, 136				; 00000088H
	ret	0
?reset@GradientRamp@@QEAAXXZ ENDP			; GradientRamp::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
key$ = 40
$T3 = 48
t_subtex$ = 56
t_position$ = 64
t_color$ = 72
t_number$ = 80
$T4 = 88
tv167 = 96
tv128 = 104
$T5 = 112
tv140 = 120
$T6 = 128
$T7 = 136
tv171 = 144
$T8 = 152
$T9 = 160
$T10 = 168
$T11 = 176
$T12 = 184
$T13 = 192
this$ = 240
n$ = 248
pos$ = 256
col$ = 264
sub$ = 272
?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z PROC ; GradientRamp::addKey, COMDAT

; 296  : void GradientRamp::addKey(int n, float pos, AColor col, Texmap* sub) {

$LN17:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	QWORD PTR $T13[rsp], -2

; 297  : 	if (pos < 0.f) pos = 0.f;

	movss	xmm0, DWORD PTR pos$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN8@addKey
	xorps	xmm0, xmm0
	movss	DWORD PTR pos$[rsp], xmm0
	jmp	SHORT $LN9@addKey
$LN8@addKey:

; 298  : 	else if (pos > 1.f) pos = 1.f;

	movss	xmm0, DWORD PTR pos$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@addKey
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pos$[rsp], xmm0
$LN9@addKey:

; 299  : 
; 300  : 	int key = -1;

	mov	DWORD PTR key$[rsp], -1

; 301  : 	for (int i=0;i<keys;i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@addKey
$LN2@addKey:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@addKey:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN3@addKey

; 302  : 		if (number[i] == n)

	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rcx+rax*4], edx
	jne	SHORT $LN11@addKey

; 303  : 			key = i;

	mov	eax, DWORD PTR i$2[rsp]
	mov	DWORD PTR key$[rsp], eax
$LN11@addKey:

; 304  : 
; 305  : 	if (key >= 0) { // update only, no keys added

	jmp	SHORT $LN2@addKey
$LN3@addKey:
	cmp	DWORD PTR key$[rsp], 0
	jl	SHORT $LN12@addKey

; 306  : 		subtex[key] = sub;

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR sub$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 307  : 		position[key] = pos;

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR pos$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0

; 308  : 		color[key] = col;

	movsxd	rax, DWORD PTR key$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR col$[rsp]
	mov	ecx, 16
	rep movsb

; 309  : 		return;

	jmp	$LN1@addKey
$LN12@addKey:

; 310  : 	}
; 311  : 
; 312  : 	keys++;	

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	inc	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+56], eax

; 313  : 	Texmap** t_subtex = new Texmap*[keys];

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	QWORD PTR tv128[rsp], rax
	mov	eax, 8
	mov	rcx, QWORD PTR tv128[rsp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T5[rsp], rax
	mov	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR t_subtex$[rsp], rax

; 314  : 	float* t_position = new float[keys];

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	QWORD PTR tv140[rsp], rax
	mov	eax, 4
	mov	rcx, QWORD PTR tv140[rsp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T6[rsp], rax
	mov	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR t_position$[rsp], rax

; 315  : 	AColor* t_color = new AColor[keys];

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	QWORD PTR $T4[rsp], rax
	mov	eax, 16
	mul	QWORD PTR $T4[rsp]
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_??_UMaxHeapOperators@@SAPEAX_K@Z
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 0
	je	SHORT $LN14@addKey
	lea	r9, OFFSET FLAT:??0AColor@@QEAA@XZ	; AColor::AColor
	mov	r8, QWORD PTR $T4[rsp]
	mov	edx, 16
	mov	rcx, QWORD PTR $T3[rsp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv167[rsp], rax
	jmp	SHORT $LN15@addKey
$LN14@addKey:
	mov	QWORD PTR tv167[rsp], 0
$LN15@addKey:
	mov	rax, QWORD PTR tv167[rsp]
	mov	QWORD PTR $T7[rsp], rax
	mov	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR t_color$[rsp], rax

; 316  : 	int* t_number = new int[keys];

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	QWORD PTR tv171[rsp], rax
	mov	eax, 4
	mov	rcx, QWORD PTR tv171[rsp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T8[rsp], rax
	mov	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR t_number$[rsp], rax

; 317  : 	keys--;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+56], eax

; 318  : 
; 319  : 	for (int i=0;i<keys;i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN7@addKey
$LN5@addKey:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN7@addKey:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN6@addKey

; 320  : 		t_subtex[i] = subtex[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsxd	rdx, DWORD PTR i$1[rsp]
	mov	rdi, QWORD PTR t_subtex$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [rdi+rdx*8], rax

; 321  : 		t_position[i] = position[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movsxd	rdx, DWORD PTR i$1[rsp]
	mov	rdi, QWORD PTR t_position$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR [rdi+rdx*4], xmm0

; 322  : 		t_color[i] = color[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movsxd	rdx, DWORD PTR i$1[rsp]
	imul	rdx, rdx, 16
	mov	rdi, QWORD PTR t_color$[rsp]
	add	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb

; 323  : 		t_number[i] = number[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	movsxd	rdx, DWORD PTR i$1[rsp]
	mov	rdi, QWORD PTR t_number$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [rdi+rdx*4], eax

; 324  : 	}

	jmp	$LN5@addKey
$LN6@addKey:

; 325  : 
; 326  : 	t_subtex[keys] = sub;

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	rcx, QWORD PTR t_subtex$[rsp]
	mov	rdx, QWORD PTR sub$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 327  : 	t_position[keys] = pos;

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	rcx, QWORD PTR t_position$[rsp]
	movss	xmm0, DWORD PTR pos$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0

; 328  : 	t_color[keys] = col;

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR t_color$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR col$[rsp]
	mov	ecx, 16
	rep movsb

; 329  : 	t_number[keys] = n;

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+56]
	mov	rcx, QWORD PTR t_number$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 330  : 
; 331  : 	delete[] subtex;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR $T9[rsp], rax
	mov	rcx, QWORD PTR $T9[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 332  : 	delete[] position;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR $T10[rsp], rax
	mov	rcx, QWORD PTR $T10[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 333  : 	delete[] color;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR $T11[rsp], rax
	mov	rcx, QWORD PTR $T11[rsp]
	call	QWORD PTR __imp_??_VMaxHeapOperators@@SAXPEAX@Z

; 334  : 	delete[] number;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR $T12[rsp], rax
	mov	rcx, QWORD PTR $T12[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 335  : 
; 336  : 	subtex = t_subtex;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR t_subtex$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 337  : 	position = t_position;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR t_position$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 338  : 	color = t_color;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR t_color$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 339  : 	number = t_number;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR t_number$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 340  : 
; 341  : 	keys++;		

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	inc	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN1@addKey:

; 342  : }

	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z ENDP ; GradientRamp::addKey
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
i$1 = 32
i$2 = 36
key$ = 40
$T3 = 48
t_subtex$ = 56
t_position$ = 64
t_color$ = 72
t_number$ = 80
$T4 = 88
tv167 = 96
tv128 = 104
$T5 = 112
tv140 = 120
$T6 = 128
$T7 = 136
tv171 = 144
$T8 = 152
$T9 = 160
$T10 = 168
$T11 = 176
$T12 = 184
$T13 = 192
this$ = 240
n$ = 248
pos$ = 256
col$ = 264
sub$ = 272
?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA PROC ; `GradientRamp::addKey'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	rcx, QWORD PTR $T3[rbp]
	call	QWORD PTR __imp_??_VMaxHeapOperators@@SAXPEAX@Z
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA ENDP ; `GradientRamp::addKey'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
i$1 = 32
i$2 = 36
key$ = 40
$T3 = 48
t_subtex$ = 56
t_position$ = 64
t_color$ = 72
t_number$ = 80
$T4 = 88
tv167 = 96
tv128 = 104
$T5 = 112
tv140 = 120
$T6 = 128
$T7 = 136
tv171 = 144
$T8 = 152
$T9 = 160
$T10 = 168
$T11 = 176
$T12 = 184
$T13 = 192
this$ = 240
n$ = 248
pos$ = 256
col$ = 264
sub$ = 272
?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA PROC ; `GradientRamp::addKey'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	rcx, QWORD PTR $T3[rbp]
	call	QWORD PTR __imp_??_VMaxHeapOperators@@SAXPEAX@Z
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??addKey@GradientRamp@@QEAAXHMVAColor@@PEAVTexmap@@@Z@4HA ENDP ; `GradientRamp::addKey'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?selectKey@GradientRamp@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
?selectKey@GradientRamp@@QEAAXH@Z PROC			; GradientRamp::selectKey, COMDAT

; 269  : void GradientRamp::selectKey(int n) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 270  : 	selected = n;	

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax+64], ecx

; 271  : 	//CharStream *out = thread_local(current_stdout);
; 272  : 	//out->printf("Selection sent (%d)\n", selected);
; 273  : 	parent->gradSelKey();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+24]

; 274  : 	//out->printf("Invalidate\n");
; 275  : 	//invalidate();
; 276  : }

	add	rsp, 40					; 00000028H
	ret	0
?selectKey@GradientRamp@@QEAAXH@Z ENDP			; GradientRamp::selectKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?toIndex@GradientRamp@@QEAAHH@Z
_TEXT	SEGMENT
i$1 = 0
this$ = 32
n$ = 40
?toIndex@GradientRamp@@QEAAHH@Z PROC			; GradientRamp::toIndex, COMDAT

; 158  : int GradientRamp::toIndex(int n) {	

$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 159  : 	for (int i=0;i<keys;i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@toIndex
$LN2@toIndex:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@toIndex:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@toIndex

; 160  : 		if (number[i] == n)

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rcx+rax*4], edx
	jne	SHORT $LN5@toIndex

; 161  : 			return i;

	mov	eax, DWORD PTR i$1[rsp]
	jmp	SHORT $LN1@toIndex
$LN5@toIndex:

; 162  : 	return -1;

	jmp	SHORT $LN2@toIndex
$LN3@toIndex:
	mov	eax, -1
$LN1@toIndex:

; 163  : }

	add	rsp, 24
	ret	0
?toIndex@GradientRamp@@QEAAHH@Z ENDP			; GradientRamp::toIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?popup@GradientRamp@@QEAAXHHH@Z
_TEXT	SEGMENT
key$ = 32
tv69 = 36
k$1 = 40
tv169 = 48
this$ = 80
x$ = 88
y$ = 96
sel$ = 104
?popup@GradientRamp@@QEAAXHHH@Z PROC			; GradientRamp::popup, COMDAT

; 237  : void GradientRamp::popup(int x, int y, int sel) {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 238  : 	int key = hit(x,y,true);

	mov	r9b, 1
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?hit@GradientRamp@@QEAAHHH_N@Z		; GradientRamp::hit
	mov	DWORD PTR key$[rsp], eax

; 239  : 	switch (sel) {

	mov	eax, DWORD PTR sel$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 40005		; 00009c45H
	je	SHORT $LN6@popup
	cmp	DWORD PTR tv69[rsp], 40006		; 00009c46H
	je	SHORT $LN4@popup
	cmp	DWORD PTR tv69[rsp], 40007		; 00009c47H
	je	$LN11@popup
	jmp	$LN2@popup
$LN4@popup:

; 240  : 		case ID_MENU_ADDKEY:
; 241  : 			if (key == -1) {

	cmp	DWORD PTR key$[rsp], -1
	jne	SHORT $LN5@popup

; 242  : 				parent->gradAddKey(toPos(x));

	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?toPos@GradientRamp@@QEAAMH@Z		; GradientRamp::toPos
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	movaps	xmm1, xmm0
	call	QWORD PTR [rax]

; 243  : 				selected = keys - 1; // New key gets the last id

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+64], eax

; 244  : 				parent->gradSelKey();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+24]
$LN5@popup:

; 245  : 			}
; 246  : 			break;

	jmp	$LN2@popup
$LN6@popup:

; 247  : 		case ID_MENU_REMOVEKEY:
; 248  : 			if (key >= 0) {

	cmp	DWORD PTR key$[rsp], 0
	jl	SHORT $LN7@popup

; 249  : 				if (selected == number[key]) selected = -1;

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN9@popup
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+64], -1
$LN9@popup:

; 250  : 				parent->gradDelKey(number[key]);

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv169[rsp], rdx
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, r8
	mov	rax, QWORD PTR tv169[rsp]
	call	QWORD PTR [rax+16]
	jmp	SHORT $LN8@popup
$LN7@popup:

; 251  : 			} else if (selected >= 0) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+64], 0
	jl	SHORT $LN10@popup

; 252  : 				int k = selected;				

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	DWORD PTR k$1[rsp], eax

; 253  : 				selected = -1;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+64], -1

; 254  : 				parent->gradDelKey(k);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	mov	edx, DWORD PTR k$1[rsp]
	call	QWORD PTR [rax+16]
$LN10@popup:
$LN8@popup:

; 255  : 			}
; 256  : 			break;

	jmp	SHORT $LN2@popup
$LN11@popup:

; 257  : 		case ID_RESET_RESET:
; 258  : 			selected = -1;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+64], -1

; 259  : 			parent->gradReset();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+32]
$LN2@popup:

; 260  : 			break;
; 261  : 	}
; 262  : }

	add	rsp, 72					; 00000048H
	ret	0
?popup@GradientRamp@@QEAAXHHH@Z ENDP			; GradientRamp::popup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?dragging@GradientRamp@@QEAAXHH_N00@Z
_TEXT	SEGMENT
this$ = 48
x$ = 56
y$ = 64
ctrl$ = 72
shift$ = 80
alt$ = 88
?dragging@GradientRamp@@QEAAXHH_N00@Z PROC		; GradientRamp::dragging, COMDAT

; 228  : void GradientRamp::dragging(int x, int y, bool ctrl, bool shift, bool alt) {				

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 229  : 	if (selected <= 1) // Refuse to move ends and empty

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+64], 1
	jg	SHORT $LN2@dragging

; 230  : 		return; 	

	jmp	SHORT $LN1@dragging
$LN2@dragging:

; 231  : 	if (selected < keys)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+64], ecx
	jge	SHORT $LN3@dragging

; 232  : 		parent->gradMoveKey(selected, toPos(x));		

	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?toPos@GradientRamp@@QEAAMH@Z		; GradientRamp::toPos
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rdx+64]
	call	QWORD PTR [rax+8]
$LN3@dragging:
$LN1@dragging:

; 233  : 	//CharStream *out = thread_local(current_stdout);
; 234  : 	//out->printf("Move key: %d %f\n", number[selected], pos);
; 235  : }

	add	rsp, 40					; 00000028H
	ret	0
?dragging@GradientRamp@@QEAAXHH_N00@Z ENDP		; GradientRamp::dragging
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?leftUp@GradientRamp@@QEAAXHH_N00@Z
_TEXT	SEGMENT
key$ = 32
tv147 = 40
this$ = 64
x$ = 72
y$ = 80
ctrl$ = 88
shift$ = 96
alt$ = 104
?leftUp@GradientRamp@@QEAAXHH_N00@Z PROC		; GradientRamp::leftUp, COMDAT

; 212  : void GradientRamp::leftUp(int x, int y, bool ctrl, bool shift, bool alt) {

$LN7:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 213  : 	int key = hit(x,y);	 

	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?hit@GradientRamp@@QEAAHHH_N@Z		; GradientRamp::hit
	mov	DWORD PTR key$[rsp], eax

; 214  : 	if (alt && key == -1) {

	movzx	eax, BYTE PTR alt$[rsp]
	test	eax, eax
	je	SHORT $LN2@leftUp
	cmp	DWORD PTR key$[rsp], -1
	jne	SHORT $LN2@leftUp

; 215  : 		parent->gradAddKey(toPos(x));

	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?toPos@GradientRamp@@QEAAMH@Z		; GradientRamp::toPos
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	movaps	xmm1, xmm0
	call	QWORD PTR [rax]

; 216  : 		selected = keys - 1; // New key gets the last id

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	dec	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+64], eax

; 217  : 		parent->gradSelKey();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+24]
	jmp	SHORT $LN3@leftUp
$LN2@leftUp:

; 218  : 		
; 219  : 		//CharStream *out = thread_local(current_stdout);
; 220  : 		//out->printf("Key added!\n");	
; 221  : 
; 222  : 	} else if (alt && key >= 0) {

	movzx	eax, BYTE PTR alt$[rsp]
	test	eax, eax
	je	SHORT $LN4@leftUp
	cmp	DWORD PTR key$[rsp], 0
	jl	SHORT $LN4@leftUp

; 223  : 		if (selected == number[key]) selected = -1;

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR [rdx+64], eax
	jne	SHORT $LN5@leftUp
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+64], -1
$LN5@leftUp:

; 224  : 		parent->gradDelKey(number[key]);

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv147[rsp], rdx
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, r8
	mov	rax, QWORD PTR tv147[rsp]
	call	QWORD PTR [rax+16]
$LN4@leftUp:
$LN3@leftUp:

; 225  : 	}	
; 226  : }

	add	rsp, 56					; 00000038H
	ret	0
?leftUp@GradientRamp@@QEAAXHH_N00@Z ENDP		; GradientRamp::leftUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?leftDown@GradientRamp@@QEAAXHH_N00@Z
_TEXT	SEGMENT
key$ = 32
this$ = 64
x$ = 72
y$ = 80
ctrl$ = 88
shift$ = 96
alt$ = 104
?leftDown@GradientRamp@@QEAAXHH_N00@Z PROC		; GradientRamp::leftDown, COMDAT

; 195  : void GradientRamp::leftDown(int x, int y, bool ctrl, bool shift, bool alt) {

$LN6:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 196  : 	int key = hit(x,y,true);

	mov	r9b, 1
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?hit@GradientRamp@@QEAAHHH_N@Z		; GradientRamp::hit
	mov	DWORD PTR key$[rsp], eax

; 197  : 
; 198  : 	//CharStream *out = thread_local(current_stdout);
; 199  : 	//out->printf("Hit key: %d %d\n", key, selected);
; 200  : 	//out->printf("Left down\n");
; 201  : 
; 202  : 	if (!alt && key >= 0) {

	movzx	eax, BYTE PTR alt$[rsp]
	test	eax, eax
	jne	SHORT $LN2@leftDown
	cmp	DWORD PTR key$[rsp], 0
	jl	SHORT $LN2@leftDown

; 203  : 		selectKey(number[key]);

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR this$[rsp]
	call	?selectKey@GradientRamp@@QEAAXH@Z	; GradientRamp::selectKey
	jmp	SHORT $LN3@leftDown
$LN2@leftDown:

; 204  : 	} else if (key == -1) {

	cmp	DWORD PTR key$[rsp], -1
	jne	SHORT $LN4@leftDown

; 205  : 		selectKey(-1);

	mov	edx, -1
	mov	rcx, QWORD PTR this$[rsp]
	call	?selectKey@GradientRamp@@QEAAXH@Z	; GradientRamp::selectKey
$LN4@leftDown:
$LN3@leftDown:

; 206  : 	}
; 207  : 
; 208  : 	//out->printf("Selected key: %d\n", selected);
; 209  : 	//out->printf("## Seletion DONE! ##\n", selected);
; 210  : }

	add	rsp, 56					; 00000038H
	ret	0
?leftDown@GradientRamp@@QEAAXHH_N00@Z ENDP		; GradientRamp::leftDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?toPos@GradientRamp@@QEAAMH@Z
_TEXT	SEGMENT
pos$ = 0
this$ = 32
x$ = 40
?toPos@GradientRamp@@QEAAMH@Z PROC			; GradientRamp::toPos, COMDAT

; 149  : float GradientRamp::toPos(int x) {

$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 150  : 	float pos = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR pos$[rsp], xmm0

; 151  : 	if (x > width - PADDING)

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 6
	cmp	DWORD PTR x$[rsp], eax
	jle	SHORT $LN2@toPos

; 152  : 		pos = 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pos$[rsp], xmm0
	jmp	SHORT $LN3@toPos
$LN2@toPos:

; 153  : 	else if (x > PADDING)

	cmp	DWORD PTR x$[rsp], 6
	jle	SHORT $LN4@toPos

; 154  : 		pos = (float)(x - PADDING) / (float)(width - PADDING * 2);

	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 6
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 12
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	movss	DWORD PTR pos$[rsp], xmm0
$LN4@toPos:
$LN3@toPos:

; 155  : 	return pos;

	movss	xmm0, DWORD PTR pos$[rsp]

; 156  : }

	add	rsp, 24
	ret	0
?toPos@GradientRamp@@QEAAMH@Z ENDP			; GradientRamp::toPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?hit@GradientRamp@@QEAAHHH_N@Z
_TEXT	SEGMENT
dist$ = 0
i$1 = 4
kx$2 = 8
f_Width$ = 12
this$ = 32
x$ = 40
y$ = 48
broad$ = 56
?hit@GradientRamp@@QEAAHHH_N@Z PROC			; GradientRamp::hit, COMDAT

; 167  : int GradientRamp::hit(int x, int y, bool broad) {

$LN12:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 168  : 	// On gradient, no keys there
; 169  : 	if (y > PADDING && y < (height - PADDING) && !broad)

	cmp	DWORD PTR y$[rsp], 6
	jle	SHORT $LN5@hit
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	sub	eax, 6
	cmp	DWORD PTR y$[rsp], eax
	jge	SHORT $LN5@hit
	movzx	eax, BYTE PTR broad$[rsp]
	test	eax, eax
	jne	SHORT $LN5@hit

; 170  : 		return -1;

	mov	eax, -1
	jmp	$LN1@hit
$LN5@hit:

; 171  : 
; 172  : 	// Distance from gradient
; 173  : 	int dist = 0;

	mov	DWORD PTR dist$[rsp], 0

; 174  : 	if (broad)

	movzx	eax, BYTE PTR broad$[rsp]
	test	eax, eax
	je	SHORT $LN6@hit

; 175  : 		dist  = ARROWS;

	mov	DWORD PTR dist$[rsp], 6
	jmp	SHORT $LN7@hit
$LN6@hit:

; 176  : 	else if (y < PADDING)

	cmp	DWORD PTR y$[rsp], 6
	jge	SHORT $LN8@hit

; 177  : 		dist = PADDING - y;

	mov	eax, 6
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR dist$[rsp], eax

; 178  : 	else

	jmp	SHORT $LN9@hit
$LN8@hit:

; 179  : 		dist = y - height + PADDING;	

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	ecx, DWORD PTR y$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	add	eax, 6
	mov	DWORD PTR dist$[rsp], eax
$LN9@hit:
$LN7@hit:

; 180  : 
; 181  : 	//CharStream *out = thread_local(current_stdout);
; 182  : 	// Intersect all keys
; 183  : 	float f_Width = (float)(width - PADDING * 2);	

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 12
	cvtsi2ss xmm0, eax
	movss	DWORD PTR f_Width$[rsp], xmm0

; 184  : 	for (int i=0;i<keys;i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@hit
$LN2@hit:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@hit:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@hit

; 185  : 		int kx = (int)(f_Width * position[i]) + PADDING;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR f_Width$[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	cvttss2si eax, xmm0
	add	eax, 6
	mov	DWORD PTR kx$2[rsp], eax

; 186  : 		//out->printf("Hit key: %d %d %d\n", x-dist, x+dist, x);
; 187  : 		if (kx-dist <= x && kx+dist >= x)

	mov	eax, DWORD PTR dist$[rsp]
	mov	ecx, DWORD PTR kx$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR x$[rsp]
	jg	SHORT $LN10@hit
	mov	eax, DWORD PTR dist$[rsp]
	mov	ecx, DWORD PTR kx$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR x$[rsp]
	jl	SHORT $LN10@hit

; 188  : 			return i;

	mov	eax, DWORD PTR i$1[rsp]
	jmp	SHORT $LN1@hit
$LN10@hit:

; 189  : 	}

	jmp	SHORT $LN2@hit
$LN3@hit:

; 190  : 
; 191  : 	// No keys found
; 192  : 	return -1;	

	mov	eax, -1
$LN1@hit:

; 193  : }

	add	rsp, 24
	ret	0
?hit@GradientRamp@@QEAAHHH_N@Z ENDP			; GradientRamp::hit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?invalidate@GradientRamp@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?invalidate@GradientRamp@@QEAAXXZ PROC			; GradientRamp::invalidate, COMDAT

; 136  : void GradientRamp::invalidate() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 137  :    if (m_hWnd == NULL) return;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN2@invalidate
	jmp	SHORT $LN1@invalidate
$LN2@invalidate:

; 138  :    //RECT rect;
; 139  :    //GetClientRect(m_hWnd, &rect);
; 140  :    //MapWindowPoints(m_hWnd, p_hWnd, (POINT*)&rect, 2);
; 141  :    //InvalidateRect(p_hWnd, &rect, TRUE);
; 142  :    InvalidateRect(m_hWnd, NULL, TRUE);

	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_InvalidateRect
$LN1@invalidate:

; 143  : }

	add	rsp, 40					; 00000028H
	ret	0
?invalidate@GradientRamp@@QEAAXXZ ENDP			; GradientRamp::invalidate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z
_TEXT	SEGMENT
y$1 = 32
x$2 = 36
offset$ = 40
this$ = 64
px$ = 72
py$ = 80
up$ = 88
hDC$ = 96
colR$ = 104
?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z PROC	; GradientRamp::paintArrow, COMDAT

; 123  : void GradientRamp::paintArrow(int px, int py, bool up, HDC hDC, COLORREF colR) {

$LN11:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 124  : 	int offset = 0;

	mov	DWORD PTR offset$[rsp], 0

; 125  : 	for (int y=0;y<ARROWS;y++) {

	mov	DWORD PTR y$1[rsp], 0
	jmp	SHORT $LN4@paintArrow
$LN2@paintArrow:
	mov	eax, DWORD PTR y$1[rsp]
	inc	eax
	mov	DWORD PTR y$1[rsp], eax
$LN4@paintArrow:
	cmp	DWORD PTR y$1[rsp], 6
	jge	$LN3@paintArrow

; 126  : 		for (int x=0;x<(y*2+1);x++) {

	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN7@paintArrow
$LN5@paintArrow:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN7@paintArrow:
	mov	eax, DWORD PTR y$1[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cmp	DWORD PTR x$2[rsp], eax
	jge	SHORT $LN6@paintArrow

; 127  : 			if (up)

	movzx	eax, BYTE PTR up$[rsp]
	test	eax, eax
	je	SHORT $LN8@paintArrow

; 128  : 				SetPixel(hDC, px+x-offset, py+y, colR);

	mov	eax, DWORD PTR y$1[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	mov	edx, DWORD PTR px$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR offset$[rsp]
	mov	r9d, DWORD PTR colR$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR hDC$[rsp]
	call	QWORD PTR __imp_SetPixel

; 129  : 			else

	jmp	SHORT $LN9@paintArrow
$LN8@paintArrow:

; 130  : 				SetPixel(hDC, px+x-offset, py-y, colR);

	mov	eax, DWORD PTR y$1[rsp]
	mov	ecx, DWORD PTR py$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$2[rsp]
	mov	edx, DWORD PTR px$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR offset$[rsp]
	mov	r9d, DWORD PTR colR$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR hDC$[rsp]
	call	QWORD PTR __imp_SetPixel
$LN9@paintArrow:

; 131  : 		}

	jmp	$LN5@paintArrow
$LN6@paintArrow:

; 132  : 		offset++;

	mov	eax, DWORD PTR offset$[rsp]
	inc	eax
	mov	DWORD PTR offset$[rsp], eax

; 133  : 	}

	jmp	$LN2@paintArrow
$LN3@paintArrow:

; 134  : }

	add	rsp, 56					; 00000038H
	ret	0
?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ENDP	; GradientRamp::paintArrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z
_TEXT	SEGMENT
i$1 = 80
tempHDC$ = 88
x$2 = 96
y$3 = 100
sel$ = 104
f_Width$ = 108
g_Width$ = 112
x$4 = 116
yTop$ = 120
yBottom$ = 124
gray$ = 128
g_Height$ = 136
colR$5 = 140
hbm_Buffer$ = 144
hbm_oldBuffer$ = 152
rect$ = 160
col$6 = 176
__$ArrayPad$ = 192
this$ = 224
hDC$ = 232
?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z PROC		; GradientRamp::paint, COMDAT

; 42   : void GradientRamp::paint(HDC hDC) {	

$LN16:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 43   : 	if (m_hWnd == NULL) return;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN11@paint
	jmp	$LN1@paint
$LN11@paint:

; 44   : 	//SetBkMode(hDC, TRANSPARENT);	
; 45   : 
; 46   : 	//RECT rect;
; 47   : 	//GetClientRect(m_hWnd, &rect);
; 48   : 	
; 49   : 	/*SelectObject(hdc,red_pen);
; 50   : 	MoveToEx(hdc,10,20,NULL);
; 51   : 	LineTo(hdc,10,40,NULL);
; 52   : 	LineTo(hdc,50,150,NULL);*/
; 53   : 	/*	
; 54   : 	int width = rect.right - rect.left;
; 55   : 	int height = rect.top - rect.bottom;
; 56   : 
; 57   : 	RECT rect2;
; 58   : 	GetWindowRect(m_hWnd, &rect2);
; 59   : 									
; 60   : 	CharStream *out = thread_local(current_stdout);
; 61   : 	out->printf("Rectangle: %d %d %d %d\n", rect.left, rect.right, rect.top, rect.bottom);
; 62   : 	out->printf("Rectangle2: %d %d %d %d\n", (int)(rect2.left, (int)(rect2.right), (int)(rect2.top), (int)(rect2.bottom));
; 63   : 	*/
; 64   : 
; 65   : 	HDC tempHDC = CreateCompatibleDC(hDC);

	mov	rcx, QWORD PTR hDC$[rsp]
	call	QWORD PTR __imp_CreateCompatibleDC
	mov	QWORD PTR tempHDC$[rsp], rax

; 66   : 	HBITMAP hbm_Buffer = CreateCompatibleBitmap(hDC, width, height);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rax+20]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR hDC$[rsp]
	call	QWORD PTR __imp_CreateCompatibleBitmap
	mov	QWORD PTR hbm_Buffer$[rsp], rax

; 67   : 	HBITMAP hbm_oldBuffer = (HBITMAP)SelectObject(tempHDC, hbm_Buffer);

	mov	rdx, QWORD PTR hbm_Buffer$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_SelectObject
	mov	QWORD PTR hbm_oldBuffer$[rsp], rax

; 68   : 
; 69   : 	// Borders
; 70   : 	RECT rect;	
; 71   : 	HBRUSH gray = CreateSolidBrush(RGB(175,175,175)); 	

	mov	ecx, 11513775				; 00afafafH
	call	QWORD PTR __imp_CreateSolidBrush
	mov	QWORD PTR gray$[rsp], rax

; 72   : 	rect.left = 0; rect.top = 0; rect.right = width; rect.bottom = PADDING;

	mov	DWORD PTR rect$[rsp], 0
	mov	DWORD PTR rect$[rsp+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR rect$[rsp+8], eax
	mov	DWORD PTR rect$[rsp+12], 6

; 73   : 	FillRect(tempHDC,&rect,gray);

	mov	r8, QWORD PTR gray$[rsp]
	lea	rdx, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_FillRect

; 74   : 	rect.right = PADDING; rect.bottom = height;

	mov	DWORD PTR rect$[rsp+8], 6
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR rect$[rsp+12], eax

; 75   : 	FillRect(tempHDC,&rect,gray);

	mov	r8, QWORD PTR gray$[rsp]
	lea	rdx, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_FillRect

; 76   : 	rect.left = width-PADDING; rect.right = width;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 6
	mov	DWORD PTR rect$[rsp], eax
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR rect$[rsp+8], eax

; 77   : 	FillRect(tempHDC,&rect,gray);

	mov	r8, QWORD PTR gray$[rsp]
	lea	rdx, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_FillRect

; 78   : 	rect.left = 0; rect.top = height-PADDING;

	mov	DWORD PTR rect$[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	sub	eax, 6
	mov	DWORD PTR rect$[rsp+4], eax

; 79   : 	FillRect(tempHDC,&rect,gray);

	mov	r8, QWORD PTR gray$[rsp]
	lea	rdx, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_FillRect

; 80   : 
; 81   : 	int g_Width = width - PADDING * 2;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 12
	mov	DWORD PTR g_Width$[rsp], eax

; 82   : 	int g_Height = height - PADDING *2;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	sub	eax, 12
	mov	DWORD PTR g_Height$[rsp], eax

; 83   : 	float f_Width = (float)g_Width;	

	cvtsi2ss xmm0, DWORD PTR g_Width$[rsp]
	movss	DWORD PTR f_Width$[rsp], xmm0

; 84   : 
; 85   : 	// Gradient
; 86   : 	for (int x=PADDING; x<g_Width+PADDING; x++) {

	mov	DWORD PTR x$2[rsp], 6
	jmp	SHORT $LN4@paint
$LN2@paint:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN4@paint:
	mov	eax, DWORD PTR g_Width$[rsp]
	add	eax, 6
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN3@paint

; 87   : 		AColor col = getColor((float)(x-PADDING) / (f_Width-1.f));

	mov	eax, DWORD PTR x$2[rsp]
	sub	eax, 6
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR f_Width$[rsp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR col$6[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?getColor@GradientRamp@@QEAA?AVAColor@@M@Z ; GradientRamp::getColor

; 88   : 
; 89   : 		COLORREF colR = RGB((int)(col.r*255.f), (int)(col.g*255.f), (int)(col.b*255.f));		

	movss	xmm0, DWORD PTR col$6[rsp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	movzx	eax, al
	movss	xmm0, DWORD PTR col$6[rsp+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	movzx	ecx, cl
	shl	ecx, 8
	or	eax, ecx
	movss	xmm0, DWORD PTR col$6[rsp+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	movzx	ecx, cl
	shl	ecx, 16
	or	eax, ecx
	mov	DWORD PTR colR$5[rsp], eax

; 90   : 		for (int y=PADDING; y<g_Height+PADDING; y++)		

	mov	DWORD PTR y$3[rsp], 6
	jmp	SHORT $LN7@paint
$LN5@paint:
	mov	eax, DWORD PTR y$3[rsp]
	inc	eax
	mov	DWORD PTR y$3[rsp], eax
$LN7@paint:
	mov	eax, DWORD PTR g_Height$[rsp]
	add	eax, 6
	cmp	DWORD PTR y$3[rsp], eax
	jge	SHORT $LN6@paint

; 91   : 			SetPixel(tempHDC, x, y, colR);

	mov	r9d, DWORD PTR colR$5[rsp]
	mov	r8d, DWORD PTR y$3[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_SetPixel
	jmp	SHORT $LN5@paint
$LN6@paint:

; 92   : 	}

	jmp	$LN2@paint
$LN3@paint:

; 93   : 
; 94   : 	// Keys
; 95   : 	int yTop = PADDING - 1;

	mov	DWORD PTR yTop$[rsp], 5

; 96   : 	int yBottom = height - PADDING;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	sub	eax, 6
	mov	DWORD PTR yBottom$[rsp], eax

; 97   : 	int sel = -1;

	mov	DWORD PTR sel$[rsp], -1

; 98   : 	for (int i=0;i<keys;i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN10@paint
$LN8@paint:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN10@paint:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+56]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN9@paint

; 99   : 		//CharStream *out = thread_local(current_stdout);
; 100  : 		//out->printf("Key pos: %f\n", position[i]);	
; 101  : 		if (number[i] != selected) {

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rdx+64]
	cmp	DWORD PTR [rcx+rax*4], edx
	je	SHORT $LN12@paint

; 102  : 			int x = (int)(f_Width * position[i]) + PADDING;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR f_Width$[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	cvttss2si eax, xmm0
	add	eax, 6
	mov	DWORD PTR x$4[rsp], eax

; 103  : 			paintArrow(x, yTop, false, tempHDC, ARROWDESEL);

	mov	DWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR tempHDC$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, DWORD PTR yTop$[rsp]
	mov	edx, DWORD PTR x$4[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ; GradientRamp::paintArrow

; 104  : 			paintArrow(x, yBottom, true, tempHDC, ARROWDESEL);

	mov	DWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR tempHDC$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9b, 1
	mov	r8d, DWORD PTR yBottom$[rsp]
	mov	edx, DWORD PTR x$4[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ; GradientRamp::paintArrow

; 105  : 		} else {

	jmp	SHORT $LN13@paint
$LN12@paint:

; 106  : 			sel = i;

	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR sel$[rsp], eax
$LN13@paint:

; 107  : 		}
; 108  : 	}	

	jmp	$LN8@paint
$LN9@paint:

; 109  : 	if (sel != -1) {

	cmp	DWORD PTR sel$[rsp], -1
	je	$LN14@paint

; 110  : 		paintArrow((int)(f_Width * position[sel]) + PADDING, yTop, false, tempHDC, ARROWSEL);

	movsxd	rax, DWORD PTR sel$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR f_Width$[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	cvttss2si eax, xmm0
	add	eax, 6
	mov	DWORD PTR [rsp+40], 16777215		; 00ffffffH
	mov	rcx, QWORD PTR tempHDC$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8d, DWORD PTR yTop$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rsp]
	call	?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ; GradientRamp::paintArrow

; 111  : 		paintArrow((int)(f_Width * position[sel]) + PADDING, yBottom, true, tempHDC, ARROWSEL);	

	movsxd	rax, DWORD PTR sel$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR f_Width$[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	cvttss2si eax, xmm0
	add	eax, 6
	mov	DWORD PTR [rsp+40], 16777215		; 00ffffffH
	mov	rcx, QWORD PTR tempHDC$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9b, 1
	mov	r8d, DWORD PTR yBottom$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rsp]
	call	?paintArrow@GradientRamp@@QEAAXHH_NPEAUHDC__@@K@Z ; GradientRamp::paintArrow
$LN14@paint:

; 112  : 	}
; 113  : 
; 114  : 	//GetClientRect(m_hWnd, &rect);
; 115  : 	BitBlt(hDC, 0, 0, width, height, tempHDC, 0, 0, SRCCOPY);

	mov	DWORD PTR [rsp+64], 13369376		; 00cc0020H
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tempHDC$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR this$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR hDC$[rsp]
	call	QWORD PTR __imp_BitBlt

; 116  : 	//BitBlt(hDC, rect.left, rect.top, rect.right, rect.bottom, tempHDC, 0, 0, SRCCOPY);
; 117  : 
; 118  :     SelectObject(tempHDC, hbm_oldBuffer);

	mov	rdx, QWORD PTR hbm_oldBuffer$[rsp]
	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_SelectObject

; 119  :  	DeleteDC(tempHDC);

	mov	rcx, QWORD PTR tempHDC$[rsp]
	call	QWORD PTR __imp_DeleteDC

; 120  :     DeleteObject(hbm_Buffer); 

	mov	rcx, QWORD PTR hbm_Buffer$[rsp]
	call	QWORD PTR __imp_DeleteObject
$LN1@paint:

; 121  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?paint@GradientRamp@@QEAAXPEAUHDC__@@@Z ENDP		; GradientRamp::paint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z
_TEXT	SEGMENT
rect$ = 32
__$ArrayPad$ = 48
this$ = 80
hWnd$ = 88
?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z PROC		; GradientRamp::setHWND, COMDAT

; 30   : void GradientRamp::setHWND(HWND hWnd) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 31   : 	m_hWnd = hWnd; 

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR hWnd$[rsp]
	mov	QWORD PTR [rax], rcx

; 32   : 	RECT rect;
; 33   : 	GetWindowRect(m_hWnd, &rect);													

	lea	rdx, QWORD PTR rect$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_GetWindowRect

; 34   : 	width = rect.right - rect.left;

	mov	eax, DWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR rect$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 35   : 	height = rect.bottom - rect.top;	

	mov	eax, DWORD PTR rect$[rsp+4]
	mov	ecx, DWORD PTR rect$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+20], eax

; 36   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?setHWND@GradientRamp@@QEAAXPEAUHWND__@@@Z ENDP		; GradientRamp::setHWND
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\berconcommon.h
;	COMDAT ??__Eintvalid@@YAXXZ
text$di	SEGMENT
??__Eintvalid@@YAXXZ PROC				; `dynamic initializer for 'intvalid'', COMDAT

; 83   : static Interval intvalid = Interval(TIME_NegInfinity, TIME_PosInfinity);

	sub	rsp, 40					; 00000028H
	mov	r8d, 2147483647				; 7fffffffH
	mov	edx, -2147483648			; ffffffff80000000H
	lea	rcx, OFFSET FLAT:?intvalid@@3VInterval@@A
	call	QWORD PTR __imp_??0Interval@@QEAA@HH@Z
	add	rsp, 40					; 00000028H
	ret	0
??__Eintvalid@@YAXXZ ENDP				; `dynamic initializer for 'intvalid''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\triobj.h
;	COMDAT ??__EkTriObjNormalXTCID@@YAXXZ
text$di	SEGMENT
??__EkTriObjNormalXTCID@@YAXXZ PROC			; `dynamic initializer for 'kTriObjNormalXTCID'', COMDAT

; 289  : const Class_ID kTriObjNormalXTCID = Class_ID(0x730a33d7, 0x27246c55);

	sub	rsp, 40					; 00000028H
	mov	r8d, 656698453				; 27246c55H
	mov	edx, 1930048471				; 730a33d7H
	lea	rcx, OFFSET FLAT:?kTriObjNormalXTCID@@3VClass_ID@@B
	call	??0Class_ID@@QEAA@KK@Z			; Class_ID::Class_ID
	add	rsp, 40					; 00000028H
	ret	0
??__EkTriObjNormalXTCID@@YAXXZ ENDP			; `dynamic initializer for 'kTriObjNormalXTCID''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\acolor.h
;	COMDAT ??D@YA?AVAColor@@AEBV0@M@Z
_TEXT	SEGMENT
tv76 = 48
__$ReturnUdt$ = 80
a$ = 88
f$ = 96
??D@YA?AVAColor@@AEBV0@M@Z PROC				; operator*, COMDAT

; 314  : inline AColor operator*(const AColor& a, float f) {

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 315  : 	return(AColor(a.r*f, a.g*f, a.b*f, a.a*f));

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR f$[rsp]
	movss	DWORD PTR tv76[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@MMMM@Z			; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 316  : 	}

	add	rsp, 72					; 00000048H
	ret	0
??D@YA?AVAColor@@AEBV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\acolor.h
;	COMDAT ??HAColor@@QEBA?AV0@AEBV0@@Z
_TEXT	SEGMENT
tv80 = 48
this$ = 80
__$ReturnUdt$ = 88
c$ = 96
??HAColor@@QEBA?AV0@AEBV0@@Z PROC			; AColor::operator+, COMDAT

; 290  : inline AColor AColor::operator+(const AColor& c) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 291  : 	return(AColor(r+c.r,g+c.g,b+c.b,a+c.a));

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0AColor@@QEAA@MMMM@Z			; AColor::AColor
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 292  : 	}

	add	rsp, 72					; 00000048H
	ret	0
??HAColor@@QEBA?AV0@AEBV0@@Z ENDP			; AColor::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\acolor.h
;	COMDAT ??0AColor@@QEAA@AEBV0@@Z
_TEXT	SEGMENT
this$ = 8
c$ = 16
??0AColor@@QEAA@AEBV0@@Z PROC				; AColor::AColor, COMDAT

; 54   : 	AColor(const AColor& c) { r = c.r; g = c.g; b = c.b; a = c.a; } 

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0AColor@@QEAA@AEBV0@@Z ENDP				; AColor::AColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\acolor.h
;	COMDAT ??0AColor@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 8
R$ = 16
G$ = 24
B$ = 32
A$ = 40
??0AColor@@QEAA@MMMM@Z PROC				; AColor::AColor, COMDAT

; 44   : 	AColor(float R, float G, float B, float A=1.0f)  { r = R; g = G; b = B; a = A; }

	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR R$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR G$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR B$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR A$[rsp]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0AColor@@QEAA@MMMM@Z ENDP				; AColor::AColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\acolor.h
;	COMDAT ??0AColor@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0AColor@@QEAA@XZ PROC					; AColor::AColor, COMDAT

; 41   : 	AColor()  {}

	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0AColor@@QEAA@XZ ENDP					; AColor::AColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ
text$di	SEGMENT
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ PROC	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId'', COMDAT

; 32   : 		static AssetId kInvalidId;

	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?kInvalidId@AssetManagement@MaxSDK@@3UAssetId@12@A
	call	??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ; MaxSDK::AssetManagement::AssetId::AssetId
	add	rsp, 40					; 00000028H
	ret	0
??__EkInvalidId@AssetManagement@MaxSDK@@YAXXZ ENDP	; MaxSDK::AssetManagement::`dynamic initializer for 'kInvalidId''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\assetmanagement\assetid.h
;	COMDAT ??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ
_TEXT	SEGMENT
this$ = 24
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ PROC		; MaxSDK::AssetManagement::AssetId::AssetId, COMDAT

; 29   : 			AssetId() { *static_cast<GUID*>(this) = CLSID_NULL; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	lea	rax, OFFSET FLAT:GUID_NULL
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0AssetId@AssetManagement@MaxSDK@@QEAA@XZ ENDP		; MaxSDK::AssetManagement::AssetId::AssetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\point3.h
;	COMDAT ??D@YA?AVPoint3@@MAEBV0@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
f$ = 72
a$ = 80
??D@YA?AVPoint3@@MAEBV0@@Z PROC				; operator*, COMDAT

; 320  : __forceinline Point3 operator*(float f, const Point3& a) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 321  :    return(Point3(a.x*f, a.y*f, a.z*f));

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR f$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR f$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	QWORD PTR __imp_??0Point3@@QEAA@MMM@Z
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 322  :    }

	add	rsp, 56					; 00000038H
	ret	0
??D@YA?AVPoint3@@MAEBV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files\autodesk\3ds max 2018 sdk\maxsdk\include\maxtypes.h
;	COMDAT ??0Class_ID@@QEAA@KK@Z
_TEXT	SEGMENT
this$ = 8
aa$ = 16
bb$ = 24
??0Class_ID@@QEAA@KK@Z PROC				; Class_ID::Class_ID, COMDAT

; 160  : 	Class_ID(ulong aa, ulong bb) { a = aa; b = bb; }

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR aa$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR bb$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	ret	0
??0Class_ID@@QEAA@KK@Z ENDP				; Class_ID::Class_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\james\source\repos\berconmaps\src\gradientramp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

	mov	QWORD PTR [rsp+8], rcx
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 56					; 00000038H
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
